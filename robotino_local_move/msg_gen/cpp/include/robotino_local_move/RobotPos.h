/* Auto-generated by genmsg_cpp for file /home/robotino/fuerte_workspace/sandbox/robotino/robotino_local_move/msg/RobotPos.msg */
#ifndef ROBOTINO_LOCAL_MOVE_MESSAGE_ROBOTPOS_H
#define ROBOTINO_LOCAL_MOVE_MESSAGE_ROBOTPOS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace robotino_local_move
{
template <class ContainerAllocator>
struct RobotPos_ {
  typedef RobotPos_<ContainerAllocator> Type;

  RobotPos_()
  : posX(0.0)
  , posY(0.0)
  , phi(0.0)
  {
  }

  RobotPos_(const ContainerAllocator& _alloc)
  : posX(0.0)
  , posY(0.0)
  , phi(0.0)
  {
  }

  typedef float _posX_type;
  float posX;

  typedef float _posY_type;
  float posY;

  typedef float _phi_type;
  float phi;


  typedef boost::shared_ptr< ::robotino_local_move::RobotPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_local_move::RobotPos_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RobotPos
typedef  ::robotino_local_move::RobotPos_<std::allocator<void> > RobotPos;

typedef boost::shared_ptr< ::robotino_local_move::RobotPos> RobotPosPtr;
typedef boost::shared_ptr< ::robotino_local_move::RobotPos const> RobotPosConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robotino_local_move::RobotPos_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robotino_local_move::RobotPos_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robotino_local_move

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_local_move::RobotPos_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_local_move::RobotPos_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_local_move::RobotPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "81d3a41d72b1ad4bdadcb7434b1e06d1";
  }

  static const char* value(const  ::robotino_local_move::RobotPos_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x81d3a41d72b1ad4bULL;
  static const uint64_t static_value2 = 0xdadcb7434b1e06d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_local_move::RobotPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_local_move/RobotPos";
  }

  static const char* value(const  ::robotino_local_move::RobotPos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_local_move::RobotPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 posX\n\
float32 posY\n\
float32 phi\n\
\n\
";
  }

  static const char* value(const  ::robotino_local_move::RobotPos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotino_local_move::RobotPos_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_local_move::RobotPos_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.posX);
    stream.next(m.posY);
    stream.next(m.phi);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RobotPos_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotino_local_move::RobotPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robotino_local_move::RobotPos_<ContainerAllocator> & v) 
  {
    s << indent << "posX: ";
    Printer<float>::stream(s, indent + "  ", v.posX);
    s << indent << "posY: ";
    Printer<float>::stream(s, indent + "  ", v.posY);
    s << indent << "phi: ";
    Printer<float>::stream(s, indent + "  ", v.phi);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBOTINO_LOCAL_MOVE_MESSAGE_ROBOTPOS_H

