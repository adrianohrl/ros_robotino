/* Auto-generated by genmsg_cpp for file /home/viki/ros_workspace/robotino-ros-pkg/robotino/robotino_local_move/msg/LocalMoveFeedback.msg */
#ifndef ROBOTINO_LOCAL_MOVE_MESSAGE_LOCALMOVEFEEDBACK_H
#define ROBOTINO_LOCAL_MOVE_MESSAGE_LOCALMOVEFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace robotino_local_move
{
template <class ContainerAllocator>
struct LocalMoveFeedback_ {
  typedef LocalMoveFeedback_<ContainerAllocator> Type;

  LocalMoveFeedback_()
  : forward_dist_x(0.0)
  , forward_dist_y(0.0)
  , rotation_dist(0.0)
  {
  }

  LocalMoveFeedback_(const ContainerAllocator& _alloc)
  : forward_dist_x(0.0)
  , forward_dist_y(0.0)
  , rotation_dist(0.0)
  {
  }

  typedef float _forward_dist_x_type;
  float forward_dist_x;

  typedef float _forward_dist_y_type;
  float forward_dist_y;

  typedef float _rotation_dist_type;
  float rotation_dist;


  typedef boost::shared_ptr< ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LocalMoveFeedback
typedef  ::robotino_local_move::LocalMoveFeedback_<std::allocator<void> > LocalMoveFeedback;

typedef boost::shared_ptr< ::robotino_local_move::LocalMoveFeedback> LocalMoveFeedbackPtr;
typedef boost::shared_ptr< ::robotino_local_move::LocalMoveFeedback const> LocalMoveFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robotino_local_move

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fcda879d7916aea8cf95cd23201a7d19";
  }

  static const char* value(const  ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfcda879d7916aea8ULL;
  static const uint64_t static_value2 = 0xcf95cd23201a7d19ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_local_move/LocalMoveFeedback";
  }

  static const char* value(const  ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback\n\
float32 forward_dist_x	# forward distance to goal in x\n\
float32 forward_dist_y	# forward distance to goal in y\n\
float32 rotation_dist	# rotationaldistance to goal\n\
\n\
";
  }

  static const char* value(const  ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.forward_dist_x);
    stream.next(m.forward_dist_y);
    stream.next(m.rotation_dist);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LocalMoveFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robotino_local_move::LocalMoveFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "forward_dist_x: ";
    Printer<float>::stream(s, indent + "  ", v.forward_dist_x);
    s << indent << "forward_dist_y: ";
    Printer<float>::stream(s, indent + "  ", v.forward_dist_y);
    s << indent << "rotation_dist: ";
    Printer<float>::stream(s, indent + "  ", v.rotation_dist);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBOTINO_LOCAL_MOVE_MESSAGE_LOCALMOVEFEEDBACK_H

