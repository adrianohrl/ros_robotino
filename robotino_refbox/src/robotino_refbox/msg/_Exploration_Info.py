"""autogenerated by genpy from robotino_refbox/Exploration_Info.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Exploration_Info(genpy.Message):
  _md5sum = "ede2b576660999fcdb786dbea7cbcbc9"
  _type = "robotino_refbox/Exploration_Info"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string[12] machines
int32[5] red
int32[5] yellow
int32[5] green

"""
  __slots__ = ['machines','red','yellow','green']
  _slot_types = ['string[12]','int32[5]','int32[5]','int32[5]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       machines,red,yellow,green

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Exploration_Info, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.machines is None:
        self.machines = ['','','','','','','','','','','','']
      if self.red is None:
        self.red = [0,0,0,0,0]
      if self.yellow is None:
        self.yellow = [0,0,0,0,0]
      if self.green is None:
        self.green = [0,0,0,0,0]
    else:
      self.machines = ['','','','','','','','','','','','']
      self.red = [0,0,0,0,0]
      self.yellow = [0,0,0,0,0]
      self.green = [0,0,0,0,0]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      for val1 in self.machines:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_5i.pack(*self.red))
      buff.write(_struct_5i.pack(*self.yellow))
      buff.write(_struct_5i.pack(*self.green))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      self.machines = []
      for i in range(0, 12):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.machines.append(val1)
      start = end
      end += 20
      self.red = _struct_5i.unpack(str[start:end])
      start = end
      end += 20
      self.yellow = _struct_5i.unpack(str[start:end])
      start = end
      end += 20
      self.green = _struct_5i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      for val1 in self.machines:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(self.red.tostring())
      buff.write(self.yellow.tostring())
      buff.write(self.green.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      self.machines = []
      for i in range(0, 12):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.machines.append(val1)
      start = end
      end += 20
      self.red = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=5)
      start = end
      end += 20
      self.yellow = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=5)
      start = end
      end += 20
      self.green = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=5)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5i = struct.Struct("<5i")
