"""autogenerated by genpy from robotino_refbox/Order_Info.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Order_Info(genpy.Message):
  _md5sum = "ab16e001315a0706ff1b6bbcef9832bf"
  _type = "robotino_refbox/Order_Info"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32[5] peca
int64[5] minI
int64[5] secI
int64[5] minF
int64[5] secF

"""
  __slots__ = ['peca','minI','secI','minF','secF']
  _slot_types = ['int32[5]','int64[5]','int64[5]','int64[5]','int64[5]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       peca,minI,secI,minF,secF

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Order_Info, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.peca is None:
        self.peca = [0,0,0,0,0]
      if self.minI is None:
        self.minI = [0,0,0,0,0]
      if self.secI is None:
        self.secI = [0,0,0,0,0]
      if self.minF is None:
        self.minF = [0,0,0,0,0]
      if self.secF is None:
        self.secF = [0,0,0,0,0]
    else:
      self.peca = [0,0,0,0,0]
      self.minI = [0,0,0,0,0]
      self.secI = [0,0,0,0,0]
      self.minF = [0,0,0,0,0]
      self.secF = [0,0,0,0,0]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_5i.pack(*self.peca))
      buff.write(_struct_5q.pack(*self.minI))
      buff.write(_struct_5q.pack(*self.secI))
      buff.write(_struct_5q.pack(*self.minF))
      buff.write(_struct_5q.pack(*self.secF))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 20
      self.peca = _struct_5i.unpack(str[start:end])
      start = end
      end += 40
      self.minI = _struct_5q.unpack(str[start:end])
      start = end
      end += 40
      self.secI = _struct_5q.unpack(str[start:end])
      start = end
      end += 40
      self.minF = _struct_5q.unpack(str[start:end])
      start = end
      end += 40
      self.secF = _struct_5q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.peca.tostring())
      buff.write(self.minI.tostring())
      buff.write(self.secI.tostring())
      buff.write(self.minF.tostring())
      buff.write(self.secF.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 20
      self.peca = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=5)
      start = end
      end += 40
      self.minI = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=5)
      start = end
      end += 40
      self.secI = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=5)
      start = end
      end += 40
      self.minF = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=5)
      start = end
      end += 40
      self.secF = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=5)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5q = struct.Struct("<5q")
_struct_5i = struct.Struct("<5i")
