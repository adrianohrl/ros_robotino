/* Auto-generated by genmsg_cpp for file /home/robotino/fuerte_workspace/sandbox/robotino/robotino_refbox/msg/Machine_Types.msg */
#ifndef ROBOTINO_REFBOX_MESSAGE_MACHINE_TYPES_H
#define ROBOTINO_REFBOX_MESSAGE_MACHINE_TYPES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace robotino_refbox
{
template <class ContainerAllocator>
struct Machine_Types_ {
  typedef Machine_Types_<ContainerAllocator> Type;

  Machine_Types_()
  : machines()
  , types()
  {
  }

  Machine_Types_(const ContainerAllocator& _alloc)
  : machines()
  , types()
  {
    machines.assign(std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > (_alloc));
    types.assign(std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > (_alloc));
  }

  typedef boost::array<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , 12>  _machines_type;
  boost::array<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , 12>  machines;

  typedef boost::array<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , 12>  _types_type;
  boost::array<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , 12>  types;


  typedef boost::shared_ptr< ::robotino_refbox::Machine_Types_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_refbox::Machine_Types_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Machine_Types
typedef  ::robotino_refbox::Machine_Types_<std::allocator<void> > Machine_Types;

typedef boost::shared_ptr< ::robotino_refbox::Machine_Types> Machine_TypesPtr;
typedef boost::shared_ptr< ::robotino_refbox::Machine_Types const> Machine_TypesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robotino_refbox::Machine_Types_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robotino_refbox::Machine_Types_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robotino_refbox

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_refbox::Machine_Types_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_refbox::Machine_Types_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_refbox::Machine_Types_<ContainerAllocator> > {
  static const char* value() 
  {
    return "256353ef7b866c5b748c7d6096e8f9b8";
  }

  static const char* value(const  ::robotino_refbox::Machine_Types_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x256353ef7b866c5bULL;
  static const uint64_t static_value2 = 0x748c7d6096e8f9b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_refbox::Machine_Types_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_refbox/Machine_Types";
  }

  static const char* value(const  ::robotino_refbox::Machine_Types_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_refbox::Machine_Types_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[12] machines\n\
string[12] types\n\
\n\
";
  }

  static const char* value(const  ::robotino_refbox::Machine_Types_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_refbox::Machine_Types_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.machines);
    stream.next(m.types);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Machine_Types_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotino_refbox::Machine_Types_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robotino_refbox::Machine_Types_<ContainerAllocator> & v) 
  {
    s << indent << "machines[]" << std::endl;
    for (size_t i = 0; i < v.machines.size(); ++i)
    {
      s << indent << "  machines[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.machines[i]);
    }
    s << indent << "types[]" << std::endl;
    for (size_t i = 0; i < v.types.size(); ++i)
    {
      s << indent << "  types[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.types[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBOTINO_REFBOX_MESSAGE_MACHINE_TYPES_H

