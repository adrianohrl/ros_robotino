/* Auto-generated by genmsg_cpp for file /home/robotino/fuerte_workspace/sandbox/robotino/robotino_refbox/msg/Exploration_Info.msg */
#ifndef ROBOTINO_REFBOX_MESSAGE_EXPLORATION_INFO_H
#define ROBOTINO_REFBOX_MESSAGE_EXPLORATION_INFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace robotino_refbox
{
template <class ContainerAllocator>
struct Exploration_Info_ {
  typedef Exploration_Info_<ContainerAllocator> Type;

  Exploration_Info_()
  : machines()
  , red()
  , yellow()
  , green()
  {
    red.assign(0);
    yellow.assign(0);
    green.assign(0);
  }

  Exploration_Info_(const ContainerAllocator& _alloc)
  : machines()
  , red()
  , yellow()
  , green()
  {
    machines.assign(std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > (_alloc));
    red.assign(0);
    yellow.assign(0);
    green.assign(0);
  }

  typedef boost::array<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , 12>  _machines_type;
  boost::array<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , 12>  machines;

  typedef boost::array<int32_t, 5>  _red_type;
  boost::array<int32_t, 5>  red;

  typedef boost::array<int32_t, 5>  _yellow_type;
  boost::array<int32_t, 5>  yellow;

  typedef boost::array<int32_t, 5>  _green_type;
  boost::array<int32_t, 5>  green;


  typedef boost::shared_ptr< ::robotino_refbox::Exploration_Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_refbox::Exploration_Info_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Exploration_Info
typedef  ::robotino_refbox::Exploration_Info_<std::allocator<void> > Exploration_Info;

typedef boost::shared_ptr< ::robotino_refbox::Exploration_Info> Exploration_InfoPtr;
typedef boost::shared_ptr< ::robotino_refbox::Exploration_Info const> Exploration_InfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robotino_refbox::Exploration_Info_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robotino_refbox::Exploration_Info_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robotino_refbox

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_refbox::Exploration_Info_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_refbox::Exploration_Info_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_refbox::Exploration_Info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ede2b576660999fcdb786dbea7cbcbc9";
  }

  static const char* value(const  ::robotino_refbox::Exploration_Info_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xede2b576660999fcULL;
  static const uint64_t static_value2 = 0xdb786dbea7cbcbc9ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_refbox::Exploration_Info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_refbox/Exploration_Info";
  }

  static const char* value(const  ::robotino_refbox::Exploration_Info_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_refbox::Exploration_Info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[12] machines\n\
int32[5] red\n\
int32[5] yellow\n\
int32[5] green\n\
\n\
";
  }

  static const char* value(const  ::robotino_refbox::Exploration_Info_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_refbox::Exploration_Info_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.machines);
    stream.next(m.red);
    stream.next(m.yellow);
    stream.next(m.green);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Exploration_Info_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotino_refbox::Exploration_Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robotino_refbox::Exploration_Info_<ContainerAllocator> & v) 
  {
    s << indent << "machines[]" << std::endl;
    for (size_t i = 0; i < v.machines.size(); ++i)
    {
      s << indent << "  machines[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.machines[i]);
    }
    s << indent << "red[]" << std::endl;
    for (size_t i = 0; i < v.red.size(); ++i)
    {
      s << indent << "  red[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.red[i]);
    }
    s << indent << "yellow[]" << std::endl;
    for (size_t i = 0; i < v.yellow.size(); ++i)
    {
      s << indent << "  yellow[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.yellow[i]);
    }
    s << indent << "green[]" << std::endl;
    for (size_t i = 0; i < v.green.size(); ++i)
    {
      s << indent << "  green[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.green[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBOTINO_REFBOX_MESSAGE_EXPLORATION_INFO_H

