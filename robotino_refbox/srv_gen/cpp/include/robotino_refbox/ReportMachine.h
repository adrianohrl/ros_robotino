/* Auto-generated by genmsg_cpp for file /home/robotino/fuerte_workspace/sandbox/robotino/robotino_refbox/srv/ReportMachine.srv */
#ifndef ROBOTINO_REFBOX_SERVICE_REPORTMACHINE_H
#define ROBOTINO_REFBOX_SERVICE_REPORTMACHINE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace robotino_refbox
{
template <class ContainerAllocator>
struct ReportMachineRequest_ {
  typedef ReportMachineRequest_<ContainerAllocator> Type;

  ReportMachineRequest_()
  : machine()
  , type()
  {
  }

  ReportMachineRequest_(const ContainerAllocator& _alloc)
  : machine(_alloc)
  , type(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _machine_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  machine;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  type;


  typedef boost::shared_ptr< ::robotino_refbox::ReportMachineRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_refbox::ReportMachineRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ReportMachineRequest
typedef  ::robotino_refbox::ReportMachineRequest_<std::allocator<void> > ReportMachineRequest;

typedef boost::shared_ptr< ::robotino_refbox::ReportMachineRequest> ReportMachineRequestPtr;
typedef boost::shared_ptr< ::robotino_refbox::ReportMachineRequest const> ReportMachineRequestConstPtr;


template <class ContainerAllocator>
struct ReportMachineResponse_ {
  typedef ReportMachineResponse_<ContainerAllocator> Type;

  ReportMachineResponse_()
  : reported(false)
  {
  }

  ReportMachineResponse_(const ContainerAllocator& _alloc)
  : reported(false)
  {
  }

  typedef uint8_t _reported_type;
  uint8_t reported;


  typedef boost::shared_ptr< ::robotino_refbox::ReportMachineResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_refbox::ReportMachineResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ReportMachineResponse
typedef  ::robotino_refbox::ReportMachineResponse_<std::allocator<void> > ReportMachineResponse;

typedef boost::shared_ptr< ::robotino_refbox::ReportMachineResponse> ReportMachineResponsePtr;
typedef boost::shared_ptr< ::robotino_refbox::ReportMachineResponse const> ReportMachineResponseConstPtr;

struct ReportMachine
{

typedef ReportMachineRequest Request;
typedef ReportMachineResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ReportMachine
} // namespace robotino_refbox

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_refbox::ReportMachineRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_refbox::ReportMachineRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_refbox::ReportMachineRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1654392245846d8cdbf25dd88c6e1954";
  }

  static const char* value(const  ::robotino_refbox::ReportMachineRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1654392245846d8cULL;
  static const uint64_t static_value2 = 0xdbf25dd88c6e1954ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_refbox::ReportMachineRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_refbox/ReportMachineRequest";
  }

  static const char* value(const  ::robotino_refbox::ReportMachineRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_refbox::ReportMachineRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string machine\n\
string type\n\
\n\
";
  }

  static const char* value(const  ::robotino_refbox::ReportMachineRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_refbox::ReportMachineResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_refbox::ReportMachineResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_refbox::ReportMachineResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "92e923142b7d551b08a6325f706ad44b";
  }

  static const char* value(const  ::robotino_refbox::ReportMachineResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x92e923142b7d551bULL;
  static const uint64_t static_value2 = 0x08a6325f706ad44bULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_refbox::ReportMachineResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_refbox/ReportMachineResponse";
  }

  static const char* value(const  ::robotino_refbox::ReportMachineResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_refbox::ReportMachineResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool reported\n\
\n\
\n\
";
  }

  static const char* value(const  ::robotino_refbox::ReportMachineResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotino_refbox::ReportMachineResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_refbox::ReportMachineRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.machine);
    stream.next(m.type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ReportMachineRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_refbox::ReportMachineResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.reported);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ReportMachineResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robotino_refbox::ReportMachine> {
  static const char* value() 
  {
    return "2aeb18811cba5f13acca76facad92e85";
  }

  static const char* value(const robotino_refbox::ReportMachine&) { return value(); } 
};

template<>
struct DataType<robotino_refbox::ReportMachine> {
  static const char* value() 
  {
    return "robotino_refbox/ReportMachine";
  }

  static const char* value(const robotino_refbox::ReportMachine&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotino_refbox::ReportMachineRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2aeb18811cba5f13acca76facad92e85";
  }

  static const char* value(const robotino_refbox::ReportMachineRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotino_refbox::ReportMachineRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_refbox/ReportMachine";
  }

  static const char* value(const robotino_refbox::ReportMachineRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotino_refbox::ReportMachineResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2aeb18811cba5f13acca76facad92e85";
  }

  static const char* value(const robotino_refbox::ReportMachineResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotino_refbox::ReportMachineResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_refbox/ReportMachine";
  }

  static const char* value(const robotino_refbox::ReportMachineResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBOTINO_REFBOX_SERVICE_REPORTMACHINE_H

