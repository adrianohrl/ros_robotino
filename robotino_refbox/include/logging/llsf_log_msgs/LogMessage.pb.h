// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogMessage.proto

#ifndef PROTOBUF_LogMessage_2eproto__INCLUDED
#define PROTOBUF_LogMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace llsf_log_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LogMessage_2eproto();
void protobuf_AssignDesc_LogMessage_2eproto();
void protobuf_ShutdownFile_LogMessage_2eproto();

class LogMessage;

enum LogMessage_CompType {
  LogMessage_CompType_COMP_ID = 2003,
  LogMessage_CompType_MSG_TYPE = 1
};
bool LogMessage_CompType_IsValid(int value);
const LogMessage_CompType LogMessage_CompType_CompType_MIN = LogMessage_CompType_MSG_TYPE;
const LogMessage_CompType LogMessage_CompType_CompType_MAX = LogMessage_CompType_COMP_ID;
const int LogMessage_CompType_CompType_ARRAYSIZE = LogMessage_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogMessage_CompType_descriptor();
inline const ::std::string& LogMessage_CompType_Name(LogMessage_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogMessage_CompType_descriptor(), value);
}
inline bool LogMessage_CompType_Parse(
    const ::std::string& name, LogMessage_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogMessage_CompType>(
    LogMessage_CompType_descriptor(), name, value);
}
enum LogMessage_LogLevel {
  LogMessage_LogLevel_LL_DEBUG = 0,
  LogMessage_LogLevel_LL_INFO = 1,
  LogMessage_LogLevel_LL_WARN = 2,
  LogMessage_LogLevel_LL_ERROR = 4,
  LogMessage_LogLevel_LL_NONE = 8
};
bool LogMessage_LogLevel_IsValid(int value);
const LogMessage_LogLevel LogMessage_LogLevel_LogLevel_MIN = LogMessage_LogLevel_LL_DEBUG;
const LogMessage_LogLevel LogMessage_LogLevel_LogLevel_MAX = LogMessage_LogLevel_LL_NONE;
const int LogMessage_LogLevel_LogLevel_ARRAYSIZE = LogMessage_LogLevel_LogLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogMessage_LogLevel_descriptor();
inline const ::std::string& LogMessage_LogLevel_Name(LogMessage_LogLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogMessage_LogLevel_descriptor(), value);
}
inline bool LogMessage_LogLevel_Parse(
    const ::std::string& name, LogMessage_LogLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogMessage_LogLevel>(
    LogMessage_LogLevel_descriptor(), name, value);
}
// ===================================================================

class LogMessage : public ::google::protobuf::Message {
 public:
  LogMessage();
  virtual ~LogMessage();
  
  LogMessage(const LogMessage& from);
  
  inline LogMessage& operator=(const LogMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogMessage& default_instance();
  
  void Swap(LogMessage* other);
  
  // implements Message ----------------------------------------------
  
  LogMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogMessage& from);
  void MergeFrom(const LogMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LogMessage_CompType CompType;
  static const CompType COMP_ID = LogMessage_CompType_COMP_ID;
  static const CompType MSG_TYPE = LogMessage_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return LogMessage_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    LogMessage_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    LogMessage_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    LogMessage_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return LogMessage_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return LogMessage_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return LogMessage_CompType_Parse(name, value);
  }
  
  typedef LogMessage_LogLevel LogLevel;
  static const LogLevel LL_DEBUG = LogMessage_LogLevel_LL_DEBUG;
  static const LogLevel LL_INFO = LogMessage_LogLevel_LL_INFO;
  static const LogLevel LL_WARN = LogMessage_LogLevel_LL_WARN;
  static const LogLevel LL_ERROR = LogMessage_LogLevel_LL_ERROR;
  static const LogLevel LL_NONE = LogMessage_LogLevel_LL_NONE;
  static inline bool LogLevel_IsValid(int value) {
    return LogMessage_LogLevel_IsValid(value);
  }
  static const LogLevel LogLevel_MIN =
    LogMessage_LogLevel_LogLevel_MIN;
  static const LogLevel LogLevel_MAX =
    LogMessage_LogLevel_LogLevel_MAX;
  static const int LogLevel_ARRAYSIZE =
    LogMessage_LogLevel_LogLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LogLevel_descriptor() {
    return LogMessage_LogLevel_descriptor();
  }
  static inline const ::std::string& LogLevel_Name(LogLevel value) {
    return LogMessage_LogLevel_Name(value);
  }
  static inline bool LogLevel_Parse(const ::std::string& name,
      LogLevel* value) {
    return LogMessage_LogLevel_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int64 ts_sec = 1;
  inline bool has_ts_sec() const;
  inline void clear_ts_sec();
  static const int kTsSecFieldNumber = 1;
  inline ::google::protobuf::int64 ts_sec() const;
  inline void set_ts_sec(::google::protobuf::int64 value);
  
  // required int64 ts_nsec = 2;
  inline bool has_ts_nsec() const;
  inline void clear_ts_nsec();
  static const int kTsNsecFieldNumber = 2;
  inline ::google::protobuf::int64 ts_nsec() const;
  inline void set_ts_nsec(::google::protobuf::int64 value);
  
  // required .llsf_log_msgs.LogMessage.LogLevel log_level = 3;
  inline bool has_log_level() const;
  inline void clear_log_level();
  static const int kLogLevelFieldNumber = 3;
  inline ::llsf_log_msgs::LogMessage_LogLevel log_level() const;
  inline void set_log_level(::llsf_log_msgs::LogMessage_LogLevel value);
  
  // required string component = 4;
  inline bool has_component() const;
  inline void clear_component();
  static const int kComponentFieldNumber = 4;
  inline const ::std::string& component() const;
  inline void set_component(const ::std::string& value);
  inline void set_component(const char* value);
  inline void set_component(const char* value, size_t size);
  inline ::std::string* mutable_component();
  inline ::std::string* release_component();
  
  // required string message = 5;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 5;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // optional bool is_exception = 6 [default = false];
  inline bool has_is_exception() const;
  inline void clear_is_exception();
  static const int kIsExceptionFieldNumber = 6;
  inline bool is_exception() const;
  inline void set_is_exception(bool value);
  
  // @@protoc_insertion_point(class_scope:llsf_log_msgs.LogMessage)
 private:
  inline void set_has_ts_sec();
  inline void clear_has_ts_sec();
  inline void set_has_ts_nsec();
  inline void clear_has_ts_nsec();
  inline void set_has_log_level();
  inline void clear_has_log_level();
  inline void set_has_component();
  inline void clear_has_component();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_is_exception();
  inline void clear_has_is_exception();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 ts_sec_;
  ::google::protobuf::int64 ts_nsec_;
  ::std::string* component_;
  int log_level_;
  bool is_exception_;
  ::std::string* message_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_LogMessage_2eproto();
  friend void protobuf_AssignDesc_LogMessage_2eproto();
  friend void protobuf_ShutdownFile_LogMessage_2eproto();
  
  void InitAsDefaultInstance();
  static LogMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// LogMessage

// required int64 ts_sec = 1;
inline bool LogMessage::has_ts_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogMessage::set_has_ts_sec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogMessage::clear_has_ts_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogMessage::clear_ts_sec() {
  ts_sec_ = GOOGLE_LONGLONG(0);
  clear_has_ts_sec();
}
inline ::google::protobuf::int64 LogMessage::ts_sec() const {
  return ts_sec_;
}
inline void LogMessage::set_ts_sec(::google::protobuf::int64 value) {
  set_has_ts_sec();
  ts_sec_ = value;
}

// required int64 ts_nsec = 2;
inline bool LogMessage::has_ts_nsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogMessage::set_has_ts_nsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogMessage::clear_has_ts_nsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogMessage::clear_ts_nsec() {
  ts_nsec_ = GOOGLE_LONGLONG(0);
  clear_has_ts_nsec();
}
inline ::google::protobuf::int64 LogMessage::ts_nsec() const {
  return ts_nsec_;
}
inline void LogMessage::set_ts_nsec(::google::protobuf::int64 value) {
  set_has_ts_nsec();
  ts_nsec_ = value;
}

// required .llsf_log_msgs.LogMessage.LogLevel log_level = 3;
inline bool LogMessage::has_log_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogMessage::set_has_log_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogMessage::clear_has_log_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogMessage::clear_log_level() {
  log_level_ = 0;
  clear_has_log_level();
}
inline ::llsf_log_msgs::LogMessage_LogLevel LogMessage::log_level() const {
  return static_cast< ::llsf_log_msgs::LogMessage_LogLevel >(log_level_);
}
inline void LogMessage::set_log_level(::llsf_log_msgs::LogMessage_LogLevel value) {
  GOOGLE_DCHECK(::llsf_log_msgs::LogMessage_LogLevel_IsValid(value));
  set_has_log_level();
  log_level_ = value;
}

// required string component = 4;
inline bool LogMessage::has_component() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogMessage::set_has_component() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogMessage::clear_has_component() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogMessage::clear_component() {
  if (component_ != &::google::protobuf::internal::kEmptyString) {
    component_->clear();
  }
  clear_has_component();
}
inline const ::std::string& LogMessage::component() const {
  return *component_;
}
inline void LogMessage::set_component(const ::std::string& value) {
  set_has_component();
  if (component_ == &::google::protobuf::internal::kEmptyString) {
    component_ = new ::std::string;
  }
  component_->assign(value);
}
inline void LogMessage::set_component(const char* value) {
  set_has_component();
  if (component_ == &::google::protobuf::internal::kEmptyString) {
    component_ = new ::std::string;
  }
  component_->assign(value);
}
inline void LogMessage::set_component(const char* value, size_t size) {
  set_has_component();
  if (component_ == &::google::protobuf::internal::kEmptyString) {
    component_ = new ::std::string;
  }
  component_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMessage::mutable_component() {
  set_has_component();
  if (component_ == &::google::protobuf::internal::kEmptyString) {
    component_ = new ::std::string;
  }
  return component_;
}
inline ::std::string* LogMessage::release_component() {
  clear_has_component();
  if (component_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = component_;
    component_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string message = 5;
inline bool LogMessage::has_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogMessage::set_has_message() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& LogMessage::message() const {
  return *message_;
}
inline void LogMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void LogMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void LogMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* LogMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool is_exception = 6 [default = false];
inline bool LogMessage::has_is_exception() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogMessage::set_has_is_exception() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogMessage::clear_has_is_exception() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogMessage::clear_is_exception() {
  is_exception_ = false;
  clear_has_is_exception();
}
inline bool LogMessage::is_exception() const {
  return is_exception_;
}
inline void LogMessage::set_is_exception(bool value) {
  set_has_is_exception();
  is_exception_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_log_msgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_log_msgs::LogMessage_CompType>() {
  return ::llsf_log_msgs::LogMessage_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_log_msgs::LogMessage_LogLevel>() {
  return ::llsf_log_msgs::LogMessage_LogLevel_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LogMessage_2eproto__INCLUDED
