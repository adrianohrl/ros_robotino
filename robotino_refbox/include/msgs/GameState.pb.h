// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameState.proto

#ifndef PROTOBUF_GameState_2eproto__INCLUDED
#define PROTOBUF_GameState_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Time.pb.h"
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameState_2eproto();
void protobuf_AssignDesc_GameState_2eproto();
void protobuf_ShutdownFile_GameState_2eproto();

class GameState;
class SetGameState;
class SetGamePhase;

enum GameState_CompType {
  GameState_CompType_COMP_ID = 2000,
  GameState_CompType_MSG_TYPE = 20
};
bool GameState_CompType_IsValid(int value);
const GameState_CompType GameState_CompType_CompType_MIN = GameState_CompType_MSG_TYPE;
const GameState_CompType GameState_CompType_CompType_MAX = GameState_CompType_COMP_ID;
const int GameState_CompType_CompType_ARRAYSIZE = GameState_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameState_CompType_descriptor();
inline const ::std::string& GameState_CompType_Name(GameState_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameState_CompType_descriptor(), value);
}
inline bool GameState_CompType_Parse(
    const ::std::string& name, GameState_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState_CompType>(
    GameState_CompType_descriptor(), name, value);
}
enum GameState_State {
  GameState_State_INIT = 0,
  GameState_State_WAIT_START = 1,
  GameState_State_RUNNING = 2,
  GameState_State_PAUSED = 3
};
bool GameState_State_IsValid(int value);
const GameState_State GameState_State_State_MIN = GameState_State_INIT;
const GameState_State GameState_State_State_MAX = GameState_State_PAUSED;
const int GameState_State_State_ARRAYSIZE = GameState_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameState_State_descriptor();
inline const ::std::string& GameState_State_Name(GameState_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameState_State_descriptor(), value);
}
inline bool GameState_State_Parse(
    const ::std::string& name, GameState_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState_State>(
    GameState_State_descriptor(), name, value);
}
enum GameState_Phase {
  GameState_Phase_PRE_GAME = 0,
  GameState_Phase_SETUP = 10,
  GameState_Phase_EXPLORATION = 20,
  GameState_Phase_PRODUCTION = 30,
  GameState_Phase_POST_GAME = 40,
  GameState_Phase_OPEN_CHALLENGE = 1000,
  GameState_Phase_NAVIGATION_CHALLENGE = 1001,
  GameState_Phase_WHACK_A_MOLE_CHALLENGE = 1002
};
bool GameState_Phase_IsValid(int value);
const GameState_Phase GameState_Phase_Phase_MIN = GameState_Phase_PRE_GAME;
const GameState_Phase GameState_Phase_Phase_MAX = GameState_Phase_WHACK_A_MOLE_CHALLENGE;
const int GameState_Phase_Phase_ARRAYSIZE = GameState_Phase_Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameState_Phase_descriptor();
inline const ::std::string& GameState_Phase_Name(GameState_Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameState_Phase_descriptor(), value);
}
inline bool GameState_Phase_Parse(
    const ::std::string& name, GameState_Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState_Phase>(
    GameState_Phase_descriptor(), name, value);
}
enum GameState_RefBoxMode {
  GameState_RefBoxMode_STANDALONE = 0,
  GameState_RefBoxMode_MASTER = 1,
  GameState_RefBoxMode_SLAVE = 2
};
bool GameState_RefBoxMode_IsValid(int value);
const GameState_RefBoxMode GameState_RefBoxMode_RefBoxMode_MIN = GameState_RefBoxMode_STANDALONE;
const GameState_RefBoxMode GameState_RefBoxMode_RefBoxMode_MAX = GameState_RefBoxMode_SLAVE;
const int GameState_RefBoxMode_RefBoxMode_ARRAYSIZE = GameState_RefBoxMode_RefBoxMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameState_RefBoxMode_descriptor();
inline const ::std::string& GameState_RefBoxMode_Name(GameState_RefBoxMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameState_RefBoxMode_descriptor(), value);
}
inline bool GameState_RefBoxMode_Parse(
    const ::std::string& name, GameState_RefBoxMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState_RefBoxMode>(
    GameState_RefBoxMode_descriptor(), name, value);
}
enum SetGameState_CompType {
  SetGameState_CompType_COMP_ID = 2000,
  SetGameState_CompType_MSG_TYPE = 21
};
bool SetGameState_CompType_IsValid(int value);
const SetGameState_CompType SetGameState_CompType_CompType_MIN = SetGameState_CompType_MSG_TYPE;
const SetGameState_CompType SetGameState_CompType_CompType_MAX = SetGameState_CompType_COMP_ID;
const int SetGameState_CompType_CompType_ARRAYSIZE = SetGameState_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SetGameState_CompType_descriptor();
inline const ::std::string& SetGameState_CompType_Name(SetGameState_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SetGameState_CompType_descriptor(), value);
}
inline bool SetGameState_CompType_Parse(
    const ::std::string& name, SetGameState_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SetGameState_CompType>(
    SetGameState_CompType_descriptor(), name, value);
}
enum SetGamePhase_CompType {
  SetGamePhase_CompType_COMP_ID = 2000,
  SetGamePhase_CompType_MSG_TYPE = 22
};
bool SetGamePhase_CompType_IsValid(int value);
const SetGamePhase_CompType SetGamePhase_CompType_CompType_MIN = SetGamePhase_CompType_MSG_TYPE;
const SetGamePhase_CompType SetGamePhase_CompType_CompType_MAX = SetGamePhase_CompType_COMP_ID;
const int SetGamePhase_CompType_CompType_ARRAYSIZE = SetGamePhase_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SetGamePhase_CompType_descriptor();
inline const ::std::string& SetGamePhase_CompType_Name(SetGamePhase_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SetGamePhase_CompType_descriptor(), value);
}
inline bool SetGamePhase_CompType_Parse(
    const ::std::string& name, SetGamePhase_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SetGamePhase_CompType>(
    SetGamePhase_CompType_descriptor(), name, value);
}
// ===================================================================

class GameState : public ::google::protobuf::Message {
 public:
  GameState();
  virtual ~GameState();
  
  GameState(const GameState& from);
  
  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameState& default_instance();
  
  void Swap(GameState* other);
  
  // implements Message ----------------------------------------------
  
  GameState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef GameState_CompType CompType;
  static const CompType COMP_ID = GameState_CompType_COMP_ID;
  static const CompType MSG_TYPE = GameState_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return GameState_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    GameState_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    GameState_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    GameState_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return GameState_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return GameState_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return GameState_CompType_Parse(name, value);
  }
  
  typedef GameState_State State;
  static const State INIT = GameState_State_INIT;
  static const State WAIT_START = GameState_State_WAIT_START;
  static const State RUNNING = GameState_State_RUNNING;
  static const State PAUSED = GameState_State_PAUSED;
  static inline bool State_IsValid(int value) {
    return GameState_State_IsValid(value);
  }
  static const State State_MIN =
    GameState_State_State_MIN;
  static const State State_MAX =
    GameState_State_State_MAX;
  static const int State_ARRAYSIZE =
    GameState_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return GameState_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return GameState_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return GameState_State_Parse(name, value);
  }
  
  typedef GameState_Phase Phase;
  static const Phase PRE_GAME = GameState_Phase_PRE_GAME;
  static const Phase SETUP = GameState_Phase_SETUP;
  static const Phase EXPLORATION = GameState_Phase_EXPLORATION;
  static const Phase PRODUCTION = GameState_Phase_PRODUCTION;
  static const Phase POST_GAME = GameState_Phase_POST_GAME;
  static const Phase OPEN_CHALLENGE = GameState_Phase_OPEN_CHALLENGE;
  static const Phase NAVIGATION_CHALLENGE = GameState_Phase_NAVIGATION_CHALLENGE;
  static const Phase WHACK_A_MOLE_CHALLENGE = GameState_Phase_WHACK_A_MOLE_CHALLENGE;
  static inline bool Phase_IsValid(int value) {
    return GameState_Phase_IsValid(value);
  }
  static const Phase Phase_MIN =
    GameState_Phase_Phase_MIN;
  static const Phase Phase_MAX =
    GameState_Phase_Phase_MAX;
  static const int Phase_ARRAYSIZE =
    GameState_Phase_Phase_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Phase_descriptor() {
    return GameState_Phase_descriptor();
  }
  static inline const ::std::string& Phase_Name(Phase value) {
    return GameState_Phase_Name(value);
  }
  static inline bool Phase_Parse(const ::std::string& name,
      Phase* value) {
    return GameState_Phase_Parse(name, value);
  }
  
  typedef GameState_RefBoxMode RefBoxMode;
  static const RefBoxMode STANDALONE = GameState_RefBoxMode_STANDALONE;
  static const RefBoxMode MASTER = GameState_RefBoxMode_MASTER;
  static const RefBoxMode SLAVE = GameState_RefBoxMode_SLAVE;
  static inline bool RefBoxMode_IsValid(int value) {
    return GameState_RefBoxMode_IsValid(value);
  }
  static const RefBoxMode RefBoxMode_MIN =
    GameState_RefBoxMode_RefBoxMode_MIN;
  static const RefBoxMode RefBoxMode_MAX =
    GameState_RefBoxMode_RefBoxMode_MAX;
  static const int RefBoxMode_ARRAYSIZE =
    GameState_RefBoxMode_RefBoxMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RefBoxMode_descriptor() {
    return GameState_RefBoxMode_descriptor();
  }
  static inline const ::std::string& RefBoxMode_Name(RefBoxMode value) {
    return GameState_RefBoxMode_Name(value);
  }
  static inline bool RefBoxMode_Parse(const ::std::string& name,
      RefBoxMode* value) {
    return GameState_RefBoxMode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .llsf_msgs.Time game_time = 1;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 1;
  inline const ::llsf_msgs::Time& game_time() const;
  inline ::llsf_msgs::Time* mutable_game_time();
  inline ::llsf_msgs::Time* release_game_time();
  
  // required .llsf_msgs.GameState.State state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::llsf_msgs::GameState_State state() const;
  inline void set_state(::llsf_msgs::GameState_State value);
  
  // required .llsf_msgs.GameState.Phase phase = 4;
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 4;
  inline ::llsf_msgs::GameState_Phase phase() const;
  inline void set_phase(::llsf_msgs::GameState_Phase value);
  
  // optional uint32 points_cyan = 5;
  inline bool has_points_cyan() const;
  inline void clear_points_cyan();
  static const int kPointsCyanFieldNumber = 5;
  inline ::google::protobuf::uint32 points_cyan() const;
  inline void set_points_cyan(::google::protobuf::uint32 value);
  
  // optional string team_cyan = 6;
  inline bool has_team_cyan() const;
  inline void clear_team_cyan();
  static const int kTeamCyanFieldNumber = 6;
  inline const ::std::string& team_cyan() const;
  inline void set_team_cyan(const ::std::string& value);
  inline void set_team_cyan(const char* value);
  inline void set_team_cyan(const char* value, size_t size);
  inline ::std::string* mutable_team_cyan();
  inline ::std::string* release_team_cyan();
  
  // optional uint32 points_magenta = 8;
  inline bool has_points_magenta() const;
  inline void clear_points_magenta();
  static const int kPointsMagentaFieldNumber = 8;
  inline ::google::protobuf::uint32 points_magenta() const;
  inline void set_points_magenta(::google::protobuf::uint32 value);
  
  // optional string team_magenta = 9;
  inline bool has_team_magenta() const;
  inline void clear_team_magenta();
  static const int kTeamMagentaFieldNumber = 9;
  inline const ::std::string& team_magenta() const;
  inline void set_team_magenta(const ::std::string& value);
  inline void set_team_magenta(const char* value);
  inline void set_team_magenta(const char* value, size_t size);
  inline ::std::string* mutable_team_magenta();
  inline ::std::string* release_team_magenta();
  
  // optional .llsf_msgs.GameState.RefBoxMode refbox_mode = 7 [default = STANDALONE];
  inline bool has_refbox_mode() const;
  inline void clear_refbox_mode();
  static const int kRefboxModeFieldNumber = 7;
  inline ::llsf_msgs::GameState_RefBoxMode refbox_mode() const;
  inline void set_refbox_mode(::llsf_msgs::GameState_RefBoxMode value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.GameState)
 private:
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_points_cyan();
  inline void clear_has_points_cyan();
  inline void set_has_team_cyan();
  inline void clear_has_team_cyan();
  inline void set_has_points_magenta();
  inline void clear_has_points_magenta();
  inline void set_has_team_magenta();
  inline void clear_has_team_magenta();
  inline void set_has_refbox_mode();
  inline void clear_has_refbox_mode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::llsf_msgs::Time* game_time_;
  int state_;
  int phase_;
  ::std::string* team_cyan_;
  ::google::protobuf::uint32 points_cyan_;
  ::google::protobuf::uint32 points_magenta_;
  ::std::string* team_magenta_;
  int refbox_mode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameState_2eproto();
  friend void protobuf_AssignDesc_GameState_2eproto();
  friend void protobuf_ShutdownFile_GameState_2eproto();
  
  void InitAsDefaultInstance();
  static GameState* default_instance_;
};
// -------------------------------------------------------------------

class SetGameState : public ::google::protobuf::Message {
 public:
  SetGameState();
  virtual ~SetGameState();
  
  SetGameState(const SetGameState& from);
  
  inline SetGameState& operator=(const SetGameState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetGameState& default_instance();
  
  void Swap(SetGameState* other);
  
  // implements Message ----------------------------------------------
  
  SetGameState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetGameState& from);
  void MergeFrom(const SetGameState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SetGameState_CompType CompType;
  static const CompType COMP_ID = SetGameState_CompType_COMP_ID;
  static const CompType MSG_TYPE = SetGameState_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return SetGameState_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    SetGameState_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    SetGameState_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    SetGameState_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return SetGameState_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return SetGameState_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return SetGameState_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .llsf_msgs.GameState.State state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::llsf_msgs::GameState_State state() const;
  inline void set_state(::llsf_msgs::GameState_State value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.SetGameState)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameState_2eproto();
  friend void protobuf_AssignDesc_GameState_2eproto();
  friend void protobuf_ShutdownFile_GameState_2eproto();
  
  void InitAsDefaultInstance();
  static SetGameState* default_instance_;
};
// -------------------------------------------------------------------

class SetGamePhase : public ::google::protobuf::Message {
 public:
  SetGamePhase();
  virtual ~SetGamePhase();
  
  SetGamePhase(const SetGamePhase& from);
  
  inline SetGamePhase& operator=(const SetGamePhase& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetGamePhase& default_instance();
  
  void Swap(SetGamePhase* other);
  
  // implements Message ----------------------------------------------
  
  SetGamePhase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetGamePhase& from);
  void MergeFrom(const SetGamePhase& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SetGamePhase_CompType CompType;
  static const CompType COMP_ID = SetGamePhase_CompType_COMP_ID;
  static const CompType MSG_TYPE = SetGamePhase_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return SetGamePhase_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    SetGamePhase_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    SetGamePhase_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    SetGamePhase_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return SetGamePhase_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return SetGamePhase_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return SetGamePhase_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .llsf_msgs.GameState.Phase phase = 1;
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 1;
  inline ::llsf_msgs::GameState_Phase phase() const;
  inline void set_phase(::llsf_msgs::GameState_Phase value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.SetGamePhase)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int phase_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameState_2eproto();
  friend void protobuf_AssignDesc_GameState_2eproto();
  friend void protobuf_ShutdownFile_GameState_2eproto();
  
  void InitAsDefaultInstance();
  static SetGamePhase* default_instance_;
};
// ===================================================================


// ===================================================================

// GameState

// required .llsf_msgs.Time game_time = 1;
inline bool GameState::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameState::set_has_game_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameState::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameState::clear_game_time() {
  if (game_time_ != NULL) game_time_->::llsf_msgs::Time::Clear();
  clear_has_game_time();
}
inline const ::llsf_msgs::Time& GameState::game_time() const {
  return game_time_ != NULL ? *game_time_ : *default_instance_->game_time_;
}
inline ::llsf_msgs::Time* GameState::mutable_game_time() {
  set_has_game_time();
  if (game_time_ == NULL) game_time_ = new ::llsf_msgs::Time;
  return game_time_;
}
inline ::llsf_msgs::Time* GameState::release_game_time() {
  clear_has_game_time();
  ::llsf_msgs::Time* temp = game_time_;
  game_time_ = NULL;
  return temp;
}

// required .llsf_msgs.GameState.State state = 3;
inline bool GameState::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameState::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameState::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::llsf_msgs::GameState_State GameState::state() const {
  return static_cast< ::llsf_msgs::GameState_State >(state_);
}
inline void GameState::set_state(::llsf_msgs::GameState_State value) {
  GOOGLE_DCHECK(::llsf_msgs::GameState_State_IsValid(value));
  set_has_state();
  state_ = value;
}

// required .llsf_msgs.GameState.Phase phase = 4;
inline bool GameState::has_phase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameState::set_has_phase() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameState::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::llsf_msgs::GameState_Phase GameState::phase() const {
  return static_cast< ::llsf_msgs::GameState_Phase >(phase_);
}
inline void GameState::set_phase(::llsf_msgs::GameState_Phase value) {
  GOOGLE_DCHECK(::llsf_msgs::GameState_Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
}

// optional uint32 points_cyan = 5;
inline bool GameState::has_points_cyan() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameState::set_has_points_cyan() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameState::clear_has_points_cyan() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameState::clear_points_cyan() {
  points_cyan_ = 0u;
  clear_has_points_cyan();
}
inline ::google::protobuf::uint32 GameState::points_cyan() const {
  return points_cyan_;
}
inline void GameState::set_points_cyan(::google::protobuf::uint32 value) {
  set_has_points_cyan();
  points_cyan_ = value;
}

// optional string team_cyan = 6;
inline bool GameState::has_team_cyan() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameState::set_has_team_cyan() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameState::clear_has_team_cyan() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameState::clear_team_cyan() {
  if (team_cyan_ != &::google::protobuf::internal::kEmptyString) {
    team_cyan_->clear();
  }
  clear_has_team_cyan();
}
inline const ::std::string& GameState::team_cyan() const {
  return *team_cyan_;
}
inline void GameState::set_team_cyan(const ::std::string& value) {
  set_has_team_cyan();
  if (team_cyan_ == &::google::protobuf::internal::kEmptyString) {
    team_cyan_ = new ::std::string;
  }
  team_cyan_->assign(value);
}
inline void GameState::set_team_cyan(const char* value) {
  set_has_team_cyan();
  if (team_cyan_ == &::google::protobuf::internal::kEmptyString) {
    team_cyan_ = new ::std::string;
  }
  team_cyan_->assign(value);
}
inline void GameState::set_team_cyan(const char* value, size_t size) {
  set_has_team_cyan();
  if (team_cyan_ == &::google::protobuf::internal::kEmptyString) {
    team_cyan_ = new ::std::string;
  }
  team_cyan_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameState::mutable_team_cyan() {
  set_has_team_cyan();
  if (team_cyan_ == &::google::protobuf::internal::kEmptyString) {
    team_cyan_ = new ::std::string;
  }
  return team_cyan_;
}
inline ::std::string* GameState::release_team_cyan() {
  clear_has_team_cyan();
  if (team_cyan_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_cyan_;
    team_cyan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 points_magenta = 8;
inline bool GameState::has_points_magenta() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameState::set_has_points_magenta() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameState::clear_has_points_magenta() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameState::clear_points_magenta() {
  points_magenta_ = 0u;
  clear_has_points_magenta();
}
inline ::google::protobuf::uint32 GameState::points_magenta() const {
  return points_magenta_;
}
inline void GameState::set_points_magenta(::google::protobuf::uint32 value) {
  set_has_points_magenta();
  points_magenta_ = value;
}

// optional string team_magenta = 9;
inline bool GameState::has_team_magenta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameState::set_has_team_magenta() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameState::clear_has_team_magenta() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameState::clear_team_magenta() {
  if (team_magenta_ != &::google::protobuf::internal::kEmptyString) {
    team_magenta_->clear();
  }
  clear_has_team_magenta();
}
inline const ::std::string& GameState::team_magenta() const {
  return *team_magenta_;
}
inline void GameState::set_team_magenta(const ::std::string& value) {
  set_has_team_magenta();
  if (team_magenta_ == &::google::protobuf::internal::kEmptyString) {
    team_magenta_ = new ::std::string;
  }
  team_magenta_->assign(value);
}
inline void GameState::set_team_magenta(const char* value) {
  set_has_team_magenta();
  if (team_magenta_ == &::google::protobuf::internal::kEmptyString) {
    team_magenta_ = new ::std::string;
  }
  team_magenta_->assign(value);
}
inline void GameState::set_team_magenta(const char* value, size_t size) {
  set_has_team_magenta();
  if (team_magenta_ == &::google::protobuf::internal::kEmptyString) {
    team_magenta_ = new ::std::string;
  }
  team_magenta_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameState::mutable_team_magenta() {
  set_has_team_magenta();
  if (team_magenta_ == &::google::protobuf::internal::kEmptyString) {
    team_magenta_ = new ::std::string;
  }
  return team_magenta_;
}
inline ::std::string* GameState::release_team_magenta() {
  clear_has_team_magenta();
  if (team_magenta_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_magenta_;
    team_magenta_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .llsf_msgs.GameState.RefBoxMode refbox_mode = 7 [default = STANDALONE];
inline bool GameState::has_refbox_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameState::set_has_refbox_mode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameState::clear_has_refbox_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameState::clear_refbox_mode() {
  refbox_mode_ = 0;
  clear_has_refbox_mode();
}
inline ::llsf_msgs::GameState_RefBoxMode GameState::refbox_mode() const {
  return static_cast< ::llsf_msgs::GameState_RefBoxMode >(refbox_mode_);
}
inline void GameState::set_refbox_mode(::llsf_msgs::GameState_RefBoxMode value) {
  GOOGLE_DCHECK(::llsf_msgs::GameState_RefBoxMode_IsValid(value));
  set_has_refbox_mode();
  refbox_mode_ = value;
}

// -------------------------------------------------------------------

// SetGameState

// required .llsf_msgs.GameState.State state = 1;
inline bool SetGameState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetGameState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetGameState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetGameState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::llsf_msgs::GameState_State SetGameState::state() const {
  return static_cast< ::llsf_msgs::GameState_State >(state_);
}
inline void SetGameState::set_state(::llsf_msgs::GameState_State value) {
  GOOGLE_DCHECK(::llsf_msgs::GameState_State_IsValid(value));
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// SetGamePhase

// required .llsf_msgs.GameState.Phase phase = 1;
inline bool SetGamePhase::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetGamePhase::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetGamePhase::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetGamePhase::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::llsf_msgs::GameState_Phase SetGamePhase::phase() const {
  return static_cast< ::llsf_msgs::GameState_Phase >(phase_);
}
inline void SetGamePhase::set_phase(::llsf_msgs::GameState_Phase value) {
  GOOGLE_DCHECK(::llsf_msgs::GameState_Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::GameState_CompType>() {
  return ::llsf_msgs::GameState_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::GameState_State>() {
  return ::llsf_msgs::GameState_State_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::GameState_Phase>() {
  return ::llsf_msgs::GameState_Phase_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::GameState_RefBoxMode>() {
  return ::llsf_msgs::GameState_RefBoxMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::SetGameState_CompType>() {
  return ::llsf_msgs::SetGameState_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::SetGamePhase_CompType>() {
  return ::llsf_msgs::SetGamePhase_CompType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameState_2eproto__INCLUDED
