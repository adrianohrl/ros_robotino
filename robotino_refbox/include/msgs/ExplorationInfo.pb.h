// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExplorationInfo.proto

#ifndef PROTOBUF_ExplorationInfo_2eproto__INCLUDED
#define PROTOBUF_ExplorationInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "MachineInfo.pb.h"
#include "Pose2D.pb.h"
#include "Team.pb.h"
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ExplorationInfo_2eproto();
void protobuf_AssignDesc_ExplorationInfo_2eproto();
void protobuf_ShutdownFile_ExplorationInfo_2eproto();

class ExplorationSignal;
class ExplorationMachine;
class ExplorationInfo;

enum ExplorationSignal_CompType {
  ExplorationSignal_CompType_COMP_ID = 2000,
  ExplorationSignal_CompType_MSG_TYPE = 70
};
bool ExplorationSignal_CompType_IsValid(int value);
const ExplorationSignal_CompType ExplorationSignal_CompType_CompType_MIN = ExplorationSignal_CompType_MSG_TYPE;
const ExplorationSignal_CompType ExplorationSignal_CompType_CompType_MAX = ExplorationSignal_CompType_COMP_ID;
const int ExplorationSignal_CompType_CompType_ARRAYSIZE = ExplorationSignal_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExplorationSignal_CompType_descriptor();
inline const ::std::string& ExplorationSignal_CompType_Name(ExplorationSignal_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExplorationSignal_CompType_descriptor(), value);
}
inline bool ExplorationSignal_CompType_Parse(
    const ::std::string& name, ExplorationSignal_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExplorationSignal_CompType>(
    ExplorationSignal_CompType_descriptor(), name, value);
}
enum ExplorationMachine_CompType {
  ExplorationMachine_CompType_COMP_ID = 2000,
  ExplorationMachine_CompType_MSG_TYPE = 71
};
bool ExplorationMachine_CompType_IsValid(int value);
const ExplorationMachine_CompType ExplorationMachine_CompType_CompType_MIN = ExplorationMachine_CompType_MSG_TYPE;
const ExplorationMachine_CompType ExplorationMachine_CompType_CompType_MAX = ExplorationMachine_CompType_COMP_ID;
const int ExplorationMachine_CompType_CompType_ARRAYSIZE = ExplorationMachine_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExplorationMachine_CompType_descriptor();
inline const ::std::string& ExplorationMachine_CompType_Name(ExplorationMachine_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExplorationMachine_CompType_descriptor(), value);
}
inline bool ExplorationMachine_CompType_Parse(
    const ::std::string& name, ExplorationMachine_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExplorationMachine_CompType>(
    ExplorationMachine_CompType_descriptor(), name, value);
}
enum ExplorationInfo_CompType {
  ExplorationInfo_CompType_COMP_ID = 2000,
  ExplorationInfo_CompType_MSG_TYPE = 72
};
bool ExplorationInfo_CompType_IsValid(int value);
const ExplorationInfo_CompType ExplorationInfo_CompType_CompType_MIN = ExplorationInfo_CompType_MSG_TYPE;
const ExplorationInfo_CompType ExplorationInfo_CompType_CompType_MAX = ExplorationInfo_CompType_COMP_ID;
const int ExplorationInfo_CompType_CompType_ARRAYSIZE = ExplorationInfo_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExplorationInfo_CompType_descriptor();
inline const ::std::string& ExplorationInfo_CompType_Name(ExplorationInfo_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExplorationInfo_CompType_descriptor(), value);
}
inline bool ExplorationInfo_CompType_Parse(
    const ::std::string& name, ExplorationInfo_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExplorationInfo_CompType>(
    ExplorationInfo_CompType_descriptor(), name, value);
}
// ===================================================================

class ExplorationSignal : public ::google::protobuf::Message {
 public:
  ExplorationSignal();
  virtual ~ExplorationSignal();
  
  ExplorationSignal(const ExplorationSignal& from);
  
  inline ExplorationSignal& operator=(const ExplorationSignal& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExplorationSignal& default_instance();
  
  void Swap(ExplorationSignal* other);
  
  // implements Message ----------------------------------------------
  
  ExplorationSignal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExplorationSignal& from);
  void MergeFrom(const ExplorationSignal& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ExplorationSignal_CompType CompType;
  static const CompType COMP_ID = ExplorationSignal_CompType_COMP_ID;
  static const CompType MSG_TYPE = ExplorationSignal_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return ExplorationSignal_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    ExplorationSignal_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    ExplorationSignal_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    ExplorationSignal_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return ExplorationSignal_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return ExplorationSignal_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return ExplorationSignal_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // repeated .llsf_msgs.LightSpec lights = 2;
  inline int lights_size() const;
  inline void clear_lights();
  static const int kLightsFieldNumber = 2;
  inline const ::llsf_msgs::LightSpec& lights(int index) const;
  inline ::llsf_msgs::LightSpec* mutable_lights(int index);
  inline ::llsf_msgs::LightSpec* add_lights();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >&
      lights() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >*
      mutable_lights();
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.ExplorationSignal)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec > lights_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ExplorationInfo_2eproto();
  friend void protobuf_AssignDesc_ExplorationInfo_2eproto();
  friend void protobuf_ShutdownFile_ExplorationInfo_2eproto();
  
  void InitAsDefaultInstance();
  static ExplorationSignal* default_instance_;
};
// -------------------------------------------------------------------

class ExplorationMachine : public ::google::protobuf::Message {
 public:
  ExplorationMachine();
  virtual ~ExplorationMachine();
  
  ExplorationMachine(const ExplorationMachine& from);
  
  inline ExplorationMachine& operator=(const ExplorationMachine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExplorationMachine& default_instance();
  
  void Swap(ExplorationMachine* other);
  
  // implements Message ----------------------------------------------
  
  ExplorationMachine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExplorationMachine& from);
  void MergeFrom(const ExplorationMachine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ExplorationMachine_CompType CompType;
  static const CompType COMP_ID = ExplorationMachine_CompType_COMP_ID;
  static const CompType MSG_TYPE = ExplorationMachine_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return ExplorationMachine_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    ExplorationMachine_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    ExplorationMachine_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    ExplorationMachine_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return ExplorationMachine_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return ExplorationMachine_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return ExplorationMachine_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required .llsf_msgs.Pose2D pose = 2;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 2;
  inline const ::llsf_msgs::Pose2D& pose() const;
  inline ::llsf_msgs::Pose2D* mutable_pose();
  inline ::llsf_msgs::Pose2D* release_pose();
  
  // required .llsf_msgs.Team team_color = 3;
  inline bool has_team_color() const;
  inline void clear_team_color();
  static const int kTeamColorFieldNumber = 3;
  inline llsf_msgs::Team team_color() const;
  inline void set_team_color(llsf_msgs::Team value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.ExplorationMachine)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_team_color();
  inline void clear_has_team_color();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::llsf_msgs::Pose2D* pose_;
  int team_color_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ExplorationInfo_2eproto();
  friend void protobuf_AssignDesc_ExplorationInfo_2eproto();
  friend void protobuf_ShutdownFile_ExplorationInfo_2eproto();
  
  void InitAsDefaultInstance();
  static ExplorationMachine* default_instance_;
};
// -------------------------------------------------------------------

class ExplorationInfo : public ::google::protobuf::Message {
 public:
  ExplorationInfo();
  virtual ~ExplorationInfo();
  
  ExplorationInfo(const ExplorationInfo& from);
  
  inline ExplorationInfo& operator=(const ExplorationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExplorationInfo& default_instance();
  
  void Swap(ExplorationInfo* other);
  
  // implements Message ----------------------------------------------
  
  ExplorationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExplorationInfo& from);
  void MergeFrom(const ExplorationInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ExplorationInfo_CompType CompType;
  static const CompType COMP_ID = ExplorationInfo_CompType_COMP_ID;
  static const CompType MSG_TYPE = ExplorationInfo_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return ExplorationInfo_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    ExplorationInfo_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    ExplorationInfo_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    ExplorationInfo_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return ExplorationInfo_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return ExplorationInfo_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return ExplorationInfo_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .llsf_msgs.ExplorationSignal signals = 1;
  inline int signals_size() const;
  inline void clear_signals();
  static const int kSignalsFieldNumber = 1;
  inline const ::llsf_msgs::ExplorationSignal& signals(int index) const;
  inline ::llsf_msgs::ExplorationSignal* mutable_signals(int index);
  inline ::llsf_msgs::ExplorationSignal* add_signals();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::ExplorationSignal >&
      signals() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::ExplorationSignal >*
      mutable_signals();
  
  // repeated .llsf_msgs.ExplorationMachine machines = 2;
  inline int machines_size() const;
  inline void clear_machines();
  static const int kMachinesFieldNumber = 2;
  inline const ::llsf_msgs::ExplorationMachine& machines(int index) const;
  inline ::llsf_msgs::ExplorationMachine* mutable_machines(int index);
  inline ::llsf_msgs::ExplorationMachine* add_machines();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::ExplorationMachine >&
      machines() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::ExplorationMachine >*
      mutable_machines();
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.ExplorationInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::ExplorationSignal > signals_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::ExplorationMachine > machines_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ExplorationInfo_2eproto();
  friend void protobuf_AssignDesc_ExplorationInfo_2eproto();
  friend void protobuf_ShutdownFile_ExplorationInfo_2eproto();
  
  void InitAsDefaultInstance();
  static ExplorationInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ExplorationSignal

// required string type = 1;
inline bool ExplorationSignal::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExplorationSignal::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExplorationSignal::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExplorationSignal::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& ExplorationSignal::type() const {
  return *type_;
}
inline void ExplorationSignal::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void ExplorationSignal::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void ExplorationSignal::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExplorationSignal::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* ExplorationSignal::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .llsf_msgs.LightSpec lights = 2;
inline int ExplorationSignal::lights_size() const {
  return lights_.size();
}
inline void ExplorationSignal::clear_lights() {
  lights_.Clear();
}
inline const ::llsf_msgs::LightSpec& ExplorationSignal::lights(int index) const {
  return lights_.Get(index);
}
inline ::llsf_msgs::LightSpec* ExplorationSignal::mutable_lights(int index) {
  return lights_.Mutable(index);
}
inline ::llsf_msgs::LightSpec* ExplorationSignal::add_lights() {
  return lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >&
ExplorationSignal::lights() const {
  return lights_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >*
ExplorationSignal::mutable_lights() {
  return &lights_;
}

// -------------------------------------------------------------------

// ExplorationMachine

// required string name = 1;
inline bool ExplorationMachine::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExplorationMachine::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExplorationMachine::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExplorationMachine::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ExplorationMachine::name() const {
  return *name_;
}
inline void ExplorationMachine::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ExplorationMachine::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ExplorationMachine::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExplorationMachine::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ExplorationMachine::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .llsf_msgs.Pose2D pose = 2;
inline bool ExplorationMachine::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExplorationMachine::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExplorationMachine::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExplorationMachine::clear_pose() {
  if (pose_ != NULL) pose_->::llsf_msgs::Pose2D::Clear();
  clear_has_pose();
}
inline const ::llsf_msgs::Pose2D& ExplorationMachine::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::llsf_msgs::Pose2D* ExplorationMachine::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::llsf_msgs::Pose2D;
  return pose_;
}
inline ::llsf_msgs::Pose2D* ExplorationMachine::release_pose() {
  clear_has_pose();
  ::llsf_msgs::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}

// required .llsf_msgs.Team team_color = 3;
inline bool ExplorationMachine::has_team_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExplorationMachine::set_has_team_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExplorationMachine::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExplorationMachine::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline llsf_msgs::Team ExplorationMachine::team_color() const {
  return static_cast< llsf_msgs::Team >(team_color_);
}
inline void ExplorationMachine::set_team_color(llsf_msgs::Team value) {
  GOOGLE_DCHECK(llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
}

// -------------------------------------------------------------------

// ExplorationInfo

// repeated .llsf_msgs.ExplorationSignal signals = 1;
inline int ExplorationInfo::signals_size() const {
  return signals_.size();
}
inline void ExplorationInfo::clear_signals() {
  signals_.Clear();
}
inline const ::llsf_msgs::ExplorationSignal& ExplorationInfo::signals(int index) const {
  return signals_.Get(index);
}
inline ::llsf_msgs::ExplorationSignal* ExplorationInfo::mutable_signals(int index) {
  return signals_.Mutable(index);
}
inline ::llsf_msgs::ExplorationSignal* ExplorationInfo::add_signals() {
  return signals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::ExplorationSignal >&
ExplorationInfo::signals() const {
  return signals_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::ExplorationSignal >*
ExplorationInfo::mutable_signals() {
  return &signals_;
}

// repeated .llsf_msgs.ExplorationMachine machines = 2;
inline int ExplorationInfo::machines_size() const {
  return machines_.size();
}
inline void ExplorationInfo::clear_machines() {
  machines_.Clear();
}
inline const ::llsf_msgs::ExplorationMachine& ExplorationInfo::machines(int index) const {
  return machines_.Get(index);
}
inline ::llsf_msgs::ExplorationMachine* ExplorationInfo::mutable_machines(int index) {
  return machines_.Mutable(index);
}
inline ::llsf_msgs::ExplorationMachine* ExplorationInfo::add_machines() {
  return machines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::ExplorationMachine >&
ExplorationInfo::machines() const {
  return machines_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::ExplorationMachine >*
ExplorationInfo::mutable_machines() {
  return &machines_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::ExplorationSignal_CompType>() {
  return ::llsf_msgs::ExplorationSignal_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::ExplorationMachine_CompType>() {
  return ::llsf_msgs::ExplorationMachine_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::ExplorationInfo_CompType>() {
  return ::llsf_msgs::ExplorationInfo_CompType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ExplorationInfo_2eproto__INCLUDED
