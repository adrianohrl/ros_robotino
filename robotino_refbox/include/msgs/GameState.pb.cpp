// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameState.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

namespace {

const ::google::protobuf::Descriptor* GameState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameState_CompType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameState_State_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameState_Phase_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameState_RefBoxMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SetGameState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGameState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SetGameState_CompType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SetGamePhase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGamePhase_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SetGamePhase_CompType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameState_2eproto() {
  protobuf_AddDesc_GameState_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameState.proto");
  GOOGLE_CHECK(file != NULL);
  GameState_descriptor_ = file->message_type(0);
  static const int GameState_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, points_cyan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, team_cyan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, points_magenta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, team_magenta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, refbox_mode_),
  };
  GameState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameState_descriptor_,
      GameState::default_instance_,
      GameState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameState));
  GameState_CompType_descriptor_ = GameState_descriptor_->enum_type(0);
  GameState_State_descriptor_ = GameState_descriptor_->enum_type(1);
  GameState_Phase_descriptor_ = GameState_descriptor_->enum_type(2);
  GameState_RefBoxMode_descriptor_ = GameState_descriptor_->enum_type(3);
  SetGameState_descriptor_ = file->message_type(1);
  static const int SetGameState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGameState, state_),
  };
  SetGameState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGameState_descriptor_,
      SetGameState::default_instance_,
      SetGameState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGameState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGameState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGameState));
  SetGameState_CompType_descriptor_ = SetGameState_descriptor_->enum_type(0);
  SetGamePhase_descriptor_ = file->message_type(2);
  static const int SetGamePhase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGamePhase, phase_),
  };
  SetGamePhase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGamePhase_descriptor_,
      SetGamePhase::default_instance_,
      SetGamePhase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGamePhase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGamePhase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGamePhase));
  SetGamePhase_CompType_descriptor_ = SetGamePhase_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameState_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameState_descriptor_, &GameState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGameState_descriptor_, &SetGameState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGamePhase_descriptor_, &SetGamePhase::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameState_2eproto() {
  delete GameState::default_instance_;
  delete GameState_reflection_;
  delete SetGameState::default_instance_;
  delete SetGameState_reflection_;
  delete SetGamePhase::default_instance_;
  delete SetGamePhase_reflection_;
}

void protobuf_AddDesc_GameState_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::llsf_msgs::protobuf_AddDesc_Time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017GameState.proto\022\tllsf_msgs\032\nTime.proto"
    "\"\326\004\n\tGameState\022\"\n\tgame_time\030\001 \002(\0132\017.llsf"
    "_msgs.Time\022)\n\005state\030\003 \002(\0162\032.llsf_msgs.Ga"
    "meState.State\022)\n\005phase\030\004 \002(\0162\032.llsf_msgs"
    ".GameState.Phase\022\023\n\013points_cyan\030\005 \001(\r\022\021\n"
    "\tteam_cyan\030\006 \001(\t\022\026\n\016points_magenta\030\010 \001(\r"
    "\022\024\n\014team_magenta\030\t \001(\t\022@\n\013refbox_mode\030\007 "
    "\001(\0162\037.llsf_msgs.GameState.RefBoxMode:\nST"
    "ANDALONE\"&\n\010CompType\022\014\n\007COMP_ID\020\320\017\022\014\n\010MS"
    "G_TYPE\020\024\":\n\005State\022\010\n\004INIT\020\000\022\016\n\nWAIT_STAR"
    "T\020\001\022\013\n\007RUNNING\020\002\022\n\n\006PAUSED\020\003\"\235\001\n\005Phase\022\014"
    "\n\010PRE_GAME\020\000\022\t\n\005SETUP\020\n\022\017\n\013EXPLORATION\020\024"
    "\022\016\n\nPRODUCTION\020\036\022\r\n\tPOST_GAME\020(\022\023\n\016OPEN_"
    "CHALLENGE\020\350\007\022\031\n\024NAVIGATION_CHALLENGE\020\351\007\022"
    "\033\n\026WHACK_A_MOLE_CHALLENGE\020\352\007\"3\n\nRefBoxMo"
    "de\022\016\n\nSTANDALONE\020\000\022\n\n\006MASTER\020\001\022\t\n\005SLAVE\020"
    "\002\"a\n\014SetGameState\022)\n\005state\030\001 \002(\0162\032.llsf_"
    "msgs.GameState.State\"&\n\010CompType\022\014\n\007COMP"
    "_ID\020\320\017\022\014\n\010MSG_TYPE\020\025\"a\n\014SetGamePhase\022)\n\005"
    "phase\030\001 \002(\0162\032.llsf_msgs.GameState.Phase\""
    "&\n\010CompType\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020\026B"
    "2\n\037org.robocup_logistics.llsf_msgsB\017Game"
    "StateProtos", 891);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameState.proto", &protobuf_RegisterTypes);
  GameState::default_instance_ = new GameState();
  SetGameState::default_instance_ = new SetGameState();
  SetGamePhase::default_instance_ = new SetGamePhase();
  GameState::default_instance_->InitAsDefaultInstance();
  SetGameState::default_instance_->InitAsDefaultInstance();
  SetGamePhase::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameState_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameState_2eproto {
  StaticDescriptorInitializer_GameState_2eproto() {
    protobuf_AddDesc_GameState_2eproto();
  }
} static_descriptor_initializer_GameState_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* GameState_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_CompType_descriptor_;
}
bool GameState_CompType_IsValid(int value) {
  switch(value) {
    case 20:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameState_CompType GameState::COMP_ID;
const GameState_CompType GameState::MSG_TYPE;
const GameState_CompType GameState::CompType_MIN;
const GameState_CompType GameState::CompType_MAX;
const int GameState::CompType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GameState_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_State_descriptor_;
}
bool GameState_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameState_State GameState::INIT;
const GameState_State GameState::WAIT_START;
const GameState_State GameState::RUNNING;
const GameState_State GameState::PAUSED;
const GameState_State GameState::State_MIN;
const GameState_State GameState::State_MAX;
const int GameState::State_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GameState_Phase_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_Phase_descriptor_;
}
bool GameState_Phase_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
    case 20:
    case 30:
    case 40:
    case 1000:
    case 1001:
    case 1002:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameState_Phase GameState::PRE_GAME;
const GameState_Phase GameState::SETUP;
const GameState_Phase GameState::EXPLORATION;
const GameState_Phase GameState::PRODUCTION;
const GameState_Phase GameState::POST_GAME;
const GameState_Phase GameState::OPEN_CHALLENGE;
const GameState_Phase GameState::NAVIGATION_CHALLENGE;
const GameState_Phase GameState::WHACK_A_MOLE_CHALLENGE;
const GameState_Phase GameState::Phase_MIN;
const GameState_Phase GameState::Phase_MAX;
const int GameState::Phase_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GameState_RefBoxMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_RefBoxMode_descriptor_;
}
bool GameState_RefBoxMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameState_RefBoxMode GameState::STANDALONE;
const GameState_RefBoxMode GameState::MASTER;
const GameState_RefBoxMode GameState::SLAVE;
const GameState_RefBoxMode GameState::RefBoxMode_MIN;
const GameState_RefBoxMode GameState::RefBoxMode_MAX;
const int GameState::RefBoxMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameState::kGameTimeFieldNumber;
const int GameState::kStateFieldNumber;
const int GameState::kPhaseFieldNumber;
const int GameState::kPointsCyanFieldNumber;
const int GameState::kTeamCyanFieldNumber;
const int GameState::kPointsMagentaFieldNumber;
const int GameState::kTeamMagentaFieldNumber;
const int GameState::kRefboxModeFieldNumber;
#endif  // !_MSC_VER

GameState::GameState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameState::InitAsDefaultInstance() {
  game_time_ = const_cast< ::llsf_msgs::Time*>(&::llsf_msgs::Time::default_instance());
}

GameState::GameState(const GameState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameState::SharedCtor() {
  _cached_size_ = 0;
  game_time_ = NULL;
  state_ = 0;
  phase_ = 0;
  points_cyan_ = 0u;
  team_cyan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  points_magenta_ = 0u;
  team_magenta_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refbox_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameState::~GameState() {
  SharedDtor();
}

void GameState::SharedDtor() {
  if (team_cyan_ != &::google::protobuf::internal::kEmptyString) {
    delete team_cyan_;
  }
  if (team_magenta_ != &::google::protobuf::internal::kEmptyString) {
    delete team_magenta_;
  }
  if (this != default_instance_) {
    delete game_time_;
  }
}

void GameState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_descriptor_;
}

const GameState& GameState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameState_2eproto();  return *default_instance_;
}

GameState* GameState::default_instance_ = NULL;

GameState* GameState::New() const {
  return new GameState;
}

void GameState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game_time()) {
      if (game_time_ != NULL) game_time_->::llsf_msgs::Time::Clear();
    }
    state_ = 0;
    phase_ = 0;
    points_cyan_ = 0u;
    if (has_team_cyan()) {
      if (team_cyan_ != &::google::protobuf::internal::kEmptyString) {
        team_cyan_->clear();
      }
    }
    points_magenta_ = 0u;
    if (has_team_magenta()) {
      if (team_magenta_ != &::google::protobuf::internal::kEmptyString) {
        team_magenta_->clear();
      }
    }
    refbox_mode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llsf_msgs.Time game_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }
      
      // required .llsf_msgs.GameState.State state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::GameState_State_IsValid(value)) {
            set_state(static_cast< ::llsf_msgs::GameState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_phase;
        break;
      }
      
      // required .llsf_msgs.GameState.Phase phase = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phase:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::GameState_Phase_IsValid(value)) {
            set_phase(static_cast< ::llsf_msgs::GameState_Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_points_cyan;
        break;
      }
      
      // optional uint32 points_cyan = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_cyan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_cyan_)));
          set_has_points_cyan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_team_cyan;
        break;
      }
      
      // optional string team_cyan = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_cyan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_cyan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_cyan().data(), this->team_cyan().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_refbox_mode;
        break;
      }
      
      // optional .llsf_msgs.GameState.RefBoxMode refbox_mode = 7 [default = STANDALONE];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refbox_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::GameState_RefBoxMode_IsValid(value)) {
            set_refbox_mode(static_cast< ::llsf_msgs::GameState_RefBoxMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_points_magenta;
        break;
      }
      
      // optional uint32 points_magenta = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_magenta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_magenta_)));
          set_has_points_magenta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_team_magenta;
        break;
      }
      
      // optional string team_magenta = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_magenta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_magenta()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_magenta().data(), this->team_magenta().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llsf_msgs.Time game_time = 1;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game_time(), output);
  }
  
  // required .llsf_msgs.GameState.State state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }
  
  // required .llsf_msgs.GameState.Phase phase = 4;
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->phase(), output);
  }
  
  // optional uint32 points_cyan = 5;
  if (has_points_cyan()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->points_cyan(), output);
  }
  
  // optional string team_cyan = 6;
  if (has_team_cyan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_cyan().data(), this->team_cyan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->team_cyan(), output);
  }
  
  // optional .llsf_msgs.GameState.RefBoxMode refbox_mode = 7 [default = STANDALONE];
  if (has_refbox_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->refbox_mode(), output);
  }
  
  // optional uint32 points_magenta = 8;
  if (has_points_magenta()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->points_magenta(), output);
  }
  
  // optional string team_magenta = 9;
  if (has_team_magenta()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_magenta().data(), this->team_magenta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->team_magenta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llsf_msgs.Time game_time = 1;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game_time(), target);
  }
  
  // required .llsf_msgs.GameState.State state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }
  
  // required .llsf_msgs.GameState.Phase phase = 4;
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->phase(), target);
  }
  
  // optional uint32 points_cyan = 5;
  if (has_points_cyan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->points_cyan(), target);
  }
  
  // optional string team_cyan = 6;
  if (has_team_cyan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_cyan().data(), this->team_cyan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->team_cyan(), target);
  }
  
  // optional .llsf_msgs.GameState.RefBoxMode refbox_mode = 7 [default = STANDALONE];
  if (has_refbox_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->refbox_mode(), target);
  }
  
  // optional uint32 points_magenta = 8;
  if (has_points_magenta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->points_magenta(), target);
  }
  
  // optional string team_magenta = 9;
  if (has_team_magenta()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_magenta().data(), this->team_magenta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->team_magenta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llsf_msgs.Time game_time = 1;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_time());
    }
    
    // required .llsf_msgs.GameState.State state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // required .llsf_msgs.GameState.Phase phase = 4;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }
    
    // optional uint32 points_cyan = 5;
    if (has_points_cyan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_cyan());
    }
    
    // optional string team_cyan = 6;
    if (has_team_cyan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_cyan());
    }
    
    // optional uint32 points_magenta = 8;
    if (has_points_magenta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_magenta());
    }
    
    // optional string team_magenta = 9;
    if (has_team_magenta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_magenta());
    }
    
    // optional .llsf_msgs.GameState.RefBoxMode refbox_mode = 7 [default = STANDALONE];
    if (has_refbox_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->refbox_mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_time()) {
      mutable_game_time()->::llsf_msgs::Time::MergeFrom(from.game_time());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_phase()) {
      set_phase(from.phase());
    }
    if (from.has_points_cyan()) {
      set_points_cyan(from.points_cyan());
    }
    if (from.has_team_cyan()) {
      set_team_cyan(from.team_cyan());
    }
    if (from.has_points_magenta()) {
      set_points_magenta(from.points_magenta());
    }
    if (from.has_team_magenta()) {
      set_team_magenta(from.team_magenta());
    }
    if (from.has_refbox_mode()) {
      set_refbox_mode(from.refbox_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_game_time()) {
    if (!this->game_time().IsInitialized()) return false;
  }
  return true;
}

void GameState::Swap(GameState* other) {
  if (other != this) {
    std::swap(game_time_, other->game_time_);
    std::swap(state_, other->state_);
    std::swap(phase_, other->phase_);
    std::swap(points_cyan_, other->points_cyan_);
    std::swap(team_cyan_, other->team_cyan_);
    std::swap(points_magenta_, other->points_magenta_);
    std::swap(team_magenta_, other->team_magenta_);
    std::swap(refbox_mode_, other->refbox_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameState_descriptor_;
  metadata.reflection = GameState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SetGameState_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGameState_CompType_descriptor_;
}
bool SetGameState_CompType_IsValid(int value) {
  switch(value) {
    case 21:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SetGameState_CompType SetGameState::COMP_ID;
const SetGameState_CompType SetGameState::MSG_TYPE;
const SetGameState_CompType SetGameState::CompType_MIN;
const SetGameState_CompType SetGameState::CompType_MAX;
const int SetGameState::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SetGameState::kStateFieldNumber;
#endif  // !_MSC_VER

SetGameState::SetGameState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetGameState::InitAsDefaultInstance() {
}

SetGameState::SetGameState(const SetGameState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetGameState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGameState::~SetGameState() {
  SharedDtor();
}

void SetGameState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGameState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGameState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGameState_descriptor_;
}

const SetGameState& SetGameState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameState_2eproto();  return *default_instance_;
}

SetGameState* SetGameState::default_instance_ = NULL;

SetGameState* SetGameState::New() const {
  return new SetGameState;
}

void SetGameState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llsf_msgs.GameState.State state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::GameState_State_IsValid(value)) {
            set_state(static_cast< ::llsf_msgs::GameState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetGameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llsf_msgs.GameState.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetGameState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llsf_msgs.GameState.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetGameState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llsf_msgs.GameState.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGameState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGameState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGameState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGameState::MergeFrom(const SetGameState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGameState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGameState::CopyFrom(const SetGameState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGameState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SetGameState::Swap(SetGameState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGameState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGameState_descriptor_;
  metadata.reflection = SetGameState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SetGamePhase_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGamePhase_CompType_descriptor_;
}
bool SetGamePhase_CompType_IsValid(int value) {
  switch(value) {
    case 22:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SetGamePhase_CompType SetGamePhase::COMP_ID;
const SetGamePhase_CompType SetGamePhase::MSG_TYPE;
const SetGamePhase_CompType SetGamePhase::CompType_MIN;
const SetGamePhase_CompType SetGamePhase::CompType_MAX;
const int SetGamePhase::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SetGamePhase::kPhaseFieldNumber;
#endif  // !_MSC_VER

SetGamePhase::SetGamePhase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetGamePhase::InitAsDefaultInstance() {
}

SetGamePhase::SetGamePhase(const SetGamePhase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetGamePhase::SharedCtor() {
  _cached_size_ = 0;
  phase_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGamePhase::~SetGamePhase() {
  SharedDtor();
}

void SetGamePhase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGamePhase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGamePhase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGamePhase_descriptor_;
}

const SetGamePhase& SetGamePhase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameState_2eproto();  return *default_instance_;
}

SetGamePhase* SetGamePhase::default_instance_ = NULL;

SetGamePhase* SetGamePhase::New() const {
  return new SetGamePhase;
}

void SetGamePhase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phase_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGamePhase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llsf_msgs.GameState.Phase phase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::GameState_Phase_IsValid(value)) {
            set_phase(static_cast< ::llsf_msgs::GameState_Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetGamePhase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llsf_msgs.GameState.Phase phase = 1;
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phase(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetGamePhase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llsf_msgs.GameState.Phase phase = 1;
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phase(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetGamePhase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llsf_msgs.GameState.Phase phase = 1;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGamePhase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGamePhase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGamePhase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGamePhase::MergeFrom(const SetGamePhase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phase()) {
      set_phase(from.phase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGamePhase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGamePhase::CopyFrom(const SetGamePhase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGamePhase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SetGamePhase::Swap(SetGamePhase* other) {
  if (other != this) {
    std::swap(phase_, other->phase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGamePhase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGamePhase_descriptor_;
  metadata.reflection = SetGamePhase_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

// @@protoc_insertion_point(global_scope)
