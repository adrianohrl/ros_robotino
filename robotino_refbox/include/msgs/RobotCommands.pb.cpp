// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RobotCommands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

namespace {

const ::google::protobuf::Descriptor* SetRobotMaintenance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRobotMaintenance_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SetRobotMaintenance_CompType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RobotCommands_2eproto() {
  protobuf_AddDesc_RobotCommands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RobotCommands.proto");
  GOOGLE_CHECK(file != NULL);
  SetRobotMaintenance_descriptor_ = file->message_type(0);
  static const int SetRobotMaintenance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRobotMaintenance, robot_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRobotMaintenance, maintenance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRobotMaintenance, team_color_),
  };
  SetRobotMaintenance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetRobotMaintenance_descriptor_,
      SetRobotMaintenance::default_instance_,
      SetRobotMaintenance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRobotMaintenance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRobotMaintenance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetRobotMaintenance));
  SetRobotMaintenance_CompType_descriptor_ = SetRobotMaintenance_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RobotCommands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetRobotMaintenance_descriptor_, &SetRobotMaintenance::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RobotCommands_2eproto() {
  delete SetRobotMaintenance::default_instance_;
  delete SetRobotMaintenance_reflection_;
}

void protobuf_AddDesc_RobotCommands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::llsf_msgs::protobuf_AddDesc_Team_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023RobotCommands.proto\022\tllsf_msgs\032\nTeam.p"
    "roto\"\215\001\n\023SetRobotMaintenance\022\024\n\014robot_nu"
    "mber\030\001 \002(\r\022\023\n\013maintenance\030\003 \002(\010\022#\n\nteam_"
    "color\030\004 \002(\0162\017.llsf_msgs.Team\"&\n\010CompType"
    "\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020[B6\n\037org.robo"
    "cup_logistics.llsf_msgsB\023RobotCommandsPr"
    "otos", 244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RobotCommands.proto", &protobuf_RegisterTypes);
  SetRobotMaintenance::default_instance_ = new SetRobotMaintenance();
  SetRobotMaintenance::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RobotCommands_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RobotCommands_2eproto {
  StaticDescriptorInitializer_RobotCommands_2eproto() {
    protobuf_AddDesc_RobotCommands_2eproto();
  }
} static_descriptor_initializer_RobotCommands_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* SetRobotMaintenance_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRobotMaintenance_CompType_descriptor_;
}
bool SetRobotMaintenance_CompType_IsValid(int value) {
  switch(value) {
    case 91:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SetRobotMaintenance_CompType SetRobotMaintenance::COMP_ID;
const SetRobotMaintenance_CompType SetRobotMaintenance::MSG_TYPE;
const SetRobotMaintenance_CompType SetRobotMaintenance::CompType_MIN;
const SetRobotMaintenance_CompType SetRobotMaintenance::CompType_MAX;
const int SetRobotMaintenance::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SetRobotMaintenance::kRobotNumberFieldNumber;
const int SetRobotMaintenance::kMaintenanceFieldNumber;
const int SetRobotMaintenance::kTeamColorFieldNumber;
#endif  // !_MSC_VER

SetRobotMaintenance::SetRobotMaintenance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetRobotMaintenance::InitAsDefaultInstance() {
}

SetRobotMaintenance::SetRobotMaintenance(const SetRobotMaintenance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetRobotMaintenance::SharedCtor() {
  _cached_size_ = 0;
  robot_number_ = 0u;
  maintenance_ = false;
  team_color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetRobotMaintenance::~SetRobotMaintenance() {
  SharedDtor();
}

void SetRobotMaintenance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetRobotMaintenance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRobotMaintenance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRobotMaintenance_descriptor_;
}

const SetRobotMaintenance& SetRobotMaintenance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotCommands_2eproto();  return *default_instance_;
}

SetRobotMaintenance* SetRobotMaintenance::default_instance_ = NULL;

SetRobotMaintenance* SetRobotMaintenance::New() const {
  return new SetRobotMaintenance;
}

void SetRobotMaintenance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    robot_number_ = 0u;
    maintenance_ = false;
    team_color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetRobotMaintenance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 robot_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_number_)));
          set_has_robot_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maintenance;
        break;
      }
      
      // required bool maintenance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maintenance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &maintenance_)));
          set_has_maintenance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_color;
        break;
      }
      
      // required .llsf_msgs.Team team_color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetRobotMaintenance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 robot_number = 1;
  if (has_robot_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->robot_number(), output);
  }
  
  // required bool maintenance = 3;
  if (has_maintenance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->maintenance(), output);
  }
  
  // required .llsf_msgs.Team team_color = 4;
  if (has_team_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team_color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetRobotMaintenance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 robot_number = 1;
  if (has_robot_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->robot_number(), target);
  }
  
  // required bool maintenance = 3;
  if (has_maintenance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->maintenance(), target);
  }
  
  // required .llsf_msgs.Team team_color = 4;
  if (has_team_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team_color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetRobotMaintenance::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 robot_number = 1;
    if (has_robot_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robot_number());
    }
    
    // required bool maintenance = 3;
    if (has_maintenance()) {
      total_size += 1 + 1;
    }
    
    // required .llsf_msgs.Team team_color = 4;
    if (has_team_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRobotMaintenance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetRobotMaintenance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetRobotMaintenance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetRobotMaintenance::MergeFrom(const SetRobotMaintenance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot_number()) {
      set_robot_number(from.robot_number());
    }
    if (from.has_maintenance()) {
      set_maintenance(from.maintenance());
    }
    if (from.has_team_color()) {
      set_team_color(from.team_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetRobotMaintenance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRobotMaintenance::CopyFrom(const SetRobotMaintenance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRobotMaintenance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SetRobotMaintenance::Swap(SetRobotMaintenance* other) {
  if (other != this) {
    std::swap(robot_number_, other->robot_number_);
    std::swap(maintenance_, other->maintenance_);
    std::swap(team_color_, other->team_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetRobotMaintenance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRobotMaintenance_descriptor_;
  metadata.reflection = SetRobotMaintenance_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

// @@protoc_insertion_point(global_scope)
