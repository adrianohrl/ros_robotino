// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExplorationInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

namespace {

const ::google::protobuf::Descriptor* ExplorationSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExplorationSignal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExplorationSignal_CompType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExplorationMachine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExplorationMachine_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExplorationMachine_CompType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExplorationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExplorationInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExplorationInfo_CompType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExplorationInfo_2eproto() {
  protobuf_AddDesc_ExplorationInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExplorationInfo.proto");
  GOOGLE_CHECK(file != NULL);
  ExplorationSignal_descriptor_ = file->message_type(0);
  static const int ExplorationSignal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplorationSignal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplorationSignal, lights_),
  };
  ExplorationSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExplorationSignal_descriptor_,
      ExplorationSignal::default_instance_,
      ExplorationSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplorationSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplorationSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExplorationSignal));
  ExplorationSignal_CompType_descriptor_ = ExplorationSignal_descriptor_->enum_type(0);
  ExplorationMachine_descriptor_ = file->message_type(1);
  static const int ExplorationMachine_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplorationMachine, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplorationMachine, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplorationMachine, team_color_),
  };
  ExplorationMachine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExplorationMachine_descriptor_,
      ExplorationMachine::default_instance_,
      ExplorationMachine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplorationMachine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplorationMachine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExplorationMachine));
  ExplorationMachine_CompType_descriptor_ = ExplorationMachine_descriptor_->enum_type(0);
  ExplorationInfo_descriptor_ = file->message_type(2);
  static const int ExplorationInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplorationInfo, signals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplorationInfo, machines_),
  };
  ExplorationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExplorationInfo_descriptor_,
      ExplorationInfo::default_instance_,
      ExplorationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplorationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplorationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExplorationInfo));
  ExplorationInfo_CompType_descriptor_ = ExplorationInfo_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExplorationInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExplorationSignal_descriptor_, &ExplorationSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExplorationMachine_descriptor_, &ExplorationMachine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExplorationInfo_descriptor_, &ExplorationInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExplorationInfo_2eproto() {
  delete ExplorationSignal::default_instance_;
  delete ExplorationSignal_reflection_;
  delete ExplorationMachine::default_instance_;
  delete ExplorationMachine_reflection_;
  delete ExplorationInfo::default_instance_;
  delete ExplorationInfo_reflection_;
}

void protobuf_AddDesc_ExplorationInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::llsf_msgs::protobuf_AddDesc_MachineInfo_2eproto();
  ::llsf_msgs::protobuf_AddDesc_Pose2D_2eproto();
  ::llsf_msgs::protobuf_AddDesc_Team_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ExplorationInfo.proto\022\tllsf_msgs\032\021Mach"
    "ineInfo.proto\032\014Pose2D.proto\032\nTeam.proto\""
    "o\n\021ExplorationSignal\022\014\n\004type\030\001 \002(\t\022$\n\006li"
    "ghts\030\002 \003(\0132\024.llsf_msgs.LightSpec\"&\n\010Comp"
    "Type\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020F\"\220\001\n\022Exp"
    "lorationMachine\022\014\n\004name\030\001 \002(\t\022\037\n\004pose\030\002 "
    "\002(\0132\021.llsf_msgs.Pose2D\022#\n\nteam_color\030\003 \002"
    "(\0162\017.llsf_msgs.Team\"&\n\010CompType\022\014\n\007COMP_"
    "ID\020\320\017\022\014\n\010MSG_TYPE\020G\"\231\001\n\017ExplorationInfo\022"
    "-\n\007signals\030\001 \003(\0132\034.llsf_msgs.Exploration"
    "Signal\022/\n\010machines\030\002 \003(\0132\035.llsf_msgs.Exp"
    "lorationMachine\"&\n\010CompType\022\014\n\007COMP_ID\020\320"
    "\017\022\014\n\010MSG_TYPE\020HB8\n\037org.robocup_logistics"
    ".llsf_msgsB\025ExplorationInfoProtos", 553);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExplorationInfo.proto", &protobuf_RegisterTypes);
  ExplorationSignal::default_instance_ = new ExplorationSignal();
  ExplorationMachine::default_instance_ = new ExplorationMachine();
  ExplorationInfo::default_instance_ = new ExplorationInfo();
  ExplorationSignal::default_instance_->InitAsDefaultInstance();
  ExplorationMachine::default_instance_->InitAsDefaultInstance();
  ExplorationInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExplorationInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExplorationInfo_2eproto {
  StaticDescriptorInitializer_ExplorationInfo_2eproto() {
    protobuf_AddDesc_ExplorationInfo_2eproto();
  }
} static_descriptor_initializer_ExplorationInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExplorationSignal_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExplorationSignal_CompType_descriptor_;
}
bool ExplorationSignal_CompType_IsValid(int value) {
  switch(value) {
    case 70:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExplorationSignal_CompType ExplorationSignal::COMP_ID;
const ExplorationSignal_CompType ExplorationSignal::MSG_TYPE;
const ExplorationSignal_CompType ExplorationSignal::CompType_MIN;
const ExplorationSignal_CompType ExplorationSignal::CompType_MAX;
const int ExplorationSignal::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ExplorationSignal::kTypeFieldNumber;
const int ExplorationSignal::kLightsFieldNumber;
#endif  // !_MSC_VER

ExplorationSignal::ExplorationSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExplorationSignal::InitAsDefaultInstance() {
}

ExplorationSignal::ExplorationSignal(const ExplorationSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExplorationSignal::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExplorationSignal::~ExplorationSignal() {
  SharedDtor();
}

void ExplorationSignal::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void ExplorationSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExplorationSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExplorationSignal_descriptor_;
}

const ExplorationSignal& ExplorationSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExplorationInfo_2eproto();  return *default_instance_;
}

ExplorationSignal* ExplorationSignal::default_instance_ = NULL;

ExplorationSignal* ExplorationSignal::New() const {
  return new ExplorationSignal;
}

void ExplorationSignal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  lights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExplorationSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lights;
        break;
      }
      
      // repeated .llsf_msgs.LightSpec lights = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lights;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExplorationSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }
  
  // repeated .llsf_msgs.LightSpec lights = 2;
  for (int i = 0; i < this->lights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lights(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExplorationSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }
  
  // repeated .llsf_msgs.LightSpec lights = 2;
  for (int i = 0; i < this->lights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lights(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExplorationSignal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
  }
  // repeated .llsf_msgs.LightSpec lights = 2;
  total_size += 1 * this->lights_size();
  for (int i = 0; i < this->lights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lights(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExplorationSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExplorationSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExplorationSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExplorationSignal::MergeFrom(const ExplorationSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  lights_.MergeFrom(from.lights_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExplorationSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExplorationSignal::CopyFrom(const ExplorationSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplorationSignal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < lights_size(); i++) {
    if (!this->lights(i).IsInitialized()) return false;
  }
  return true;
}

void ExplorationSignal::Swap(ExplorationSignal* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    lights_.Swap(&other->lights_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExplorationSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExplorationSignal_descriptor_;
  metadata.reflection = ExplorationSignal_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExplorationMachine_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExplorationMachine_CompType_descriptor_;
}
bool ExplorationMachine_CompType_IsValid(int value) {
  switch(value) {
    case 71:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExplorationMachine_CompType ExplorationMachine::COMP_ID;
const ExplorationMachine_CompType ExplorationMachine::MSG_TYPE;
const ExplorationMachine_CompType ExplorationMachine::CompType_MIN;
const ExplorationMachine_CompType ExplorationMachine::CompType_MAX;
const int ExplorationMachine::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ExplorationMachine::kNameFieldNumber;
const int ExplorationMachine::kPoseFieldNumber;
const int ExplorationMachine::kTeamColorFieldNumber;
#endif  // !_MSC_VER

ExplorationMachine::ExplorationMachine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExplorationMachine::InitAsDefaultInstance() {
  pose_ = const_cast< ::llsf_msgs::Pose2D*>(&::llsf_msgs::Pose2D::default_instance());
}

ExplorationMachine::ExplorationMachine(const ExplorationMachine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExplorationMachine::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pose_ = NULL;
  team_color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExplorationMachine::~ExplorationMachine() {
  SharedDtor();
}

void ExplorationMachine::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pose_;
  }
}

void ExplorationMachine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExplorationMachine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExplorationMachine_descriptor_;
}

const ExplorationMachine& ExplorationMachine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExplorationInfo_2eproto();  return *default_instance_;
}

ExplorationMachine* ExplorationMachine::default_instance_ = NULL;

ExplorationMachine* ExplorationMachine::New() const {
  return new ExplorationMachine;
}

void ExplorationMachine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::llsf_msgs::Pose2D::Clear();
    }
    team_color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExplorationMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pose;
        break;
      }
      
      // required .llsf_msgs.Pose2D pose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_color;
        break;
      }
      
      // required .llsf_msgs.Team team_color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExplorationMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required .llsf_msgs.Pose2D pose = 2;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pose(), output);
  }
  
  // required .llsf_msgs.Team team_color = 3;
  if (has_team_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team_color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExplorationMachine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required .llsf_msgs.Pose2D pose = 2;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pose(), target);
  }
  
  // required .llsf_msgs.Team team_color = 3;
  if (has_team_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team_color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExplorationMachine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .llsf_msgs.Pose2D pose = 2;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }
    
    // required .llsf_msgs.Team team_color = 3;
    if (has_team_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExplorationMachine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExplorationMachine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExplorationMachine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExplorationMachine::MergeFrom(const ExplorationMachine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pose()) {
      mutable_pose()->::llsf_msgs::Pose2D::MergeFrom(from.pose());
    }
    if (from.has_team_color()) {
      set_team_color(from.team_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExplorationMachine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExplorationMachine::CopyFrom(const ExplorationMachine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplorationMachine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void ExplorationMachine::Swap(ExplorationMachine* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pose_, other->pose_);
    std::swap(team_color_, other->team_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExplorationMachine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExplorationMachine_descriptor_;
  metadata.reflection = ExplorationMachine_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExplorationInfo_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExplorationInfo_CompType_descriptor_;
}
bool ExplorationInfo_CompType_IsValid(int value) {
  switch(value) {
    case 72:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExplorationInfo_CompType ExplorationInfo::COMP_ID;
const ExplorationInfo_CompType ExplorationInfo::MSG_TYPE;
const ExplorationInfo_CompType ExplorationInfo::CompType_MIN;
const ExplorationInfo_CompType ExplorationInfo::CompType_MAX;
const int ExplorationInfo::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ExplorationInfo::kSignalsFieldNumber;
const int ExplorationInfo::kMachinesFieldNumber;
#endif  // !_MSC_VER

ExplorationInfo::ExplorationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExplorationInfo::InitAsDefaultInstance() {
}

ExplorationInfo::ExplorationInfo(const ExplorationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExplorationInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExplorationInfo::~ExplorationInfo() {
  SharedDtor();
}

void ExplorationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExplorationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExplorationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExplorationInfo_descriptor_;
}

const ExplorationInfo& ExplorationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExplorationInfo_2eproto();  return *default_instance_;
}

ExplorationInfo* ExplorationInfo::default_instance_ = NULL;

ExplorationInfo* ExplorationInfo::New() const {
  return new ExplorationInfo;
}

void ExplorationInfo::Clear() {
  signals_.Clear();
  machines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExplorationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .llsf_msgs.ExplorationSignal signals = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_signals;
        if (input->ExpectTag(18)) goto parse_machines;
        break;
      }
      
      // repeated .llsf_msgs.ExplorationMachine machines = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_machines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machines;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExplorationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .llsf_msgs.ExplorationSignal signals = 1;
  for (int i = 0; i < this->signals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signals(i), output);
  }
  
  // repeated .llsf_msgs.ExplorationMachine machines = 2;
  for (int i = 0; i < this->machines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->machines(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExplorationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .llsf_msgs.ExplorationSignal signals = 1;
  for (int i = 0; i < this->signals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signals(i), target);
  }
  
  // repeated .llsf_msgs.ExplorationMachine machines = 2;
  for (int i = 0; i < this->machines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->machines(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExplorationInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .llsf_msgs.ExplorationSignal signals = 1;
  total_size += 1 * this->signals_size();
  for (int i = 0; i < this->signals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signals(i));
  }
  
  // repeated .llsf_msgs.ExplorationMachine machines = 2;
  total_size += 1 * this->machines_size();
  for (int i = 0; i < this->machines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->machines(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExplorationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExplorationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExplorationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExplorationInfo::MergeFrom(const ExplorationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  signals_.MergeFrom(from.signals_);
  machines_.MergeFrom(from.machines_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExplorationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExplorationInfo::CopyFrom(const ExplorationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplorationInfo::IsInitialized() const {
  
  for (int i = 0; i < signals_size(); i++) {
    if (!this->signals(i).IsInitialized()) return false;
  }
  for (int i = 0; i < machines_size(); i++) {
    if (!this->machines(i).IsInitialized()) return false;
  }
  return true;
}

void ExplorationInfo::Swap(ExplorationInfo* other) {
  if (other != this) {
    signals_.Swap(&other->signals_);
    machines_.Swap(&other->machines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExplorationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExplorationInfo_descriptor_;
  metadata.reflection = ExplorationInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

// @@protoc_insertion_point(global_scope)
