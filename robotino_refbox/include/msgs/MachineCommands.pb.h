// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MachineCommands.proto

#ifndef PROTOBUF_MachineCommands_2eproto__INCLUDED
#define PROTOBUF_MachineCommands_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MachineCommands_2eproto();
void protobuf_AssignDesc_MachineCommands_2eproto();
void protobuf_ShutdownFile_MachineCommands_2eproto();

class RemovePuckFromMachine;
class PlacePuckUnderMachine;
class LoadPuckInMachine;

enum RemovePuckFromMachine_CompType {
  RemovePuckFromMachine_CompType_COMP_ID = 2000,
  RemovePuckFromMachine_CompType_MSG_TYPE = 14
};
bool RemovePuckFromMachine_CompType_IsValid(int value);
const RemovePuckFromMachine_CompType RemovePuckFromMachine_CompType_CompType_MIN = RemovePuckFromMachine_CompType_MSG_TYPE;
const RemovePuckFromMachine_CompType RemovePuckFromMachine_CompType_CompType_MAX = RemovePuckFromMachine_CompType_COMP_ID;
const int RemovePuckFromMachine_CompType_CompType_ARRAYSIZE = RemovePuckFromMachine_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RemovePuckFromMachine_CompType_descriptor();
inline const ::std::string& RemovePuckFromMachine_CompType_Name(RemovePuckFromMachine_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RemovePuckFromMachine_CompType_descriptor(), value);
}
inline bool RemovePuckFromMachine_CompType_Parse(
    const ::std::string& name, RemovePuckFromMachine_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RemovePuckFromMachine_CompType>(
    RemovePuckFromMachine_CompType_descriptor(), name, value);
}
enum PlacePuckUnderMachine_CompType {
  PlacePuckUnderMachine_CompType_COMP_ID = 2000,
  PlacePuckUnderMachine_CompType_MSG_TYPE = 15
};
bool PlacePuckUnderMachine_CompType_IsValid(int value);
const PlacePuckUnderMachine_CompType PlacePuckUnderMachine_CompType_CompType_MIN = PlacePuckUnderMachine_CompType_MSG_TYPE;
const PlacePuckUnderMachine_CompType PlacePuckUnderMachine_CompType_CompType_MAX = PlacePuckUnderMachine_CompType_COMP_ID;
const int PlacePuckUnderMachine_CompType_CompType_ARRAYSIZE = PlacePuckUnderMachine_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlacePuckUnderMachine_CompType_descriptor();
inline const ::std::string& PlacePuckUnderMachine_CompType_Name(PlacePuckUnderMachine_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlacePuckUnderMachine_CompType_descriptor(), value);
}
inline bool PlacePuckUnderMachine_CompType_Parse(
    const ::std::string& name, PlacePuckUnderMachine_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlacePuckUnderMachine_CompType>(
    PlacePuckUnderMachine_CompType_descriptor(), name, value);
}
enum LoadPuckInMachine_CompType {
  LoadPuckInMachine_CompType_COMP_ID = 2000,
  LoadPuckInMachine_CompType_MSG_TYPE = 16
};
bool LoadPuckInMachine_CompType_IsValid(int value);
const LoadPuckInMachine_CompType LoadPuckInMachine_CompType_CompType_MIN = LoadPuckInMachine_CompType_MSG_TYPE;
const LoadPuckInMachine_CompType LoadPuckInMachine_CompType_CompType_MAX = LoadPuckInMachine_CompType_COMP_ID;
const int LoadPuckInMachine_CompType_CompType_ARRAYSIZE = LoadPuckInMachine_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoadPuckInMachine_CompType_descriptor();
inline const ::std::string& LoadPuckInMachine_CompType_Name(LoadPuckInMachine_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoadPuckInMachine_CompType_descriptor(), value);
}
inline bool LoadPuckInMachine_CompType_Parse(
    const ::std::string& name, LoadPuckInMachine_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoadPuckInMachine_CompType>(
    LoadPuckInMachine_CompType_descriptor(), name, value);
}
// ===================================================================

class RemovePuckFromMachine : public ::google::protobuf::Message {
 public:
  RemovePuckFromMachine();
  virtual ~RemovePuckFromMachine();
  
  RemovePuckFromMachine(const RemovePuckFromMachine& from);
  
  inline RemovePuckFromMachine& operator=(const RemovePuckFromMachine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePuckFromMachine& default_instance();
  
  void Swap(RemovePuckFromMachine* other);
  
  // implements Message ----------------------------------------------
  
  RemovePuckFromMachine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemovePuckFromMachine& from);
  void MergeFrom(const RemovePuckFromMachine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RemovePuckFromMachine_CompType CompType;
  static const CompType COMP_ID = RemovePuckFromMachine_CompType_COMP_ID;
  static const CompType MSG_TYPE = RemovePuckFromMachine_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return RemovePuckFromMachine_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    RemovePuckFromMachine_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    RemovePuckFromMachine_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    RemovePuckFromMachine_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return RemovePuckFromMachine_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return RemovePuckFromMachine_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return RemovePuckFromMachine_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string machine_name = 1;
  inline bool has_machine_name() const;
  inline void clear_machine_name();
  static const int kMachineNameFieldNumber = 1;
  inline const ::std::string& machine_name() const;
  inline void set_machine_name(const ::std::string& value);
  inline void set_machine_name(const char* value);
  inline void set_machine_name(const char* value, size_t size);
  inline ::std::string* mutable_machine_name();
  inline ::std::string* release_machine_name();
  
  // required uint32 puck_id = 2;
  inline bool has_puck_id() const;
  inline void clear_puck_id();
  static const int kPuckIdFieldNumber = 2;
  inline ::google::protobuf::uint32 puck_id() const;
  inline void set_puck_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.RemovePuckFromMachine)
 private:
  inline void set_has_machine_name();
  inline void clear_has_machine_name();
  inline void set_has_puck_id();
  inline void clear_has_puck_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* machine_name_;
  ::google::protobuf::uint32 puck_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MachineCommands_2eproto();
  friend void protobuf_AssignDesc_MachineCommands_2eproto();
  friend void protobuf_ShutdownFile_MachineCommands_2eproto();
  
  void InitAsDefaultInstance();
  static RemovePuckFromMachine* default_instance_;
};
// -------------------------------------------------------------------

class PlacePuckUnderMachine : public ::google::protobuf::Message {
 public:
  PlacePuckUnderMachine();
  virtual ~PlacePuckUnderMachine();
  
  PlacePuckUnderMachine(const PlacePuckUnderMachine& from);
  
  inline PlacePuckUnderMachine& operator=(const PlacePuckUnderMachine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlacePuckUnderMachine& default_instance();
  
  void Swap(PlacePuckUnderMachine* other);
  
  // implements Message ----------------------------------------------
  
  PlacePuckUnderMachine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlacePuckUnderMachine& from);
  void MergeFrom(const PlacePuckUnderMachine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PlacePuckUnderMachine_CompType CompType;
  static const CompType COMP_ID = PlacePuckUnderMachine_CompType_COMP_ID;
  static const CompType MSG_TYPE = PlacePuckUnderMachine_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return PlacePuckUnderMachine_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    PlacePuckUnderMachine_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    PlacePuckUnderMachine_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    PlacePuckUnderMachine_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return PlacePuckUnderMachine_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return PlacePuckUnderMachine_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return PlacePuckUnderMachine_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string machine_name = 1;
  inline bool has_machine_name() const;
  inline void clear_machine_name();
  static const int kMachineNameFieldNumber = 1;
  inline const ::std::string& machine_name() const;
  inline void set_machine_name(const ::std::string& value);
  inline void set_machine_name(const char* value);
  inline void set_machine_name(const char* value, size_t size);
  inline ::std::string* mutable_machine_name();
  inline ::std::string* release_machine_name();
  
  // required uint32 puck_id = 2;
  inline bool has_puck_id() const;
  inline void clear_puck_id();
  static const int kPuckIdFieldNumber = 2;
  inline ::google::protobuf::uint32 puck_id() const;
  inline void set_puck_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.PlacePuckUnderMachine)
 private:
  inline void set_has_machine_name();
  inline void clear_has_machine_name();
  inline void set_has_puck_id();
  inline void clear_has_puck_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* machine_name_;
  ::google::protobuf::uint32 puck_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MachineCommands_2eproto();
  friend void protobuf_AssignDesc_MachineCommands_2eproto();
  friend void protobuf_ShutdownFile_MachineCommands_2eproto();
  
  void InitAsDefaultInstance();
  static PlacePuckUnderMachine* default_instance_;
};
// -------------------------------------------------------------------

class LoadPuckInMachine : public ::google::protobuf::Message {
 public:
  LoadPuckInMachine();
  virtual ~LoadPuckInMachine();
  
  LoadPuckInMachine(const LoadPuckInMachine& from);
  
  inline LoadPuckInMachine& operator=(const LoadPuckInMachine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadPuckInMachine& default_instance();
  
  void Swap(LoadPuckInMachine* other);
  
  // implements Message ----------------------------------------------
  
  LoadPuckInMachine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoadPuckInMachine& from);
  void MergeFrom(const LoadPuckInMachine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LoadPuckInMachine_CompType CompType;
  static const CompType COMP_ID = LoadPuckInMachine_CompType_COMP_ID;
  static const CompType MSG_TYPE = LoadPuckInMachine_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return LoadPuckInMachine_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    LoadPuckInMachine_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    LoadPuckInMachine_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    LoadPuckInMachine_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return LoadPuckInMachine_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return LoadPuckInMachine_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return LoadPuckInMachine_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string machine_name = 1;
  inline bool has_machine_name() const;
  inline void clear_machine_name();
  static const int kMachineNameFieldNumber = 1;
  inline const ::std::string& machine_name() const;
  inline void set_machine_name(const ::std::string& value);
  inline void set_machine_name(const char* value);
  inline void set_machine_name(const char* value, size_t size);
  inline ::std::string* mutable_machine_name();
  inline ::std::string* release_machine_name();
  
  // required uint32 puck_id = 2;
  inline bool has_puck_id() const;
  inline void clear_puck_id();
  static const int kPuckIdFieldNumber = 2;
  inline ::google::protobuf::uint32 puck_id() const;
  inline void set_puck_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.LoadPuckInMachine)
 private:
  inline void set_has_machine_name();
  inline void clear_has_machine_name();
  inline void set_has_puck_id();
  inline void clear_has_puck_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* machine_name_;
  ::google::protobuf::uint32 puck_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MachineCommands_2eproto();
  friend void protobuf_AssignDesc_MachineCommands_2eproto();
  friend void protobuf_ShutdownFile_MachineCommands_2eproto();
  
  void InitAsDefaultInstance();
  static LoadPuckInMachine* default_instance_;
};
// ===================================================================


// ===================================================================

// RemovePuckFromMachine

// required string machine_name = 1;
inline bool RemovePuckFromMachine::has_machine_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemovePuckFromMachine::set_has_machine_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemovePuckFromMachine::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemovePuckFromMachine::clear_machine_name() {
  if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
    machine_name_->clear();
  }
  clear_has_machine_name();
}
inline const ::std::string& RemovePuckFromMachine::machine_name() const {
  return *machine_name_;
}
inline void RemovePuckFromMachine::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(value);
}
inline void RemovePuckFromMachine::set_machine_name(const char* value) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(value);
}
inline void RemovePuckFromMachine::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemovePuckFromMachine::mutable_machine_name() {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  return machine_name_;
}
inline ::std::string* RemovePuckFromMachine::release_machine_name() {
  clear_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_name_;
    machine_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 puck_id = 2;
inline bool RemovePuckFromMachine::has_puck_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemovePuckFromMachine::set_has_puck_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemovePuckFromMachine::clear_has_puck_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemovePuckFromMachine::clear_puck_id() {
  puck_id_ = 0u;
  clear_has_puck_id();
}
inline ::google::protobuf::uint32 RemovePuckFromMachine::puck_id() const {
  return puck_id_;
}
inline void RemovePuckFromMachine::set_puck_id(::google::protobuf::uint32 value) {
  set_has_puck_id();
  puck_id_ = value;
}

// -------------------------------------------------------------------

// PlacePuckUnderMachine

// required string machine_name = 1;
inline bool PlacePuckUnderMachine::has_machine_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlacePuckUnderMachine::set_has_machine_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlacePuckUnderMachine::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlacePuckUnderMachine::clear_machine_name() {
  if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
    machine_name_->clear();
  }
  clear_has_machine_name();
}
inline const ::std::string& PlacePuckUnderMachine::machine_name() const {
  return *machine_name_;
}
inline void PlacePuckUnderMachine::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(value);
}
inline void PlacePuckUnderMachine::set_machine_name(const char* value) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(value);
}
inline void PlacePuckUnderMachine::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlacePuckUnderMachine::mutable_machine_name() {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  return machine_name_;
}
inline ::std::string* PlacePuckUnderMachine::release_machine_name() {
  clear_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_name_;
    machine_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 puck_id = 2;
inline bool PlacePuckUnderMachine::has_puck_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlacePuckUnderMachine::set_has_puck_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlacePuckUnderMachine::clear_has_puck_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlacePuckUnderMachine::clear_puck_id() {
  puck_id_ = 0u;
  clear_has_puck_id();
}
inline ::google::protobuf::uint32 PlacePuckUnderMachine::puck_id() const {
  return puck_id_;
}
inline void PlacePuckUnderMachine::set_puck_id(::google::protobuf::uint32 value) {
  set_has_puck_id();
  puck_id_ = value;
}

// -------------------------------------------------------------------

// LoadPuckInMachine

// required string machine_name = 1;
inline bool LoadPuckInMachine::has_machine_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoadPuckInMachine::set_has_machine_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoadPuckInMachine::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoadPuckInMachine::clear_machine_name() {
  if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
    machine_name_->clear();
  }
  clear_has_machine_name();
}
inline const ::std::string& LoadPuckInMachine::machine_name() const {
  return *machine_name_;
}
inline void LoadPuckInMachine::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(value);
}
inline void LoadPuckInMachine::set_machine_name(const char* value) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(value);
}
inline void LoadPuckInMachine::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoadPuckInMachine::mutable_machine_name() {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  return machine_name_;
}
inline ::std::string* LoadPuckInMachine::release_machine_name() {
  clear_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_name_;
    machine_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 puck_id = 2;
inline bool LoadPuckInMachine::has_puck_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoadPuckInMachine::set_has_puck_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoadPuckInMachine::clear_has_puck_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoadPuckInMachine::clear_puck_id() {
  puck_id_ = 0u;
  clear_has_puck_id();
}
inline ::google::protobuf::uint32 LoadPuckInMachine::puck_id() const {
  return puck_id_;
}
inline void LoadPuckInMachine::set_puck_id(::google::protobuf::uint32 value) {
  set_has_puck_id();
  puck_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::RemovePuckFromMachine_CompType>() {
  return ::llsf_msgs::RemovePuckFromMachine_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::PlacePuckUnderMachine_CompType>() {
  return ::llsf_msgs::PlacePuckUnderMachine_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::LoadPuckInMachine_CompType>() {
  return ::llsf_msgs::LoadPuckInMachine_CompType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MachineCommands_2eproto__INCLUDED
