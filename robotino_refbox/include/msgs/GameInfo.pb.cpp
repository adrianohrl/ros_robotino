// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

namespace {

const ::google::protobuf::Descriptor* GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameInfo_CompType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SetTeamName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTeamName_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SetTeamName_CompType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameInfo_2eproto() {
  protobuf_AddDesc_GameInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameInfo.proto");
  GOOGLE_CHECK(file != NULL);
  GameInfo_descriptor_ = file->message_type(0);
  static const int GameInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, known_teams_),
  };
  GameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameInfo_descriptor_,
      GameInfo::default_instance_,
      GameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameInfo));
  GameInfo_CompType_descriptor_ = GameInfo_descriptor_->enum_type(0);
  SetTeamName_descriptor_ = file->message_type(1);
  static const int SetTeamName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamName, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamName, team_color_),
  };
  SetTeamName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTeamName_descriptor_,
      SetTeamName::default_instance_,
      SetTeamName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTeamName));
  SetTeamName_CompType_descriptor_ = SetTeamName_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameInfo_descriptor_, &GameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTeamName_descriptor_, &SetTeamName::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameInfo_2eproto() {
  delete GameInfo::default_instance_;
  delete GameInfo_reflection_;
  delete SetTeamName::default_instance_;
  delete SetTeamName_reflection_;
}

void protobuf_AddDesc_GameInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::llsf_msgs::protobuf_AddDesc_Team_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016GameInfo.proto\022\tllsf_msgs\032\nTeam.proto\""
    "G\n\010GameInfo\022\023\n\013known_teams\030\001 \003(\t\"&\n\010Comp"
    "Type\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020Q\"m\n\013SetT"
    "eamName\022\021\n\tteam_name\030\001 \002(\t\022#\n\nteam_color"
    "\030\002 \002(\0162\017.llsf_msgs.Team\"&\n\010CompType\022\014\n\007C"
    "OMP_ID\020\320\017\022\014\n\010MSG_TYPE\020RB1\n\037org.robocup_l"
    "ogistics.llsf_msgsB\016GameInfoProtos", 274);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameInfo.proto", &protobuf_RegisterTypes);
  GameInfo::default_instance_ = new GameInfo();
  SetTeamName::default_instance_ = new SetTeamName();
  GameInfo::default_instance_->InitAsDefaultInstance();
  SetTeamName::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameInfo_2eproto {
  StaticDescriptorInitializer_GameInfo_2eproto() {
    protobuf_AddDesc_GameInfo_2eproto();
  }
} static_descriptor_initializer_GameInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* GameInfo_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfo_CompType_descriptor_;
}
bool GameInfo_CompType_IsValid(int value) {
  switch(value) {
    case 81:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameInfo_CompType GameInfo::COMP_ID;
const GameInfo_CompType GameInfo::MSG_TYPE;
const GameInfo_CompType GameInfo::CompType_MIN;
const GameInfo_CompType GameInfo::CompType_MAX;
const int GameInfo::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameInfo::kKnownTeamsFieldNumber;
#endif  // !_MSC_VER

GameInfo::GameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameInfo::InitAsDefaultInstance() {
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfo::~GameInfo() {
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfo_descriptor_;
}

const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameInfo_2eproto();  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New() const {
  return new GameInfo;
}

void GameInfo::Clear() {
  known_teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string known_teams = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_known_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_known_teams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->known_teams(0).data(), this->known_teams(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_known_teams;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string known_teams = 1;
  for (int i = 0; i < this->known_teams_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->known_teams(i).data(), this->known_teams(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->known_teams(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string known_teams = 1;
  for (int i = 0; i < this->known_teams_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->known_teams(i).data(), this->known_teams(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->known_teams(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated string known_teams = 1;
  total_size += 1 * this->known_teams_size();
  for (int i = 0; i < this->known_teams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->known_teams(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  known_teams_.MergeFrom(from.known_teams_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  
  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other != this) {
    known_teams_.Swap(&other->known_teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInfo_descriptor_;
  metadata.reflection = GameInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SetTeamName_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTeamName_CompType_descriptor_;
}
bool SetTeamName_CompType_IsValid(int value) {
  switch(value) {
    case 82:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SetTeamName_CompType SetTeamName::COMP_ID;
const SetTeamName_CompType SetTeamName::MSG_TYPE;
const SetTeamName_CompType SetTeamName::CompType_MIN;
const SetTeamName_CompType SetTeamName::CompType_MAX;
const int SetTeamName::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SetTeamName::kTeamNameFieldNumber;
const int SetTeamName::kTeamColorFieldNumber;
#endif  // !_MSC_VER

SetTeamName::SetTeamName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetTeamName::InitAsDefaultInstance() {
}

SetTeamName::SetTeamName(const SetTeamName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetTeamName::SharedCtor() {
  _cached_size_ = 0;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTeamName::~SetTeamName() {
  SharedDtor();
}

void SetTeamName::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void SetTeamName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTeamName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTeamName_descriptor_;
}

const SetTeamName& SetTeamName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameInfo_2eproto();  return *default_instance_;
}

SetTeamName* SetTeamName::default_instance_ = NULL;

SetTeamName* SetTeamName::New() const {
  return new SetTeamName;
}

void SetTeamName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    team_color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTeamName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string team_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_color;
        break;
      }
      
      // required .llsf_msgs.Team team_color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetTeamName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string team_name = 1;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->team_name(), output);
  }
  
  // required .llsf_msgs.Team team_color = 2;
  if (has_team_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTeamName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string team_name = 1;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->team_name(), target);
  }
  
  // required .llsf_msgs.Team team_color = 2;
  if (has_team_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTeamName::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string team_name = 1;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }
    
    // required .llsf_msgs.Team team_color = 2;
    if (has_team_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTeamName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTeamName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTeamName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTeamName::MergeFrom(const SetTeamName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_team_color()) {
      set_team_color(from.team_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTeamName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTeamName::CopyFrom(const SetTeamName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTeamName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SetTeamName::Swap(SetTeamName* other) {
  if (other != this) {
    std::swap(team_name_, other->team_name_);
    std::swap(team_color_, other->team_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTeamName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTeamName_descriptor_;
  metadata.reflection = SetTeamName_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

// @@protoc_insertion_point(global_scope)
