// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MachineReport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

namespace {

const ::google::protobuf::Descriptor* MachineReportEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineReportEntry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MachineReportEntry_CompType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MachineReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineReport_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MachineReport_CompType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MachineReportInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineReportInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MachineReportInfo_CompType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MachineReport_2eproto() {
  protobuf_AddDesc_MachineReport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MachineReport.proto");
  GOOGLE_CHECK(file != NULL);
  MachineReportEntry_descriptor_ = file->message_type(0);
  static const int MachineReportEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineReportEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineReportEntry, type_),
  };
  MachineReportEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineReportEntry_descriptor_,
      MachineReportEntry::default_instance_,
      MachineReportEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineReportEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineReportEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineReportEntry));
  MachineReportEntry_CompType_descriptor_ = MachineReportEntry_descriptor_->enum_type(0);
  MachineReport_descriptor_ = file->message_type(1);
  static const int MachineReport_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineReport, team_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineReport, machines_),
  };
  MachineReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineReport_descriptor_,
      MachineReport::default_instance_,
      MachineReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineReport));
  MachineReport_CompType_descriptor_ = MachineReport_descriptor_->enum_type(0);
  MachineReportInfo_descriptor_ = file->message_type(2);
  static const int MachineReportInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineReportInfo, reported_machines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineReportInfo, team_color_),
  };
  MachineReportInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineReportInfo_descriptor_,
      MachineReportInfo::default_instance_,
      MachineReportInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineReportInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineReportInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineReportInfo));
  MachineReportInfo_CompType_descriptor_ = MachineReportInfo_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MachineReport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineReportEntry_descriptor_, &MachineReportEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineReport_descriptor_, &MachineReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineReportInfo_descriptor_, &MachineReportInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MachineReport_2eproto() {
  delete MachineReportEntry::default_instance_;
  delete MachineReportEntry_reflection_;
  delete MachineReport::default_instance_;
  delete MachineReport_reflection_;
  delete MachineReportInfo::default_instance_;
  delete MachineReportInfo_reflection_;
}

void protobuf_AddDesc_MachineReport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::llsf_msgs::protobuf_AddDesc_MachineInfo_2eproto();
  ::llsf_msgs::protobuf_AddDesc_PuckInfo_2eproto();
  ::llsf_msgs::protobuf_AddDesc_Team_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MachineReport.proto\022\tllsf_msgs\032\021Machin"
    "eInfo.proto\032\016PuckInfo.proto\032\nTeam.proto\""
    "X\n\022MachineReportEntry\022\014\n\004name\030\001 \002(\t\022\014\n\004t"
    "ype\030\002 \002(\t\"&\n\010CompType\022\014\n\007COMP_ID\020\320\017\022\014\n\010M"
    "SG_TYPE\020<\"\215\001\n\rMachineReport\022#\n\nteam_colo"
    "r\030\002 \002(\0162\017.llsf_msgs.Team\022/\n\010machines\030\001 \003"
    "(\0132\035.llsf_msgs.MachineReportEntry\"&\n\010Com"
    "pType\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020=\"{\n\021Mac"
    "hineReportInfo\022\031\n\021reported_machines\030\001 \003("
    "\t\022#\n\nteam_color\030\002 \002(\0162\017.llsf_msgs.Team\"&"
    "\n\010CompType\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020>B6"
    "\n\037org.robocup_logistics.llsf_msgsB\023Machi"
    "neReportProtos", 494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MachineReport.proto", &protobuf_RegisterTypes);
  MachineReportEntry::default_instance_ = new MachineReportEntry();
  MachineReport::default_instance_ = new MachineReport();
  MachineReportInfo::default_instance_ = new MachineReportInfo();
  MachineReportEntry::default_instance_->InitAsDefaultInstance();
  MachineReport::default_instance_->InitAsDefaultInstance();
  MachineReportInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MachineReport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MachineReport_2eproto {
  StaticDescriptorInitializer_MachineReport_2eproto() {
    protobuf_AddDesc_MachineReport_2eproto();
  }
} static_descriptor_initializer_MachineReport_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* MachineReportEntry_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineReportEntry_CompType_descriptor_;
}
bool MachineReportEntry_CompType_IsValid(int value) {
  switch(value) {
    case 60:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MachineReportEntry_CompType MachineReportEntry::COMP_ID;
const MachineReportEntry_CompType MachineReportEntry::MSG_TYPE;
const MachineReportEntry_CompType MachineReportEntry::CompType_MIN;
const MachineReportEntry_CompType MachineReportEntry::CompType_MAX;
const int MachineReportEntry::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MachineReportEntry::kNameFieldNumber;
const int MachineReportEntry::kTypeFieldNumber;
#endif  // !_MSC_VER

MachineReportEntry::MachineReportEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MachineReportEntry::InitAsDefaultInstance() {
}

MachineReportEntry::MachineReportEntry(const MachineReportEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MachineReportEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineReportEntry::~MachineReportEntry() {
  SharedDtor();
}

void MachineReportEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void MachineReportEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineReportEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineReportEntry_descriptor_;
}

const MachineReportEntry& MachineReportEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MachineReport_2eproto();  return *default_instance_;
}

MachineReportEntry* MachineReportEntry::default_instance_ = NULL;

MachineReportEntry* MachineReportEntry::New() const {
  return new MachineReportEntry;
}

void MachineReportEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineReportEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MachineReportEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MachineReportEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MachineReportEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineReportEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineReportEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineReportEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineReportEntry::MergeFrom(const MachineReportEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineReportEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineReportEntry::CopyFrom(const MachineReportEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineReportEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MachineReportEntry::Swap(MachineReportEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineReportEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineReportEntry_descriptor_;
  metadata.reflection = MachineReportEntry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MachineReport_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineReport_CompType_descriptor_;
}
bool MachineReport_CompType_IsValid(int value) {
  switch(value) {
    case 61:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MachineReport_CompType MachineReport::COMP_ID;
const MachineReport_CompType MachineReport::MSG_TYPE;
const MachineReport_CompType MachineReport::CompType_MIN;
const MachineReport_CompType MachineReport::CompType_MAX;
const int MachineReport::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MachineReport::kTeamColorFieldNumber;
const int MachineReport::kMachinesFieldNumber;
#endif  // !_MSC_VER

MachineReport::MachineReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MachineReport::InitAsDefaultInstance() {
}

MachineReport::MachineReport(const MachineReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MachineReport::SharedCtor() {
  _cached_size_ = 0;
  team_color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineReport::~MachineReport() {
  SharedDtor();
}

void MachineReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MachineReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineReport_descriptor_;
}

const MachineReport& MachineReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MachineReport_2eproto();  return *default_instance_;
}

MachineReport* MachineReport::default_instance_ = NULL;

MachineReport* MachineReport::New() const {
  return new MachineReport;
}

void MachineReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_color_ = 0;
  }
  machines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .llsf_msgs.MachineReportEntry machines = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_machines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_machines;
        if (input->ExpectTag(16)) goto parse_team_color;
        break;
      }
      
      // required .llsf_msgs.Team team_color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MachineReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .llsf_msgs.MachineReportEntry machines = 1;
  for (int i = 0; i < this->machines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machines(i), output);
  }
  
  // required .llsf_msgs.Team team_color = 2;
  if (has_team_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MachineReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .llsf_msgs.MachineReportEntry machines = 1;
  for (int i = 0; i < this->machines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machines(i), target);
  }
  
  // required .llsf_msgs.Team team_color = 2;
  if (has_team_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MachineReport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llsf_msgs.Team team_color = 2;
    if (has_team_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
    }
    
  }
  // repeated .llsf_msgs.MachineReportEntry machines = 1;
  total_size += 1 * this->machines_size();
  for (int i = 0; i < this->machines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->machines(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineReport::MergeFrom(const MachineReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  machines_.MergeFrom(from.machines_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_color()) {
      set_team_color(from.team_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineReport::CopyFrom(const MachineReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < machines_size(); i++) {
    if (!this->machines(i).IsInitialized()) return false;
  }
  return true;
}

void MachineReport::Swap(MachineReport* other) {
  if (other != this) {
    std::swap(team_color_, other->team_color_);
    machines_.Swap(&other->machines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineReport_descriptor_;
  metadata.reflection = MachineReport_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MachineReportInfo_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineReportInfo_CompType_descriptor_;
}
bool MachineReportInfo_CompType_IsValid(int value) {
  switch(value) {
    case 62:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MachineReportInfo_CompType MachineReportInfo::COMP_ID;
const MachineReportInfo_CompType MachineReportInfo::MSG_TYPE;
const MachineReportInfo_CompType MachineReportInfo::CompType_MIN;
const MachineReportInfo_CompType MachineReportInfo::CompType_MAX;
const int MachineReportInfo::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MachineReportInfo::kReportedMachinesFieldNumber;
const int MachineReportInfo::kTeamColorFieldNumber;
#endif  // !_MSC_VER

MachineReportInfo::MachineReportInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MachineReportInfo::InitAsDefaultInstance() {
}

MachineReportInfo::MachineReportInfo(const MachineReportInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MachineReportInfo::SharedCtor() {
  _cached_size_ = 0;
  team_color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineReportInfo::~MachineReportInfo() {
  SharedDtor();
}

void MachineReportInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MachineReportInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineReportInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineReportInfo_descriptor_;
}

const MachineReportInfo& MachineReportInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MachineReport_2eproto();  return *default_instance_;
}

MachineReportInfo* MachineReportInfo::default_instance_ = NULL;

MachineReportInfo* MachineReportInfo::New() const {
  return new MachineReportInfo;
}

void MachineReportInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    team_color_ = 0;
  }
  reported_machines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineReportInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string reported_machines = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reported_machines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reported_machines()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reported_machines(0).data(), this->reported_machines(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reported_machines;
        if (input->ExpectTag(16)) goto parse_team_color;
        break;
      }
      
      // required .llsf_msgs.Team team_color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MachineReportInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string reported_machines = 1;
  for (int i = 0; i < this->reported_machines_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->reported_machines(i).data(), this->reported_machines(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->reported_machines(i), output);
  }
  
  // required .llsf_msgs.Team team_color = 2;
  if (has_team_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MachineReportInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string reported_machines = 1;
  for (int i = 0; i < this->reported_machines_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reported_machines(i).data(), this->reported_machines(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->reported_machines(i), target);
  }
  
  // required .llsf_msgs.Team team_color = 2;
  if (has_team_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MachineReportInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .llsf_msgs.Team team_color = 2;
    if (has_team_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
    }
    
  }
  // repeated string reported_machines = 1;
  total_size += 1 * this->reported_machines_size();
  for (int i = 0; i < this->reported_machines_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reported_machines(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineReportInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineReportInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineReportInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineReportInfo::MergeFrom(const MachineReportInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  reported_machines_.MergeFrom(from.reported_machines_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_team_color()) {
      set_team_color(from.team_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineReportInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineReportInfo::CopyFrom(const MachineReportInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineReportInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void MachineReportInfo::Swap(MachineReportInfo* other) {
  if (other != this) {
    reported_machines_.Swap(&other->reported_machines_);
    std::swap(team_color_, other->team_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineReportInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineReportInfo_descriptor_;
  metadata.reflection = MachineReportInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

// @@protoc_insertion_point(global_scope)
