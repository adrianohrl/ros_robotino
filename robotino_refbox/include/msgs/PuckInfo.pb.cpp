// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PuckInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

namespace {

const ::google::protobuf::Descriptor* Puck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Puck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Puck_CompType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PuckInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PuckInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PuckInfo_CompType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PuckState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PuckInfo_2eproto() {
  protobuf_AddDesc_PuckInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PuckInfo.proto");
  GOOGLE_CHECK(file != NULL);
  Puck_descriptor_ = file->message_type(0);
  static const int Puck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Puck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Puck, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Puck, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Puck, team_color_),
  };
  Puck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Puck_descriptor_,
      Puck::default_instance_,
      Puck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Puck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Puck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Puck));
  Puck_CompType_descriptor_ = Puck_descriptor_->enum_type(0);
  PuckInfo_descriptor_ = file->message_type(1);
  static const int PuckInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PuckInfo, pucks_),
  };
  PuckInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PuckInfo_descriptor_,
      PuckInfo::default_instance_,
      PuckInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PuckInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PuckInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PuckInfo));
  PuckInfo_CompType_descriptor_ = PuckInfo_descriptor_->enum_type(0);
  PuckState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PuckInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Puck_descriptor_, &Puck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PuckInfo_descriptor_, &PuckInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PuckInfo_2eproto() {
  delete Puck::default_instance_;
  delete Puck_reflection_;
  delete PuckInfo::default_instance_;
  delete PuckInfo_reflection_;
}

void protobuf_AddDesc_PuckInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::llsf_msgs::protobuf_AddDesc_Pose2D_2eproto();
  ::llsf_msgs::protobuf_AddDesc_Team_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016PuckInfo.proto\022\tllsf_msgs\032\014Pose2D.prot"
    "o\032\nTeam.proto\"\245\001\n\004Puck\022\n\n\002id\030\001 \002(\r\022#\n\005st"
    "ate\030\002 \002(\0162\024.llsf_msgs.PuckState\022\037\n\004pose\030"
    "\003 \001(\0132\021.llsf_msgs.Pose2D\022#\n\nteam_color\030\004"
    " \001(\0162\017.llsf_msgs.Team\"&\n\010CompType\022\014\n\007COM"
    "P_ID\020\320\017\022\014\n\010MSG_TYPE\0202\"R\n\010PuckInfo\022\036\n\005puc"
    "ks\030\001 \003(\0132\017.llsf_msgs.Puck\"&\n\010CompType\022\014\n"
    "\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\0203*W\n\tPuckState\022\006"
    "\n\002S0\020\000\022\006\n\002S1\020\001\022\006\n\002S2\020\002\022\006\n\002P1\020\004\022\006\n\002P2\020\005\022\006"
    "\n\002P3\020\006\022\014\n\010CONSUMED\020\007\022\014\n\010FINISHED\020\010B1\n\037or"
    "g.robocup_logistics.llsf_msgsB\016PuckInfoP"
    "rotos", 445);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PuckInfo.proto", &protobuf_RegisterTypes);
  Puck::default_instance_ = new Puck();
  PuckInfo::default_instance_ = new PuckInfo();
  Puck::default_instance_->InitAsDefaultInstance();
  PuckInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PuckInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PuckInfo_2eproto {
  StaticDescriptorInitializer_PuckInfo_2eproto() {
    protobuf_AddDesc_PuckInfo_2eproto();
  }
} static_descriptor_initializer_PuckInfo_2eproto_;

const ::google::protobuf::EnumDescriptor* PuckState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PuckState_descriptor_;
}
bool PuckState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Puck_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Puck_CompType_descriptor_;
}
bool Puck_CompType_IsValid(int value) {
  switch(value) {
    case 50:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Puck_CompType Puck::COMP_ID;
const Puck_CompType Puck::MSG_TYPE;
const Puck_CompType Puck::CompType_MIN;
const Puck_CompType Puck::CompType_MAX;
const int Puck::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Puck::kIdFieldNumber;
const int Puck::kStateFieldNumber;
const int Puck::kPoseFieldNumber;
const int Puck::kTeamColorFieldNumber;
#endif  // !_MSC_VER

Puck::Puck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Puck::InitAsDefaultInstance() {
  pose_ = const_cast< ::llsf_msgs::Pose2D*>(&::llsf_msgs::Pose2D::default_instance());
}

Puck::Puck(const Puck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Puck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  state_ = 0;
  pose_ = NULL;
  team_color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Puck::~Puck() {
  SharedDtor();
}

void Puck::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void Puck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Puck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Puck_descriptor_;
}

const Puck& Puck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PuckInfo_2eproto();  return *default_instance_;
}

Puck* Puck::default_instance_ = NULL;

Puck* Puck::New() const {
  return new Puck;
}

void Puck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    state_ = 0;
    if (has_pose()) {
      if (pose_ != NULL) pose_->::llsf_msgs::Pose2D::Clear();
    }
    team_color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Puck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .llsf_msgs.PuckState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::PuckState_IsValid(value)) {
            set_state(static_cast< llsf_msgs::PuckState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pose;
        break;
      }
      
      // optional .llsf_msgs.Pose2D pose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_color;
        break;
      }
      
      // optional .llsf_msgs.Team team_color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Puck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .llsf_msgs.PuckState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // optional .llsf_msgs.Pose2D pose = 3;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pose(), output);
  }
  
  // optional .llsf_msgs.Team team_color = 4;
  if (has_team_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team_color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Puck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .llsf_msgs.PuckState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // optional .llsf_msgs.Pose2D pose = 3;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pose(), target);
  }
  
  // optional .llsf_msgs.Team team_color = 4;
  if (has_team_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team_color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Puck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .llsf_msgs.PuckState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional .llsf_msgs.Pose2D pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }
    
    // optional .llsf_msgs.Team team_color = 4;
    if (has_team_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Puck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Puck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Puck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Puck::MergeFrom(const Puck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_pose()) {
      mutable_pose()->::llsf_msgs::Pose2D::MergeFrom(from.pose());
    }
    if (from.has_team_color()) {
      set_team_color(from.team_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Puck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Puck::CopyFrom(const Puck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Puck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void Puck::Swap(Puck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(pose_, other->pose_);
    std::swap(team_color_, other->team_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Puck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Puck_descriptor_;
  metadata.reflection = Puck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PuckInfo_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PuckInfo_CompType_descriptor_;
}
bool PuckInfo_CompType_IsValid(int value) {
  switch(value) {
    case 51:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PuckInfo_CompType PuckInfo::COMP_ID;
const PuckInfo_CompType PuckInfo::MSG_TYPE;
const PuckInfo_CompType PuckInfo::CompType_MIN;
const PuckInfo_CompType PuckInfo::CompType_MAX;
const int PuckInfo::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PuckInfo::kPucksFieldNumber;
#endif  // !_MSC_VER

PuckInfo::PuckInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PuckInfo::InitAsDefaultInstance() {
}

PuckInfo::PuckInfo(const PuckInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PuckInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PuckInfo::~PuckInfo() {
  SharedDtor();
}

void PuckInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PuckInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PuckInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PuckInfo_descriptor_;
}

const PuckInfo& PuckInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PuckInfo_2eproto();  return *default_instance_;
}

PuckInfo* PuckInfo::default_instance_ = NULL;

PuckInfo* PuckInfo::New() const {
  return new PuckInfo;
}

void PuckInfo::Clear() {
  pucks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PuckInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .llsf_msgs.Puck pucks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pucks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pucks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pucks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PuckInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .llsf_msgs.Puck pucks = 1;
  for (int i = 0; i < this->pucks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pucks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PuckInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .llsf_msgs.Puck pucks = 1;
  for (int i = 0; i < this->pucks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pucks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PuckInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .llsf_msgs.Puck pucks = 1;
  total_size += 1 * this->pucks_size();
  for (int i = 0; i < this->pucks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pucks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PuckInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PuckInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PuckInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PuckInfo::MergeFrom(const PuckInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pucks_.MergeFrom(from.pucks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PuckInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PuckInfo::CopyFrom(const PuckInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PuckInfo::IsInitialized() const {
  
  for (int i = 0; i < pucks_size(); i++) {
    if (!this->pucks(i).IsInitialized()) return false;
  }
  return true;
}

void PuckInfo::Swap(PuckInfo* other) {
  if (other != this) {
    pucks_.Swap(&other->pucks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PuckInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PuckInfo_descriptor_;
  metadata.reflection = PuckInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

// @@protoc_insertion_point(global_scope)
