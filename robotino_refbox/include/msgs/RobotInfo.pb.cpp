// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RobotInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

namespace {

const ::google::protobuf::Descriptor* Robot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Robot_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Robot_CompType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RobotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RobotInfo_CompType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RobotState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RobotInfo_2eproto() {
  protobuf_AddDesc_RobotInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RobotInfo.proto");
  GOOGLE_CHECK(file != NULL);
  Robot_descriptor_ = file->message_type(0);
  static const int Robot_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, team_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, last_seen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, vision_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, maintenance_time_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, maintenance_cycles_),
  };
  Robot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Robot_descriptor_,
      Robot::default_instance_,
      Robot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Robot));
  Robot_CompType_descriptor_ = Robot_descriptor_->enum_type(0);
  RobotInfo_descriptor_ = file->message_type(1);
  static const int RobotInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, robots_),
  };
  RobotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotInfo_descriptor_,
      RobotInfo::default_instance_,
      RobotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotInfo));
  RobotInfo_CompType_descriptor_ = RobotInfo_descriptor_->enum_type(0);
  RobotState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RobotInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Robot_descriptor_, &Robot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotInfo_descriptor_, &RobotInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RobotInfo_2eproto() {
  delete Robot::default_instance_;
  delete Robot_reflection_;
  delete RobotInfo::default_instance_;
  delete RobotInfo_reflection_;
}

void protobuf_AddDesc_RobotInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::llsf_msgs::protobuf_AddDesc_Time_2eproto();
  ::llsf_msgs::protobuf_AddDesc_Pose2D_2eproto();
  ::llsf_msgs::protobuf_AddDesc_Team_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017RobotInfo.proto\022\tllsf_msgs\032\nTime.proto"
    "\032\014Pose2D.proto\032\nTeam.proto\"\344\002\n\005Robot\022\014\n\004"
    "name\030\001 \002(\t\022\014\n\004team\030\002 \002(\t\022#\n\nteam_color\030\014"
    " \002(\0162\017.llsf_msgs.Team\022\016\n\006number\030\007 \002(\r\022\014\n"
    "\004host\030\003 \002(\t\022\"\n\tlast_seen\030\004 \002(\0132\017.llsf_ms"
    "gs.Time\022\037\n\004pose\030\006 \001(\0132\021.llsf_msgs.Pose2D"
    "\022&\n\013vision_pose\030\013 \001(\0132\021.llsf_msgs.Pose2D"
    "\022$\n\005state\030\010 \001(\0162\025.llsf_msgs.RobotState\022%"
    "\n\032maintenance_time_remaining\030\t \001(\002:\0010\022\032\n"
    "\022maintenance_cycles\030\n \001(\r\"&\n\010CompType\022\014\n"
    "\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020\037\"U\n\tRobotInfo\022 "
    "\n\006robots\030\001 \003(\0132\020.llsf_msgs.Robot\"&\n\010Comp"
    "Type\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020\036*;\n\nRobo"
    "tState\022\n\n\006ACTIVE\020\001\022\017\n\013MAINTENANCE\020\002\022\020\n\014D"
    "ISQUALIFIED\020\003B2\n\037org.robocup_logistics.l"
    "lsf_msgsB\017RobotInfoProtos", 625);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RobotInfo.proto", &protobuf_RegisterTypes);
  Robot::default_instance_ = new Robot();
  RobotInfo::default_instance_ = new RobotInfo();
  Robot::default_instance_->InitAsDefaultInstance();
  RobotInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RobotInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RobotInfo_2eproto {
  StaticDescriptorInitializer_RobotInfo_2eproto() {
    protobuf_AddDesc_RobotInfo_2eproto();
  }
} static_descriptor_initializer_RobotInfo_2eproto_;

const ::google::protobuf::EnumDescriptor* RobotState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotState_descriptor_;
}
bool RobotState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Robot_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robot_CompType_descriptor_;
}
bool Robot_CompType_IsValid(int value) {
  switch(value) {
    case 31:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Robot_CompType Robot::COMP_ID;
const Robot_CompType Robot::MSG_TYPE;
const Robot_CompType Robot::CompType_MIN;
const Robot_CompType Robot::CompType_MAX;
const int Robot::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Robot::kNameFieldNumber;
const int Robot::kTeamFieldNumber;
const int Robot::kTeamColorFieldNumber;
const int Robot::kNumberFieldNumber;
const int Robot::kHostFieldNumber;
const int Robot::kLastSeenFieldNumber;
const int Robot::kPoseFieldNumber;
const int Robot::kVisionPoseFieldNumber;
const int Robot::kStateFieldNumber;
const int Robot::kMaintenanceTimeRemainingFieldNumber;
const int Robot::kMaintenanceCyclesFieldNumber;
#endif  // !_MSC_VER

Robot::Robot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Robot::InitAsDefaultInstance() {
  last_seen_ = const_cast< ::llsf_msgs::Time*>(&::llsf_msgs::Time::default_instance());
  pose_ = const_cast< ::llsf_msgs::Pose2D*>(&::llsf_msgs::Pose2D::default_instance());
  vision_pose_ = const_cast< ::llsf_msgs::Pose2D*>(&::llsf_msgs::Pose2D::default_instance());
}

Robot::Robot(const Robot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Robot::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_color_ = 0;
  number_ = 0u;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_seen_ = NULL;
  pose_ = NULL;
  vision_pose_ = NULL;
  state_ = 1;
  maintenance_time_remaining_ = 0;
  maintenance_cycles_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Robot::~Robot() {
  SharedDtor();
}

void Robot::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (team_ != &::google::protobuf::internal::kEmptyString) {
    delete team_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
    delete last_seen_;
    delete pose_;
    delete vision_pose_;
  }
}

void Robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robot_descriptor_;
}

const Robot& Robot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotInfo_2eproto();  return *default_instance_;
}

Robot* Robot::default_instance_ = NULL;

Robot* Robot::New() const {
  return new Robot;
}

void Robot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_team()) {
      if (team_ != &::google::protobuf::internal::kEmptyString) {
        team_->clear();
      }
    }
    team_color_ = 0;
    number_ = 0u;
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    if (has_last_seen()) {
      if (last_seen_ != NULL) last_seen_->::llsf_msgs::Time::Clear();
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::llsf_msgs::Pose2D::Clear();
    }
    if (has_vision_pose()) {
      if (vision_pose_ != NULL) vision_pose_->::llsf_msgs::Pose2D::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    state_ = 1;
    maintenance_time_remaining_ = 0;
    maintenance_cycles_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team;
        break;
      }
      
      // required string team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team().data(), this->team().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_host;
        break;
      }
      
      // required string host = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_last_seen;
        break;
      }
      
      // required .llsf_msgs.Time last_seen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_seen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_seen()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pose;
        break;
      }
      
      // optional .llsf_msgs.Pose2D pose = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_number;
        break;
      }
      
      // required uint32 number = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }
      
      // optional .llsf_msgs.RobotState state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::RobotState_IsValid(value)) {
            set_state(static_cast< llsf_msgs::RobotState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_maintenance_time_remaining;
        break;
      }
      
      // optional float maintenance_time_remaining = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maintenance_time_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maintenance_time_remaining_)));
          set_has_maintenance_time_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_maintenance_cycles;
        break;
      }
      
      // optional uint32 maintenance_cycles = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maintenance_cycles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maintenance_cycles_)));
          set_has_maintenance_cycles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_vision_pose;
        break;
      }
      
      // optional .llsf_msgs.Pose2D vision_pose = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vision_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vision_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_team_color;
        break;
      }
      
      // required .llsf_msgs.Team team_color = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->team(), output);
  }
  
  // required string host = 3;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->host(), output);
  }
  
  // required .llsf_msgs.Time last_seen = 4;
  if (has_last_seen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->last_seen(), output);
  }
  
  // optional .llsf_msgs.Pose2D pose = 6;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pose(), output);
  }
  
  // required uint32 number = 7;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->number(), output);
  }
  
  // optional .llsf_msgs.RobotState state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->state(), output);
  }
  
  // optional float maintenance_time_remaining = 9 [default = 0];
  if (has_maintenance_time_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->maintenance_time_remaining(), output);
  }
  
  // optional uint32 maintenance_cycles = 10;
  if (has_maintenance_cycles()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maintenance_cycles(), output);
  }
  
  // optional .llsf_msgs.Pose2D vision_pose = 11;
  if (has_vision_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vision_pose(), output);
  }
  
  // required .llsf_msgs.Team team_color = 12;
  if (has_team_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->team_color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Robot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team(), target);
  }
  
  // required string host = 3;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->host(), target);
  }
  
  // required .llsf_msgs.Time last_seen = 4;
  if (has_last_seen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->last_seen(), target);
  }
  
  // optional .llsf_msgs.Pose2D pose = 6;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pose(), target);
  }
  
  // required uint32 number = 7;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->number(), target);
  }
  
  // optional .llsf_msgs.RobotState state = 8;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->state(), target);
  }
  
  // optional float maintenance_time_remaining = 9 [default = 0];
  if (has_maintenance_time_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->maintenance_time_remaining(), target);
  }
  
  // optional uint32 maintenance_cycles = 10;
  if (has_maintenance_cycles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maintenance_cycles(), target);
  }
  
  // optional .llsf_msgs.Pose2D vision_pose = 11;
  if (has_vision_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vision_pose(), target);
  }
  
  // required .llsf_msgs.Team team_color = 12;
  if (has_team_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->team_color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Robot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team());
    }
    
    // required .llsf_msgs.Team team_color = 12;
    if (has_team_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
    }
    
    // required uint32 number = 7;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }
    
    // required string host = 3;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required .llsf_msgs.Time last_seen = 4;
    if (has_last_seen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_seen());
    }
    
    // optional .llsf_msgs.Pose2D pose = 6;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }
    
    // optional .llsf_msgs.Pose2D vision_pose = 11;
    if (has_vision_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vision_pose());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .llsf_msgs.RobotState state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional float maintenance_time_remaining = 9 [default = 0];
    if (has_maintenance_time_remaining()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 maintenance_cycles = 10;
    if (has_maintenance_cycles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maintenance_cycles());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Robot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Robot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_team_color()) {
      set_team_color(from.team_color());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_last_seen()) {
      mutable_last_seen()->::llsf_msgs::Time::MergeFrom(from.last_seen());
    }
    if (from.has_pose()) {
      mutable_pose()->::llsf_msgs::Pose2D::MergeFrom(from.pose());
    }
    if (from.has_vision_pose()) {
      mutable_vision_pose()->::llsf_msgs::Pose2D::MergeFrom(from.vision_pose());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_maintenance_time_remaining()) {
      set_maintenance_time_remaining(from.maintenance_time_remaining());
    }
    if (from.has_maintenance_cycles()) {
      set_maintenance_cycles(from.maintenance_cycles());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Robot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_last_seen()) {
    if (!this->last_seen().IsInitialized()) return false;
  }
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (has_vision_pose()) {
    if (!this->vision_pose().IsInitialized()) return false;
  }
  return true;
}

void Robot::Swap(Robot* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(team_, other->team_);
    std::swap(team_color_, other->team_color_);
    std::swap(number_, other->number_);
    std::swap(host_, other->host_);
    std::swap(last_seen_, other->last_seen_);
    std::swap(pose_, other->pose_);
    std::swap(vision_pose_, other->vision_pose_);
    std::swap(state_, other->state_);
    std::swap(maintenance_time_remaining_, other->maintenance_time_remaining_);
    std::swap(maintenance_cycles_, other->maintenance_cycles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Robot_descriptor_;
  metadata.reflection = Robot_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RobotInfo_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotInfo_CompType_descriptor_;
}
bool RobotInfo_CompType_IsValid(int value) {
  switch(value) {
    case 30:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RobotInfo_CompType RobotInfo::COMP_ID;
const RobotInfo_CompType RobotInfo::MSG_TYPE;
const RobotInfo_CompType RobotInfo::CompType_MIN;
const RobotInfo_CompType RobotInfo::CompType_MAX;
const int RobotInfo::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RobotInfo::kRobotsFieldNumber;
#endif  // !_MSC_VER

RobotInfo::RobotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotInfo::InitAsDefaultInstance() {
}

RobotInfo::RobotInfo(const RobotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotInfo::~RobotInfo() {
  SharedDtor();
}

void RobotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotInfo_descriptor_;
}

const RobotInfo& RobotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotInfo_2eproto();  return *default_instance_;
}

RobotInfo* RobotInfo::default_instance_ = NULL;

RobotInfo* RobotInfo::New() const {
  return new RobotInfo;
}

void RobotInfo::Clear() {
  robots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .llsf_msgs.Robot robots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_robots;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .llsf_msgs.Robot robots = 1;
  for (int i = 0; i < this->robots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->robots(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .llsf_msgs.Robot robots = 1;
  for (int i = 0; i < this->robots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->robots(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .llsf_msgs.Robot robots = 1;
  total_size += 1 * this->robots_size();
  for (int i = 0; i < this->robots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotInfo::MergeFrom(const RobotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  robots_.MergeFrom(from.robots_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotInfo::CopyFrom(const RobotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotInfo::IsInitialized() const {
  
  for (int i = 0; i < robots_size(); i++) {
    if (!this->robots(i).IsInitialized()) return false;
  }
  return true;
}

void RobotInfo::Swap(RobotInfo* other) {
  if (other != this) {
    robots_.Swap(&other->robots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotInfo_descriptor_;
  metadata.reflection = RobotInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

// @@protoc_insertion_point(global_scope)
