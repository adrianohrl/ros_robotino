// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Pose2D.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

namespace {

const ::google::protobuf::Descriptor* Pose2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pose2D_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Pose2D_2eproto() {
  protobuf_AddDesc_Pose2D_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Pose2D.proto");
  GOOGLE_CHECK(file != NULL);
  Pose2D_descriptor_ = file->message_type(0);
  static const int Pose2D_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2D, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2D, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2D, ori_),
  };
  Pose2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pose2D_descriptor_,
      Pose2D::default_instance_,
      Pose2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pose2D));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Pose2D_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pose2D_descriptor_, &Pose2D::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Pose2D_2eproto() {
  delete Pose2D::default_instance_;
  delete Pose2D_reflection_;
}

void protobuf_AddDesc_Pose2D_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::llsf_msgs::protobuf_AddDesc_Time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Pose2D.proto\022\tllsf_msgs\032\nTime.proto\"O\n"
    "\006Pose2D\022\"\n\ttimestamp\030\001 \002(\0132\017.llsf_msgs.T"
    "ime\022\t\n\001x\030\002 \002(\002\022\t\n\001y\030\003 \002(\002\022\013\n\003ori\030\004 \002(\002B/"
    "\n\037org.robocup_logistics.llsf_msgsB\014Pose2"
    "DProtos", 167);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Pose2D.proto", &protobuf_RegisterTypes);
  Pose2D::default_instance_ = new Pose2D();
  Pose2D::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Pose2D_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Pose2D_2eproto {
  StaticDescriptorInitializer_Pose2D_2eproto() {
    protobuf_AddDesc_Pose2D_2eproto();
  }
} static_descriptor_initializer_Pose2D_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Pose2D::kTimestampFieldNumber;
const int Pose2D::kXFieldNumber;
const int Pose2D::kYFieldNumber;
const int Pose2D::kOriFieldNumber;
#endif  // !_MSC_VER

Pose2D::Pose2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pose2D::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::llsf_msgs::Time*>(&::llsf_msgs::Time::default_instance());
}

Pose2D::Pose2D(const Pose2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pose2D::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = NULL;
  x_ = 0;
  y_ = 0;
  ori_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pose2D::~Pose2D() {
  SharedDtor();
}

void Pose2D::SharedDtor() {
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void Pose2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pose2D_descriptor_;
}

const Pose2D& Pose2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pose2D_2eproto();  return *default_instance_;
}

Pose2D* Pose2D::default_instance_ = NULL;

Pose2D* Pose2D::New() const {
  return new Pose2D;
}

void Pose2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::llsf_msgs::Time::Clear();
    }
    x_ = 0;
    y_ = 0;
    ori_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pose2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llsf_msgs.Time timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }
      
      // required float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }
      
      // required float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_ori;
        break;
      }
      
      // required float ori = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ori:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ori_)));
          set_has_ori();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pose2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llsf_msgs.Time timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timestamp(), output);
  }
  
  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }
  
  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }
  
  // required float ori = 4;
  if (has_ori()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ori(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pose2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llsf_msgs.Time timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timestamp(), target);
  }
  
  // required float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }
  
  // required float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }
  
  // required float ori = 4;
  if (has_ori()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ori(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pose2D::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llsf_msgs.Time timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }
    
    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float ori = 4;
    if (has_ori()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pose2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pose2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pose2D::MergeFrom(const Pose2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      mutable_timestamp()->::llsf_msgs::Time::MergeFrom(from.timestamp());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_ori()) {
      set_ori(from.ori());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pose2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose2D::CopyFrom(const Pose2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose2D::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_timestamp()) {
    if (!this->timestamp().IsInitialized()) return false;
  }
  return true;
}

void Pose2D::Swap(Pose2D* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(ori_, other->ori_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pose2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pose2D_descriptor_;
  metadata.reflection = Pose2D_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

// @@protoc_insertion_point(global_scope)
