// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AttentionMessage.proto

#ifndef PROTOBUF_AttentionMessage_2eproto__INCLUDED
#define PROTOBUF_AttentionMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Team.pb.h"
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AttentionMessage_2eproto();
void protobuf_AssignDesc_AttentionMessage_2eproto();
void protobuf_ShutdownFile_AttentionMessage_2eproto();

class AttentionMessage;

enum AttentionMessage_CompType {
  AttentionMessage_CompType_COMP_ID = 2000,
  AttentionMessage_CompType_MSG_TYPE = 2
};
bool AttentionMessage_CompType_IsValid(int value);
const AttentionMessage_CompType AttentionMessage_CompType_CompType_MIN = AttentionMessage_CompType_MSG_TYPE;
const AttentionMessage_CompType AttentionMessage_CompType_CompType_MAX = AttentionMessage_CompType_COMP_ID;
const int AttentionMessage_CompType_CompType_ARRAYSIZE = AttentionMessage_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AttentionMessage_CompType_descriptor();
inline const ::std::string& AttentionMessage_CompType_Name(AttentionMessage_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AttentionMessage_CompType_descriptor(), value);
}
inline bool AttentionMessage_CompType_Parse(
    const ::std::string& name, AttentionMessage_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AttentionMessage_CompType>(
    AttentionMessage_CompType_descriptor(), name, value);
}
// ===================================================================

class AttentionMessage : public ::google::protobuf::Message {
 public:
  AttentionMessage();
  virtual ~AttentionMessage();
  
  AttentionMessage(const AttentionMessage& from);
  
  inline AttentionMessage& operator=(const AttentionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttentionMessage& default_instance();
  
  void Swap(AttentionMessage* other);
  
  // implements Message ----------------------------------------------
  
  AttentionMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttentionMessage& from);
  void MergeFrom(const AttentionMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef AttentionMessage_CompType CompType;
  static const CompType COMP_ID = AttentionMessage_CompType_COMP_ID;
  static const CompType MSG_TYPE = AttentionMessage_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return AttentionMessage_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    AttentionMessage_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    AttentionMessage_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    AttentionMessage_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return AttentionMessage_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return AttentionMessage_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return AttentionMessage_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // optional float time_to_show = 2;
  inline bool has_time_to_show() const;
  inline void clear_time_to_show();
  static const int kTimeToShowFieldNumber = 2;
  inline float time_to_show() const;
  inline void set_time_to_show(float value);
  
  // optional .llsf_msgs.Team team_color = 3;
  inline bool has_team_color() const;
  inline void clear_team_color();
  static const int kTeamColorFieldNumber = 3;
  inline llsf_msgs::Team team_color() const;
  inline void set_team_color(llsf_msgs::Team value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.AttentionMessage)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_time_to_show();
  inline void clear_has_time_to_show();
  inline void set_has_team_color();
  inline void clear_has_team_color();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  float time_to_show_;
  int team_color_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AttentionMessage_2eproto();
  friend void protobuf_AssignDesc_AttentionMessage_2eproto();
  friend void protobuf_ShutdownFile_AttentionMessage_2eproto();
  
  void InitAsDefaultInstance();
  static AttentionMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// AttentionMessage

// required string message = 1;
inline bool AttentionMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttentionMessage::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttentionMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttentionMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& AttentionMessage::message() const {
  return *message_;
}
inline void AttentionMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void AttentionMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void AttentionMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AttentionMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* AttentionMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float time_to_show = 2;
inline bool AttentionMessage::has_time_to_show() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttentionMessage::set_has_time_to_show() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttentionMessage::clear_has_time_to_show() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttentionMessage::clear_time_to_show() {
  time_to_show_ = 0;
  clear_has_time_to_show();
}
inline float AttentionMessage::time_to_show() const {
  return time_to_show_;
}
inline void AttentionMessage::set_time_to_show(float value) {
  set_has_time_to_show();
  time_to_show_ = value;
}

// optional .llsf_msgs.Team team_color = 3;
inline bool AttentionMessage::has_team_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttentionMessage::set_has_team_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AttentionMessage::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AttentionMessage::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline llsf_msgs::Team AttentionMessage::team_color() const {
  return static_cast< llsf_msgs::Team >(team_color_);
}
inline void AttentionMessage::set_team_color(llsf_msgs::Team value) {
  GOOGLE_DCHECK(llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::AttentionMessage_CompType>() {
  return ::llsf_msgs::AttentionMessage_CompType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AttentionMessage_2eproto__INCLUDED
