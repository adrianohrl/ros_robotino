// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MachineInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

namespace {

const ::google::protobuf::Descriptor* LightSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LightSpec_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LightSpec_CompType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Machine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Machine_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Machine_CompType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MachineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MachineInfo_CompType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LightColor_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LightState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MachineInfo_2eproto() {
  protobuf_AddDesc_MachineInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MachineInfo.proto");
  GOOGLE_CHECK(file != NULL);
  LightSpec_descriptor_ = file->message_type(0);
  static const int LightSpec_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightSpec, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightSpec, state_),
  };
  LightSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LightSpec_descriptor_,
      LightSpec::default_instance_,
      LightSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LightSpec));
  LightSpec_CompType_descriptor_ = LightSpec_descriptor_->enum_type(0);
  Machine_descriptor_ = file->message_type(1);
  static const int Machine_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, team_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, loaded_with_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, puck_under_rfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, lights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, correctly_reported_),
  };
  Machine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Machine_descriptor_,
      Machine::default_instance_,
      Machine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Machine));
  Machine_CompType_descriptor_ = Machine_descriptor_->enum_type(0);
  MachineInfo_descriptor_ = file->message_type(2);
  static const int MachineInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, machines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, team_color_),
  };
  MachineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineInfo_descriptor_,
      MachineInfo::default_instance_,
      MachineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineInfo));
  MachineInfo_CompType_descriptor_ = MachineInfo_descriptor_->enum_type(0);
  LightColor_descriptor_ = file->enum_type(0);
  LightState_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MachineInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LightSpec_descriptor_, &LightSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Machine_descriptor_, &Machine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineInfo_descriptor_, &MachineInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MachineInfo_2eproto() {
  delete LightSpec::default_instance_;
  delete LightSpec_reflection_;
  delete Machine::default_instance_;
  delete Machine_reflection_;
  delete MachineInfo::default_instance_;
  delete MachineInfo_reflection_;
}

void protobuf_AddDesc_MachineInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::llsf_msgs::protobuf_AddDesc_Pose2D_2eproto();
  ::llsf_msgs::protobuf_AddDesc_PuckInfo_2eproto();
  ::llsf_msgs::protobuf_AddDesc_Team_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021MachineInfo.proto\022\tllsf_msgs\032\014Pose2D.p"
    "roto\032\016PuckInfo.proto\032\nTeam.proto\"\177\n\tLigh"
    "tSpec\022$\n\005color\030\001 \002(\0162\025.llsf_msgs.LightCo"
    "lor\022$\n\005state\030\002 \002(\0162\025.llsf_msgs.LightStat"
    "e\"&\n\010CompType\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020"
    "\n\"\361\002\n\007Machine\022\014\n\004name\030\001 \002(\t\022\014\n\004type\030\002 \001("
    "\t\022#\n\nteam_color\030\n \001(\0162\017.llsf_msgs.Team\022$"
    "\n\006inputs\030\003 \003(\0162\024.llsf_msgs.PuckState\022$\n\006"
    "output\030\004 \001(\0162\024.llsf_msgs.PuckState\022$\n\013lo"
    "aded_with\030\005 \003(\0132\017.llsf_msgs.Puck\022(\n\017puck"
    "_under_rfid\030\006 \001(\0132\017.llsf_msgs.Puck\022$\n\006li"
    "ghts\030\007 \003(\0132\024.llsf_msgs.LightSpec\022\037\n\004pose"
    "\030\010 \001(\0132\021.llsf_msgs.Pose2D\022\032\n\022correctly_r"
    "eported\030\t \001(\010\"&\n\010CompType\022\014\n\007COMP_ID\020\320\017\022"
    "\014\n\010MSG_TYPE\020\014\"\200\001\n\013MachineInfo\022$\n\010machine"
    "s\030\001 \003(\0132\022.llsf_msgs.Machine\022#\n\nteam_colo"
    "r\030\002 \001(\0162\017.llsf_msgs.Team\"&\n\010CompType\022\014\n\007"
    "COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020\r*,\n\nLightColor\022\007"
    "\n\003RED\020\000\022\n\n\006YELLOW\020\001\022\t\n\005GREEN\020\002*(\n\nLightS"
    "tate\022\007\n\003OFF\020\000\022\006\n\002ON\020\001\022\t\n\005BLINK\020\002B4\n\037org."
    "robocup_logistics.llsf_msgsB\021MachineInfo"
    "Protos", 846);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MachineInfo.proto", &protobuf_RegisterTypes);
  LightSpec::default_instance_ = new LightSpec();
  Machine::default_instance_ = new Machine();
  MachineInfo::default_instance_ = new MachineInfo();
  LightSpec::default_instance_->InitAsDefaultInstance();
  Machine::default_instance_->InitAsDefaultInstance();
  MachineInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MachineInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MachineInfo_2eproto {
  StaticDescriptorInitializer_MachineInfo_2eproto() {
    protobuf_AddDesc_MachineInfo_2eproto();
  }
} static_descriptor_initializer_MachineInfo_2eproto_;

const ::google::protobuf::EnumDescriptor* LightColor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightColor_descriptor_;
}
bool LightColor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LightState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightState_descriptor_;
}
bool LightState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LightSpec_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightSpec_CompType_descriptor_;
}
bool LightSpec_CompType_IsValid(int value) {
  switch(value) {
    case 10:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LightSpec_CompType LightSpec::COMP_ID;
const LightSpec_CompType LightSpec::MSG_TYPE;
const LightSpec_CompType LightSpec::CompType_MIN;
const LightSpec_CompType LightSpec::CompType_MAX;
const int LightSpec::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LightSpec::kColorFieldNumber;
const int LightSpec::kStateFieldNumber;
#endif  // !_MSC_VER

LightSpec::LightSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LightSpec::InitAsDefaultInstance() {
}

LightSpec::LightSpec(const LightSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LightSpec::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LightSpec::~LightSpec() {
  SharedDtor();
}

void LightSpec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LightSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LightSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightSpec_descriptor_;
}

const LightSpec& LightSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MachineInfo_2eproto();  return *default_instance_;
}

LightSpec* LightSpec::default_instance_ = NULL;

LightSpec* LightSpec::New() const {
  return new LightSpec;
}

void LightSpec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    color_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LightSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llsf_msgs.LightColor color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::LightColor_IsValid(value)) {
            set_color(static_cast< llsf_msgs::LightColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .llsf_msgs.LightState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::LightState_IsValid(value)) {
            set_state(static_cast< llsf_msgs::LightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LightSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llsf_msgs.LightColor color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }
  
  // required .llsf_msgs.LightState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LightSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llsf_msgs.LightColor color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }
  
  // required .llsf_msgs.LightState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LightSpec::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llsf_msgs.LightColor color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }
    
    // required .llsf_msgs.LightState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LightSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LightSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LightSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LightSpec::MergeFrom(const LightSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LightSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightSpec::CopyFrom(const LightSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightSpec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LightSpec::Swap(LightSpec* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LightSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LightSpec_descriptor_;
  metadata.reflection = LightSpec_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Machine_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Machine_CompType_descriptor_;
}
bool Machine_CompType_IsValid(int value) {
  switch(value) {
    case 12:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Machine_CompType Machine::COMP_ID;
const Machine_CompType Machine::MSG_TYPE;
const Machine_CompType Machine::CompType_MIN;
const Machine_CompType Machine::CompType_MAX;
const int Machine::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Machine::kNameFieldNumber;
const int Machine::kTypeFieldNumber;
const int Machine::kTeamColorFieldNumber;
const int Machine::kInputsFieldNumber;
const int Machine::kOutputFieldNumber;
const int Machine::kLoadedWithFieldNumber;
const int Machine::kPuckUnderRfidFieldNumber;
const int Machine::kLightsFieldNumber;
const int Machine::kPoseFieldNumber;
const int Machine::kCorrectlyReportedFieldNumber;
#endif  // !_MSC_VER

Machine::Machine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Machine::InitAsDefaultInstance() {
  puck_under_rfid_ = const_cast< ::llsf_msgs::Puck*>(&::llsf_msgs::Puck::default_instance());
  pose_ = const_cast< ::llsf_msgs::Pose2D*>(&::llsf_msgs::Pose2D::default_instance());
}

Machine::Machine(const Machine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Machine::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_color_ = 0;
  output_ = 0;
  puck_under_rfid_ = NULL;
  pose_ = NULL;
  correctly_reported_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Machine::~Machine() {
  SharedDtor();
}

void Machine::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete puck_under_rfid_;
    delete pose_;
  }
}

void Machine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Machine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Machine_descriptor_;
}

const Machine& Machine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MachineInfo_2eproto();  return *default_instance_;
}

Machine* Machine::default_instance_ = NULL;

Machine* Machine::New() const {
  return new Machine;
}

void Machine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    team_color_ = 0;
    output_ = 0;
    if (has_puck_under_rfid()) {
      if (puck_under_rfid_ != NULL) puck_under_rfid_->::llsf_msgs::Puck::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pose()) {
      if (pose_ != NULL) pose_->::llsf_msgs::Pose2D::Clear();
    }
    correctly_reported_ = false;
  }
  inputs_.Clear();
  loaded_with_.Clear();
  lights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Machine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inputs;
        break;
      }
      
      // repeated .llsf_msgs.PuckState inputs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputs:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::PuckState_IsValid(value)) {
            add_inputs(static_cast< llsf_msgs::PuckState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &llsf_msgs::PuckState_IsValid,
                 this->mutable_inputs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inputs;
        if (input->ExpectTag(32)) goto parse_output;
        break;
      }
      
      // optional .llsf_msgs.PuckState output = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_output:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::PuckState_IsValid(value)) {
            set_output(static_cast< llsf_msgs::PuckState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_loaded_with;
        break;
      }
      
      // repeated .llsf_msgs.Puck loaded_with = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loaded_with:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loaded_with()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_loaded_with;
        if (input->ExpectTag(50)) goto parse_puck_under_rfid;
        break;
      }
      
      // optional .llsf_msgs.Puck puck_under_rfid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_puck_under_rfid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_puck_under_rfid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_lights;
        break;
      }
      
      // repeated .llsf_msgs.LightSpec lights = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_lights;
        if (input->ExpectTag(66)) goto parse_pose;
        break;
      }
      
      // optional .llsf_msgs.Pose2D pose = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_correctly_reported;
        break;
      }
      
      // optional bool correctly_reported = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_correctly_reported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correctly_reported_)));
          set_has_correctly_reported();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_team_color;
        break;
      }
      
      // optional .llsf_msgs.Team team_color = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Machine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }
  
  // repeated .llsf_msgs.PuckState inputs = 3;
  for (int i = 0; i < this->inputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->inputs(i), output);
  }
  
  // optional .llsf_msgs.PuckState output = 4;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->output(), output);
  }
  
  // repeated .llsf_msgs.Puck loaded_with = 5;
  for (int i = 0; i < this->loaded_with_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->loaded_with(i), output);
  }
  
  // optional .llsf_msgs.Puck puck_under_rfid = 6;
  if (has_puck_under_rfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->puck_under_rfid(), output);
  }
  
  // repeated .llsf_msgs.LightSpec lights = 7;
  for (int i = 0; i < this->lights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->lights(i), output);
  }
  
  // optional .llsf_msgs.Pose2D pose = 8;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pose(), output);
  }
  
  // optional bool correctly_reported = 9;
  if (has_correctly_reported()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->correctly_reported(), output);
  }
  
  // optional .llsf_msgs.Team team_color = 10;
  if (has_team_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->team_color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Machine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }
  
  // repeated .llsf_msgs.PuckState inputs = 3;
  for (int i = 0; i < this->inputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->inputs(i), target);
  }
  
  // optional .llsf_msgs.PuckState output = 4;
  if (has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->output(), target);
  }
  
  // repeated .llsf_msgs.Puck loaded_with = 5;
  for (int i = 0; i < this->loaded_with_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->loaded_with(i), target);
  }
  
  // optional .llsf_msgs.Puck puck_under_rfid = 6;
  if (has_puck_under_rfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->puck_under_rfid(), target);
  }
  
  // repeated .llsf_msgs.LightSpec lights = 7;
  for (int i = 0; i < this->lights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->lights(i), target);
  }
  
  // optional .llsf_msgs.Pose2D pose = 8;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pose(), target);
  }
  
  // optional bool correctly_reported = 9;
  if (has_correctly_reported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->correctly_reported(), target);
  }
  
  // optional .llsf_msgs.Team team_color = 10;
  if (has_team_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->team_color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Machine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional .llsf_msgs.Team team_color = 10;
    if (has_team_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
    }
    
    // optional .llsf_msgs.PuckState output = 4;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output());
    }
    
    // optional .llsf_msgs.Puck puck_under_rfid = 6;
    if (has_puck_under_rfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->puck_under_rfid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .llsf_msgs.Pose2D pose = 8;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }
    
    // optional bool correctly_reported = 9;
    if (has_correctly_reported()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .llsf_msgs.PuckState inputs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->inputs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->inputs(i));
    }
    total_size += 1 * this->inputs_size() + data_size;
  }
  
  // repeated .llsf_msgs.Puck loaded_with = 5;
  total_size += 1 * this->loaded_with_size();
  for (int i = 0; i < this->loaded_with_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loaded_with(i));
  }
  
  // repeated .llsf_msgs.LightSpec lights = 7;
  total_size += 1 * this->lights_size();
  for (int i = 0; i < this->lights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lights(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Machine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Machine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Machine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Machine::MergeFrom(const Machine& from) {
  GOOGLE_CHECK_NE(&from, this);
  inputs_.MergeFrom(from.inputs_);
  loaded_with_.MergeFrom(from.loaded_with_);
  lights_.MergeFrom(from.lights_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_team_color()) {
      set_team_color(from.team_color());
    }
    if (from.has_output()) {
      set_output(from.output());
    }
    if (from.has_puck_under_rfid()) {
      mutable_puck_under_rfid()->::llsf_msgs::Puck::MergeFrom(from.puck_under_rfid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pose()) {
      mutable_pose()->::llsf_msgs::Pose2D::MergeFrom(from.pose());
    }
    if (from.has_correctly_reported()) {
      set_correctly_reported(from.correctly_reported());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Machine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Machine::CopyFrom(const Machine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Machine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < loaded_with_size(); i++) {
    if (!this->loaded_with(i).IsInitialized()) return false;
  }
  if (has_puck_under_rfid()) {
    if (!this->puck_under_rfid().IsInitialized()) return false;
  }
  for (int i = 0; i < lights_size(); i++) {
    if (!this->lights(i).IsInitialized()) return false;
  }
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void Machine::Swap(Machine* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(team_color_, other->team_color_);
    inputs_.Swap(&other->inputs_);
    std::swap(output_, other->output_);
    loaded_with_.Swap(&other->loaded_with_);
    std::swap(puck_under_rfid_, other->puck_under_rfid_);
    lights_.Swap(&other->lights_);
    std::swap(pose_, other->pose_);
    std::swap(correctly_reported_, other->correctly_reported_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Machine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Machine_descriptor_;
  metadata.reflection = Machine_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MachineInfo_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineInfo_CompType_descriptor_;
}
bool MachineInfo_CompType_IsValid(int value) {
  switch(value) {
    case 13:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MachineInfo_CompType MachineInfo::COMP_ID;
const MachineInfo_CompType MachineInfo::MSG_TYPE;
const MachineInfo_CompType MachineInfo::CompType_MIN;
const MachineInfo_CompType MachineInfo::CompType_MAX;
const int MachineInfo::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MachineInfo::kMachinesFieldNumber;
const int MachineInfo::kTeamColorFieldNumber;
#endif  // !_MSC_VER

MachineInfo::MachineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MachineInfo::InitAsDefaultInstance() {
}

MachineInfo::MachineInfo(const MachineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MachineInfo::SharedCtor() {
  _cached_size_ = 0;
  team_color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineInfo::~MachineInfo() {
  SharedDtor();
}

void MachineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MachineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineInfo_descriptor_;
}

const MachineInfo& MachineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MachineInfo_2eproto();  return *default_instance_;
}

MachineInfo* MachineInfo::default_instance_ = NULL;

MachineInfo* MachineInfo::New() const {
  return new MachineInfo;
}

void MachineInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    team_color_ = 0;
  }
  machines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .llsf_msgs.Machine machines = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_machines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_machines;
        if (input->ExpectTag(16)) goto parse_team_color;
        break;
      }
      
      // optional .llsf_msgs.Team team_color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MachineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .llsf_msgs.Machine machines = 1;
  for (int i = 0; i < this->machines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machines(i), output);
  }
  
  // optional .llsf_msgs.Team team_color = 2;
  if (has_team_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MachineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .llsf_msgs.Machine machines = 1;
  for (int i = 0; i < this->machines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machines(i), target);
  }
  
  // optional .llsf_msgs.Team team_color = 2;
  if (has_team_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MachineInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .llsf_msgs.Team team_color = 2;
    if (has_team_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
    }
    
  }
  // repeated .llsf_msgs.Machine machines = 1;
  total_size += 1 * this->machines_size();
  for (int i = 0; i < this->machines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->machines(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineInfo::MergeFrom(const MachineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  machines_.MergeFrom(from.machines_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_team_color()) {
      set_team_color(from.team_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineInfo::CopyFrom(const MachineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineInfo::IsInitialized() const {
  
  for (int i = 0; i < machines_size(); i++) {
    if (!this->machines(i).IsInitialized()) return false;
  }
  return true;
}

void MachineInfo::Swap(MachineInfo* other) {
  if (other != this) {
    machines_.Swap(&other->machines_);
    std::swap(team_color_, other->team_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineInfo_descriptor_;
  metadata.reflection = MachineInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

// @@protoc_insertion_point(global_scope)
