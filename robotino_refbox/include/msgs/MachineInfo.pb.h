// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MachineInfo.proto

#ifndef PROTOBUF_MachineInfo_2eproto__INCLUDED
#define PROTOBUF_MachineInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Pose2D.pb.h"
#include "PuckInfo.pb.h"
#include "Team.pb.h"
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MachineInfo_2eproto();
void protobuf_AssignDesc_MachineInfo_2eproto();
void protobuf_ShutdownFile_MachineInfo_2eproto();

class LightSpec;
class Machine;
class MachineInfo;

enum LightSpec_CompType {
  LightSpec_CompType_COMP_ID = 2000,
  LightSpec_CompType_MSG_TYPE = 10
};
bool LightSpec_CompType_IsValid(int value);
const LightSpec_CompType LightSpec_CompType_CompType_MIN = LightSpec_CompType_MSG_TYPE;
const LightSpec_CompType LightSpec_CompType_CompType_MAX = LightSpec_CompType_COMP_ID;
const int LightSpec_CompType_CompType_ARRAYSIZE = LightSpec_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LightSpec_CompType_descriptor();
inline const ::std::string& LightSpec_CompType_Name(LightSpec_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LightSpec_CompType_descriptor(), value);
}
inline bool LightSpec_CompType_Parse(
    const ::std::string& name, LightSpec_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LightSpec_CompType>(
    LightSpec_CompType_descriptor(), name, value);
}
enum Machine_CompType {
  Machine_CompType_COMP_ID = 2000,
  Machine_CompType_MSG_TYPE = 12
};
bool Machine_CompType_IsValid(int value);
const Machine_CompType Machine_CompType_CompType_MIN = Machine_CompType_MSG_TYPE;
const Machine_CompType Machine_CompType_CompType_MAX = Machine_CompType_COMP_ID;
const int Machine_CompType_CompType_ARRAYSIZE = Machine_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Machine_CompType_descriptor();
inline const ::std::string& Machine_CompType_Name(Machine_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Machine_CompType_descriptor(), value);
}
inline bool Machine_CompType_Parse(
    const ::std::string& name, Machine_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Machine_CompType>(
    Machine_CompType_descriptor(), name, value);
}
enum MachineInfo_CompType {
  MachineInfo_CompType_COMP_ID = 2000,
  MachineInfo_CompType_MSG_TYPE = 13
};
bool MachineInfo_CompType_IsValid(int value);
const MachineInfo_CompType MachineInfo_CompType_CompType_MIN = MachineInfo_CompType_MSG_TYPE;
const MachineInfo_CompType MachineInfo_CompType_CompType_MAX = MachineInfo_CompType_COMP_ID;
const int MachineInfo_CompType_CompType_ARRAYSIZE = MachineInfo_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MachineInfo_CompType_descriptor();
inline const ::std::string& MachineInfo_CompType_Name(MachineInfo_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MachineInfo_CompType_descriptor(), value);
}
inline bool MachineInfo_CompType_Parse(
    const ::std::string& name, MachineInfo_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MachineInfo_CompType>(
    MachineInfo_CompType_descriptor(), name, value);
}
enum LightColor {
  RED = 0,
  YELLOW = 1,
  GREEN = 2
};
bool LightColor_IsValid(int value);
const LightColor LightColor_MIN = RED;
const LightColor LightColor_MAX = GREEN;
const int LightColor_ARRAYSIZE = LightColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* LightColor_descriptor();
inline const ::std::string& LightColor_Name(LightColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    LightColor_descriptor(), value);
}
inline bool LightColor_Parse(
    const ::std::string& name, LightColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LightColor>(
    LightColor_descriptor(), name, value);
}
enum LightState {
  OFF = 0,
  ON = 1,
  BLINK = 2
};
bool LightState_IsValid(int value);
const LightState LightState_MIN = OFF;
const LightState LightState_MAX = BLINK;
const int LightState_ARRAYSIZE = LightState_MAX + 1;

const ::google::protobuf::EnumDescriptor* LightState_descriptor();
inline const ::std::string& LightState_Name(LightState value) {
  return ::google::protobuf::internal::NameOfEnum(
    LightState_descriptor(), value);
}
inline bool LightState_Parse(
    const ::std::string& name, LightState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LightState>(
    LightState_descriptor(), name, value);
}
// ===================================================================

class LightSpec : public ::google::protobuf::Message {
 public:
  LightSpec();
  virtual ~LightSpec();
  
  LightSpec(const LightSpec& from);
  
  inline LightSpec& operator=(const LightSpec& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LightSpec& default_instance();
  
  void Swap(LightSpec* other);
  
  // implements Message ----------------------------------------------
  
  LightSpec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LightSpec& from);
  void MergeFrom(const LightSpec& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LightSpec_CompType CompType;
  static const CompType COMP_ID = LightSpec_CompType_COMP_ID;
  static const CompType MSG_TYPE = LightSpec_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return LightSpec_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    LightSpec_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    LightSpec_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    LightSpec_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return LightSpec_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return LightSpec_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return LightSpec_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .llsf_msgs.LightColor color = 1;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 1;
  inline llsf_msgs::LightColor color() const;
  inline void set_color(llsf_msgs::LightColor value);
  
  // required .llsf_msgs.LightState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline llsf_msgs::LightState state() const;
  inline void set_state(llsf_msgs::LightState value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.LightSpec)
 private:
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_state();
  inline void clear_has_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int color_;
  int state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MachineInfo_2eproto();
  friend void protobuf_AssignDesc_MachineInfo_2eproto();
  friend void protobuf_ShutdownFile_MachineInfo_2eproto();
  
  void InitAsDefaultInstance();
  static LightSpec* default_instance_;
};
// -------------------------------------------------------------------

class Machine : public ::google::protobuf::Message {
 public:
  Machine();
  virtual ~Machine();
  
  Machine(const Machine& from);
  
  inline Machine& operator=(const Machine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Machine& default_instance();
  
  void Swap(Machine* other);
  
  // implements Message ----------------------------------------------
  
  Machine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Machine& from);
  void MergeFrom(const Machine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Machine_CompType CompType;
  static const CompType COMP_ID = Machine_CompType_COMP_ID;
  static const CompType MSG_TYPE = Machine_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return Machine_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    Machine_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    Machine_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    Machine_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return Machine_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return Machine_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return Machine_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // optional .llsf_msgs.Team team_color = 10;
  inline bool has_team_color() const;
  inline void clear_team_color();
  static const int kTeamColorFieldNumber = 10;
  inline llsf_msgs::Team team_color() const;
  inline void set_team_color(llsf_msgs::Team value);
  
  // repeated .llsf_msgs.PuckState inputs = 3;
  inline int inputs_size() const;
  inline void clear_inputs();
  static const int kInputsFieldNumber = 3;
  inline llsf_msgs::PuckState inputs(int index) const;
  inline void set_inputs(int index, llsf_msgs::PuckState value);
  inline void add_inputs(llsf_msgs::PuckState value);
  inline const ::google::protobuf::RepeatedField<int>& inputs() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_inputs();
  
  // optional .llsf_msgs.PuckState output = 4;
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 4;
  inline llsf_msgs::PuckState output() const;
  inline void set_output(llsf_msgs::PuckState value);
  
  // repeated .llsf_msgs.Puck loaded_with = 5;
  inline int loaded_with_size() const;
  inline void clear_loaded_with();
  static const int kLoadedWithFieldNumber = 5;
  inline const ::llsf_msgs::Puck& loaded_with(int index) const;
  inline ::llsf_msgs::Puck* mutable_loaded_with(int index);
  inline ::llsf_msgs::Puck* add_loaded_with();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Puck >&
      loaded_with() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Puck >*
      mutable_loaded_with();
  
  // optional .llsf_msgs.Puck puck_under_rfid = 6;
  inline bool has_puck_under_rfid() const;
  inline void clear_puck_under_rfid();
  static const int kPuckUnderRfidFieldNumber = 6;
  inline const ::llsf_msgs::Puck& puck_under_rfid() const;
  inline ::llsf_msgs::Puck* mutable_puck_under_rfid();
  inline ::llsf_msgs::Puck* release_puck_under_rfid();
  
  // repeated .llsf_msgs.LightSpec lights = 7;
  inline int lights_size() const;
  inline void clear_lights();
  static const int kLightsFieldNumber = 7;
  inline const ::llsf_msgs::LightSpec& lights(int index) const;
  inline ::llsf_msgs::LightSpec* mutable_lights(int index);
  inline ::llsf_msgs::LightSpec* add_lights();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >&
      lights() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >*
      mutable_lights();
  
  // optional .llsf_msgs.Pose2D pose = 8;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 8;
  inline const ::llsf_msgs::Pose2D& pose() const;
  inline ::llsf_msgs::Pose2D* mutable_pose();
  inline ::llsf_msgs::Pose2D* release_pose();
  
  // optional bool correctly_reported = 9;
  inline bool has_correctly_reported() const;
  inline void clear_correctly_reported();
  static const int kCorrectlyReportedFieldNumber = 9;
  inline bool correctly_reported() const;
  inline void set_correctly_reported(bool value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.Machine)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_team_color();
  inline void clear_has_team_color();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_puck_under_rfid();
  inline void clear_has_puck_under_rfid();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_correctly_reported();
  inline void clear_has_correctly_reported();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* type_;
  ::google::protobuf::RepeatedField<int> inputs_;
  int team_color_;
  int output_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Puck > loaded_with_;
  ::llsf_msgs::Puck* puck_under_rfid_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec > lights_;
  ::llsf_msgs::Pose2D* pose_;
  bool correctly_reported_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_MachineInfo_2eproto();
  friend void protobuf_AssignDesc_MachineInfo_2eproto();
  friend void protobuf_ShutdownFile_MachineInfo_2eproto();
  
  void InitAsDefaultInstance();
  static Machine* default_instance_;
};
// -------------------------------------------------------------------

class MachineInfo : public ::google::protobuf::Message {
 public:
  MachineInfo();
  virtual ~MachineInfo();
  
  MachineInfo(const MachineInfo& from);
  
  inline MachineInfo& operator=(const MachineInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineInfo& default_instance();
  
  void Swap(MachineInfo* other);
  
  // implements Message ----------------------------------------------
  
  MachineInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MachineInfo& from);
  void MergeFrom(const MachineInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MachineInfo_CompType CompType;
  static const CompType COMP_ID = MachineInfo_CompType_COMP_ID;
  static const CompType MSG_TYPE = MachineInfo_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return MachineInfo_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    MachineInfo_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    MachineInfo_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    MachineInfo_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return MachineInfo_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return MachineInfo_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return MachineInfo_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .llsf_msgs.Machine machines = 1;
  inline int machines_size() const;
  inline void clear_machines();
  static const int kMachinesFieldNumber = 1;
  inline const ::llsf_msgs::Machine& machines(int index) const;
  inline ::llsf_msgs::Machine* mutable_machines(int index);
  inline ::llsf_msgs::Machine* add_machines();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Machine >&
      machines() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Machine >*
      mutable_machines();
  
  // optional .llsf_msgs.Team team_color = 2;
  inline bool has_team_color() const;
  inline void clear_team_color();
  static const int kTeamColorFieldNumber = 2;
  inline llsf_msgs::Team team_color() const;
  inline void set_team_color(llsf_msgs::Team value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.MachineInfo)
 private:
  inline void set_has_team_color();
  inline void clear_has_team_color();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Machine > machines_;
  int team_color_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MachineInfo_2eproto();
  friend void protobuf_AssignDesc_MachineInfo_2eproto();
  friend void protobuf_ShutdownFile_MachineInfo_2eproto();
  
  void InitAsDefaultInstance();
  static MachineInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// LightSpec

// required .llsf_msgs.LightColor color = 1;
inline bool LightSpec::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LightSpec::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LightSpec::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LightSpec::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline llsf_msgs::LightColor LightSpec::color() const {
  return static_cast< llsf_msgs::LightColor >(color_);
}
inline void LightSpec::set_color(llsf_msgs::LightColor value) {
  GOOGLE_DCHECK(llsf_msgs::LightColor_IsValid(value));
  set_has_color();
  color_ = value;
}

// required .llsf_msgs.LightState state = 2;
inline bool LightSpec::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LightSpec::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LightSpec::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LightSpec::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline llsf_msgs::LightState LightSpec::state() const {
  return static_cast< llsf_msgs::LightState >(state_);
}
inline void LightSpec::set_state(llsf_msgs::LightState value) {
  GOOGLE_DCHECK(llsf_msgs::LightState_IsValid(value));
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// Machine

// required string name = 1;
inline bool Machine::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Machine::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Machine::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Machine::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Machine::name() const {
  return *name_;
}
inline void Machine::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Machine::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Machine::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Machine::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Machine::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string type = 2;
inline bool Machine::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Machine::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Machine::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Machine::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Machine::type() const {
  return *type_;
}
inline void Machine::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Machine::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Machine::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Machine::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* Machine::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .llsf_msgs.Team team_color = 10;
inline bool Machine::has_team_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Machine::set_has_team_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Machine::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Machine::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline llsf_msgs::Team Machine::team_color() const {
  return static_cast< llsf_msgs::Team >(team_color_);
}
inline void Machine::set_team_color(llsf_msgs::Team value) {
  GOOGLE_DCHECK(llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
}

// repeated .llsf_msgs.PuckState inputs = 3;
inline int Machine::inputs_size() const {
  return inputs_.size();
}
inline void Machine::clear_inputs() {
  inputs_.Clear();
}
inline llsf_msgs::PuckState Machine::inputs(int index) const {
  return static_cast< llsf_msgs::PuckState >(inputs_.Get(index));
}
inline void Machine::set_inputs(int index, llsf_msgs::PuckState value) {
  GOOGLE_DCHECK(llsf_msgs::PuckState_IsValid(value));
  inputs_.Set(index, value);
}
inline void Machine::add_inputs(llsf_msgs::PuckState value) {
  GOOGLE_DCHECK(llsf_msgs::PuckState_IsValid(value));
  inputs_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
Machine::inputs() const {
  return inputs_;
}
inline ::google::protobuf::RepeatedField<int>*
Machine::mutable_inputs() {
  return &inputs_;
}

// optional .llsf_msgs.PuckState output = 4;
inline bool Machine::has_output() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Machine::set_has_output() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Machine::clear_has_output() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Machine::clear_output() {
  output_ = 0;
  clear_has_output();
}
inline llsf_msgs::PuckState Machine::output() const {
  return static_cast< llsf_msgs::PuckState >(output_);
}
inline void Machine::set_output(llsf_msgs::PuckState value) {
  GOOGLE_DCHECK(llsf_msgs::PuckState_IsValid(value));
  set_has_output();
  output_ = value;
}

// repeated .llsf_msgs.Puck loaded_with = 5;
inline int Machine::loaded_with_size() const {
  return loaded_with_.size();
}
inline void Machine::clear_loaded_with() {
  loaded_with_.Clear();
}
inline const ::llsf_msgs::Puck& Machine::loaded_with(int index) const {
  return loaded_with_.Get(index);
}
inline ::llsf_msgs::Puck* Machine::mutable_loaded_with(int index) {
  return loaded_with_.Mutable(index);
}
inline ::llsf_msgs::Puck* Machine::add_loaded_with() {
  return loaded_with_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Puck >&
Machine::loaded_with() const {
  return loaded_with_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Puck >*
Machine::mutable_loaded_with() {
  return &loaded_with_;
}

// optional .llsf_msgs.Puck puck_under_rfid = 6;
inline bool Machine::has_puck_under_rfid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Machine::set_has_puck_under_rfid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Machine::clear_has_puck_under_rfid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Machine::clear_puck_under_rfid() {
  if (puck_under_rfid_ != NULL) puck_under_rfid_->::llsf_msgs::Puck::Clear();
  clear_has_puck_under_rfid();
}
inline const ::llsf_msgs::Puck& Machine::puck_under_rfid() const {
  return puck_under_rfid_ != NULL ? *puck_under_rfid_ : *default_instance_->puck_under_rfid_;
}
inline ::llsf_msgs::Puck* Machine::mutable_puck_under_rfid() {
  set_has_puck_under_rfid();
  if (puck_under_rfid_ == NULL) puck_under_rfid_ = new ::llsf_msgs::Puck;
  return puck_under_rfid_;
}
inline ::llsf_msgs::Puck* Machine::release_puck_under_rfid() {
  clear_has_puck_under_rfid();
  ::llsf_msgs::Puck* temp = puck_under_rfid_;
  puck_under_rfid_ = NULL;
  return temp;
}

// repeated .llsf_msgs.LightSpec lights = 7;
inline int Machine::lights_size() const {
  return lights_.size();
}
inline void Machine::clear_lights() {
  lights_.Clear();
}
inline const ::llsf_msgs::LightSpec& Machine::lights(int index) const {
  return lights_.Get(index);
}
inline ::llsf_msgs::LightSpec* Machine::mutable_lights(int index) {
  return lights_.Mutable(index);
}
inline ::llsf_msgs::LightSpec* Machine::add_lights() {
  return lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >&
Machine::lights() const {
  return lights_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >*
Machine::mutable_lights() {
  return &lights_;
}

// optional .llsf_msgs.Pose2D pose = 8;
inline bool Machine::has_pose() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Machine::set_has_pose() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Machine::clear_has_pose() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Machine::clear_pose() {
  if (pose_ != NULL) pose_->::llsf_msgs::Pose2D::Clear();
  clear_has_pose();
}
inline const ::llsf_msgs::Pose2D& Machine::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::llsf_msgs::Pose2D* Machine::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::llsf_msgs::Pose2D;
  return pose_;
}
inline ::llsf_msgs::Pose2D* Machine::release_pose() {
  clear_has_pose();
  ::llsf_msgs::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}

// optional bool correctly_reported = 9;
inline bool Machine::has_correctly_reported() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Machine::set_has_correctly_reported() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Machine::clear_has_correctly_reported() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Machine::clear_correctly_reported() {
  correctly_reported_ = false;
  clear_has_correctly_reported();
}
inline bool Machine::correctly_reported() const {
  return correctly_reported_;
}
inline void Machine::set_correctly_reported(bool value) {
  set_has_correctly_reported();
  correctly_reported_ = value;
}

// -------------------------------------------------------------------

// MachineInfo

// repeated .llsf_msgs.Machine machines = 1;
inline int MachineInfo::machines_size() const {
  return machines_.size();
}
inline void MachineInfo::clear_machines() {
  machines_.Clear();
}
inline const ::llsf_msgs::Machine& MachineInfo::machines(int index) const {
  return machines_.Get(index);
}
inline ::llsf_msgs::Machine* MachineInfo::mutable_machines(int index) {
  return machines_.Mutable(index);
}
inline ::llsf_msgs::Machine* MachineInfo::add_machines() {
  return machines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Machine >&
MachineInfo::machines() const {
  return machines_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Machine >*
MachineInfo::mutable_machines() {
  return &machines_;
}

// optional .llsf_msgs.Team team_color = 2;
inline bool MachineInfo::has_team_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MachineInfo::set_has_team_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MachineInfo::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MachineInfo::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline llsf_msgs::Team MachineInfo::team_color() const {
  return static_cast< llsf_msgs::Team >(team_color_);
}
inline void MachineInfo::set_team_color(llsf_msgs::Team value) {
  GOOGLE_DCHECK(llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::LightSpec_CompType>() {
  return ::llsf_msgs::LightSpec_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::Machine_CompType>() {
  return ::llsf_msgs::Machine_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::MachineInfo_CompType>() {
  return ::llsf_msgs::MachineInfo_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< llsf_msgs::LightColor>() {
  return llsf_msgs::LightColor_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< llsf_msgs::LightState>() {
  return llsf_msgs::LightState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MachineInfo_2eproto__INCLUDED
