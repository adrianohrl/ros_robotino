// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameInfo.proto

#ifndef PROTOBUF_GameInfo_2eproto__INCLUDED
#define PROTOBUF_GameInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Team.pb.h"
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameInfo_2eproto();
void protobuf_AssignDesc_GameInfo_2eproto();
void protobuf_ShutdownFile_GameInfo_2eproto();

class GameInfo;
class SetTeamName;

enum GameInfo_CompType {
  GameInfo_CompType_COMP_ID = 2000,
  GameInfo_CompType_MSG_TYPE = 81
};
bool GameInfo_CompType_IsValid(int value);
const GameInfo_CompType GameInfo_CompType_CompType_MIN = GameInfo_CompType_MSG_TYPE;
const GameInfo_CompType GameInfo_CompType_CompType_MAX = GameInfo_CompType_COMP_ID;
const int GameInfo_CompType_CompType_ARRAYSIZE = GameInfo_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameInfo_CompType_descriptor();
inline const ::std::string& GameInfo_CompType_Name(GameInfo_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameInfo_CompType_descriptor(), value);
}
inline bool GameInfo_CompType_Parse(
    const ::std::string& name, GameInfo_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameInfo_CompType>(
    GameInfo_CompType_descriptor(), name, value);
}
enum SetTeamName_CompType {
  SetTeamName_CompType_COMP_ID = 2000,
  SetTeamName_CompType_MSG_TYPE = 82
};
bool SetTeamName_CompType_IsValid(int value);
const SetTeamName_CompType SetTeamName_CompType_CompType_MIN = SetTeamName_CompType_MSG_TYPE;
const SetTeamName_CompType SetTeamName_CompType_CompType_MAX = SetTeamName_CompType_COMP_ID;
const int SetTeamName_CompType_CompType_ARRAYSIZE = SetTeamName_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SetTeamName_CompType_descriptor();
inline const ::std::string& SetTeamName_CompType_Name(SetTeamName_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SetTeamName_CompType_descriptor(), value);
}
inline bool SetTeamName_CompType_Parse(
    const ::std::string& name, SetTeamName_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SetTeamName_CompType>(
    SetTeamName_CompType_descriptor(), name, value);
}
// ===================================================================

class GameInfo : public ::google::protobuf::Message {
 public:
  GameInfo();
  virtual ~GameInfo();
  
  GameInfo(const GameInfo& from);
  
  inline GameInfo& operator=(const GameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInfo& default_instance();
  
  void Swap(GameInfo* other);
  
  // implements Message ----------------------------------------------
  
  GameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameInfo& from);
  void MergeFrom(const GameInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef GameInfo_CompType CompType;
  static const CompType COMP_ID = GameInfo_CompType_COMP_ID;
  static const CompType MSG_TYPE = GameInfo_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return GameInfo_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    GameInfo_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    GameInfo_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    GameInfo_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return GameInfo_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return GameInfo_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return GameInfo_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated string known_teams = 1;
  inline int known_teams_size() const;
  inline void clear_known_teams();
  static const int kKnownTeamsFieldNumber = 1;
  inline const ::std::string& known_teams(int index) const;
  inline ::std::string* mutable_known_teams(int index);
  inline void set_known_teams(int index, const ::std::string& value);
  inline void set_known_teams(int index, const char* value);
  inline void set_known_teams(int index, const char* value, size_t size);
  inline ::std::string* add_known_teams();
  inline void add_known_teams(const ::std::string& value);
  inline void add_known_teams(const char* value);
  inline void add_known_teams(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& known_teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_known_teams();
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.GameInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> known_teams_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameInfo_2eproto();
  friend void protobuf_AssignDesc_GameInfo_2eproto();
  friend void protobuf_ShutdownFile_GameInfo_2eproto();
  
  void InitAsDefaultInstance();
  static GameInfo* default_instance_;
};
// -------------------------------------------------------------------

class SetTeamName : public ::google::protobuf::Message {
 public:
  SetTeamName();
  virtual ~SetTeamName();
  
  SetTeamName(const SetTeamName& from);
  
  inline SetTeamName& operator=(const SetTeamName& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetTeamName& default_instance();
  
  void Swap(SetTeamName* other);
  
  // implements Message ----------------------------------------------
  
  SetTeamName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetTeamName& from);
  void MergeFrom(const SetTeamName& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SetTeamName_CompType CompType;
  static const CompType COMP_ID = SetTeamName_CompType_COMP_ID;
  static const CompType MSG_TYPE = SetTeamName_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return SetTeamName_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    SetTeamName_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    SetTeamName_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    SetTeamName_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return SetTeamName_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return SetTeamName_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return SetTeamName_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string team_name = 1;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 1;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  
  // required .llsf_msgs.Team team_color = 2;
  inline bool has_team_color() const;
  inline void clear_team_color();
  static const int kTeamColorFieldNumber = 2;
  inline llsf_msgs::Team team_color() const;
  inline void set_team_color(llsf_msgs::Team value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.SetTeamName)
 private:
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_color();
  inline void clear_has_team_color();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* team_name_;
  int team_color_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameInfo_2eproto();
  friend void protobuf_AssignDesc_GameInfo_2eproto();
  friend void protobuf_ShutdownFile_GameInfo_2eproto();
  
  void InitAsDefaultInstance();
  static SetTeamName* default_instance_;
};
// ===================================================================


// ===================================================================

// GameInfo

// repeated string known_teams = 1;
inline int GameInfo::known_teams_size() const {
  return known_teams_.size();
}
inline void GameInfo::clear_known_teams() {
  known_teams_.Clear();
}
inline const ::std::string& GameInfo::known_teams(int index) const {
  return known_teams_.Get(index);
}
inline ::std::string* GameInfo::mutable_known_teams(int index) {
  return known_teams_.Mutable(index);
}
inline void GameInfo::set_known_teams(int index, const ::std::string& value) {
  known_teams_.Mutable(index)->assign(value);
}
inline void GameInfo::set_known_teams(int index, const char* value) {
  known_teams_.Mutable(index)->assign(value);
}
inline void GameInfo::set_known_teams(int index, const char* value, size_t size) {
  known_teams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameInfo::add_known_teams() {
  return known_teams_.Add();
}
inline void GameInfo::add_known_teams(const ::std::string& value) {
  known_teams_.Add()->assign(value);
}
inline void GameInfo::add_known_teams(const char* value) {
  known_teams_.Add()->assign(value);
}
inline void GameInfo::add_known_teams(const char* value, size_t size) {
  known_teams_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GameInfo::known_teams() const {
  return known_teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GameInfo::mutable_known_teams() {
  return &known_teams_;
}

// -------------------------------------------------------------------

// SetTeamName

// required string team_name = 1;
inline bool SetTeamName::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetTeamName::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetTeamName::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetTeamName::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& SetTeamName::team_name() const {
  return *team_name_;
}
inline void SetTeamName::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void SetTeamName::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void SetTeamName::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetTeamName::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* SetTeamName::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .llsf_msgs.Team team_color = 2;
inline bool SetTeamName::has_team_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetTeamName::set_has_team_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetTeamName::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetTeamName::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline llsf_msgs::Team SetTeamName::team_color() const {
  return static_cast< llsf_msgs::Team >(team_color_);
}
inline void SetTeamName::set_team_color(llsf_msgs::Team value) {
  GOOGLE_DCHECK(llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::GameInfo_CompType>() {
  return ::llsf_msgs::GameInfo_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::SetTeamName_CompType>() {
  return ::llsf_msgs::SetTeamName_CompType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameInfo_2eproto__INCLUDED
