// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VersionInfo.proto

#ifndef PROTOBUF_VersionInfo_2eproto__INCLUDED
#define PROTOBUF_VersionInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VersionInfo_2eproto();
void protobuf_AssignDesc_VersionInfo_2eproto();
void protobuf_ShutdownFile_VersionInfo_2eproto();

class VersionInfo;

enum VersionInfo_CompType {
  VersionInfo_CompType_COMP_ID = 2000,
  VersionInfo_CompType_MSG_TYPE = 3
};
bool VersionInfo_CompType_IsValid(int value);
const VersionInfo_CompType VersionInfo_CompType_CompType_MIN = VersionInfo_CompType_MSG_TYPE;
const VersionInfo_CompType VersionInfo_CompType_CompType_MAX = VersionInfo_CompType_COMP_ID;
const int VersionInfo_CompType_CompType_ARRAYSIZE = VersionInfo_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VersionInfo_CompType_descriptor();
inline const ::std::string& VersionInfo_CompType_Name(VersionInfo_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VersionInfo_CompType_descriptor(), value);
}
inline bool VersionInfo_CompType_Parse(
    const ::std::string& name, VersionInfo_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VersionInfo_CompType>(
    VersionInfo_CompType_descriptor(), name, value);
}
// ===================================================================

class VersionInfo : public ::google::protobuf::Message {
 public:
  VersionInfo();
  virtual ~VersionInfo();
  
  VersionInfo(const VersionInfo& from);
  
  inline VersionInfo& operator=(const VersionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionInfo& default_instance();
  
  void Swap(VersionInfo* other);
  
  // implements Message ----------------------------------------------
  
  VersionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VersionInfo& from);
  void MergeFrom(const VersionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef VersionInfo_CompType CompType;
  static const CompType COMP_ID = VersionInfo_CompType_COMP_ID;
  static const CompType MSG_TYPE = VersionInfo_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return VersionInfo_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    VersionInfo_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    VersionInfo_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    VersionInfo_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return VersionInfo_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return VersionInfo_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return VersionInfo_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint32 version_major = 1;
  inline bool has_version_major() const;
  inline void clear_version_major();
  static const int kVersionMajorFieldNumber = 1;
  inline ::google::protobuf::uint32 version_major() const;
  inline void set_version_major(::google::protobuf::uint32 value);
  
  // required uint32 version_minor = 2;
  inline bool has_version_minor() const;
  inline void clear_version_minor();
  static const int kVersionMinorFieldNumber = 2;
  inline ::google::protobuf::uint32 version_minor() const;
  inline void set_version_minor(::google::protobuf::uint32 value);
  
  // required uint32 version_micro = 3;
  inline bool has_version_micro() const;
  inline void clear_version_micro();
  static const int kVersionMicroFieldNumber = 3;
  inline ::google::protobuf::uint32 version_micro() const;
  inline void set_version_micro(::google::protobuf::uint32 value);
  
  // required string version_string = 4;
  inline bool has_version_string() const;
  inline void clear_version_string();
  static const int kVersionStringFieldNumber = 4;
  inline const ::std::string& version_string() const;
  inline void set_version_string(const ::std::string& value);
  inline void set_version_string(const char* value);
  inline void set_version_string(const char* value, size_t size);
  inline ::std::string* mutable_version_string();
  inline ::std::string* release_version_string();
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.VersionInfo)
 private:
  inline void set_has_version_major();
  inline void clear_has_version_major();
  inline void set_has_version_minor();
  inline void clear_has_version_minor();
  inline void set_has_version_micro();
  inline void clear_has_version_micro();
  inline void set_has_version_string();
  inline void clear_has_version_string();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 version_major_;
  ::google::protobuf::uint32 version_minor_;
  ::std::string* version_string_;
  ::google::protobuf::uint32 version_micro_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_VersionInfo_2eproto();
  friend void protobuf_AssignDesc_VersionInfo_2eproto();
  friend void protobuf_ShutdownFile_VersionInfo_2eproto();
  
  void InitAsDefaultInstance();
  static VersionInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// VersionInfo

// required uint32 version_major = 1;
inline bool VersionInfo::has_version_major() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VersionInfo::set_has_version_major() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VersionInfo::clear_has_version_major() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VersionInfo::clear_version_major() {
  version_major_ = 0u;
  clear_has_version_major();
}
inline ::google::protobuf::uint32 VersionInfo::version_major() const {
  return version_major_;
}
inline void VersionInfo::set_version_major(::google::protobuf::uint32 value) {
  set_has_version_major();
  version_major_ = value;
}

// required uint32 version_minor = 2;
inline bool VersionInfo::has_version_minor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VersionInfo::set_has_version_minor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VersionInfo::clear_has_version_minor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VersionInfo::clear_version_minor() {
  version_minor_ = 0u;
  clear_has_version_minor();
}
inline ::google::protobuf::uint32 VersionInfo::version_minor() const {
  return version_minor_;
}
inline void VersionInfo::set_version_minor(::google::protobuf::uint32 value) {
  set_has_version_minor();
  version_minor_ = value;
}

// required uint32 version_micro = 3;
inline bool VersionInfo::has_version_micro() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VersionInfo::set_has_version_micro() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VersionInfo::clear_has_version_micro() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VersionInfo::clear_version_micro() {
  version_micro_ = 0u;
  clear_has_version_micro();
}
inline ::google::protobuf::uint32 VersionInfo::version_micro() const {
  return version_micro_;
}
inline void VersionInfo::set_version_micro(::google::protobuf::uint32 value) {
  set_has_version_micro();
  version_micro_ = value;
}

// required string version_string = 4;
inline bool VersionInfo::has_version_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VersionInfo::set_has_version_string() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VersionInfo::clear_has_version_string() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VersionInfo::clear_version_string() {
  if (version_string_ != &::google::protobuf::internal::kEmptyString) {
    version_string_->clear();
  }
  clear_has_version_string();
}
inline const ::std::string& VersionInfo::version_string() const {
  return *version_string_;
}
inline void VersionInfo::set_version_string(const ::std::string& value) {
  set_has_version_string();
  if (version_string_ == &::google::protobuf::internal::kEmptyString) {
    version_string_ = new ::std::string;
  }
  version_string_->assign(value);
}
inline void VersionInfo::set_version_string(const char* value) {
  set_has_version_string();
  if (version_string_ == &::google::protobuf::internal::kEmptyString) {
    version_string_ = new ::std::string;
  }
  version_string_->assign(value);
}
inline void VersionInfo::set_version_string(const char* value, size_t size) {
  set_has_version_string();
  if (version_string_ == &::google::protobuf::internal::kEmptyString) {
    version_string_ = new ::std::string;
  }
  version_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionInfo::mutable_version_string() {
  set_has_version_string();
  if (version_string_ == &::google::protobuf::internal::kEmptyString) {
    version_string_ = new ::std::string;
  }
  return version_string_;
}
inline ::std::string* VersionInfo::release_version_string() {
  clear_has_version_string();
  if (version_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_string_;
    version_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::VersionInfo_CompType>() {
  return ::llsf_msgs::VersionInfo_CompType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VersionInfo_2eproto__INCLUDED
