// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PuckInfo.proto

#ifndef PROTOBUF_PuckInfo_2eproto__INCLUDED
#define PROTOBUF_PuckInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Pose2D.pb.h"
#include "Team.pb.h"
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PuckInfo_2eproto();
void protobuf_AssignDesc_PuckInfo_2eproto();
void protobuf_ShutdownFile_PuckInfo_2eproto();

class Puck;
class PuckInfo;

enum Puck_CompType {
  Puck_CompType_COMP_ID = 2000,
  Puck_CompType_MSG_TYPE = 50
};
bool Puck_CompType_IsValid(int value);
const Puck_CompType Puck_CompType_CompType_MIN = Puck_CompType_MSG_TYPE;
const Puck_CompType Puck_CompType_CompType_MAX = Puck_CompType_COMP_ID;
const int Puck_CompType_CompType_ARRAYSIZE = Puck_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Puck_CompType_descriptor();
inline const ::std::string& Puck_CompType_Name(Puck_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Puck_CompType_descriptor(), value);
}
inline bool Puck_CompType_Parse(
    const ::std::string& name, Puck_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Puck_CompType>(
    Puck_CompType_descriptor(), name, value);
}
enum PuckInfo_CompType {
  PuckInfo_CompType_COMP_ID = 2000,
  PuckInfo_CompType_MSG_TYPE = 51
};
bool PuckInfo_CompType_IsValid(int value);
const PuckInfo_CompType PuckInfo_CompType_CompType_MIN = PuckInfo_CompType_MSG_TYPE;
const PuckInfo_CompType PuckInfo_CompType_CompType_MAX = PuckInfo_CompType_COMP_ID;
const int PuckInfo_CompType_CompType_ARRAYSIZE = PuckInfo_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PuckInfo_CompType_descriptor();
inline const ::std::string& PuckInfo_CompType_Name(PuckInfo_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PuckInfo_CompType_descriptor(), value);
}
inline bool PuckInfo_CompType_Parse(
    const ::std::string& name, PuckInfo_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PuckInfo_CompType>(
    PuckInfo_CompType_descriptor(), name, value);
}
enum PuckState {
  S0 = 0,
  S1 = 1,
  S2 = 2,
  P1 = 4,
  P2 = 5,
  P3 = 6,
  CONSUMED = 7,
  FINISHED = 8
};
bool PuckState_IsValid(int value);
const PuckState PuckState_MIN = S0;
const PuckState PuckState_MAX = FINISHED;
const int PuckState_ARRAYSIZE = PuckState_MAX + 1;

const ::google::protobuf::EnumDescriptor* PuckState_descriptor();
inline const ::std::string& PuckState_Name(PuckState value) {
  return ::google::protobuf::internal::NameOfEnum(
    PuckState_descriptor(), value);
}
inline bool PuckState_Parse(
    const ::std::string& name, PuckState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PuckState>(
    PuckState_descriptor(), name, value);
}
// ===================================================================

class Puck : public ::google::protobuf::Message {
 public:
  Puck();
  virtual ~Puck();
  
  Puck(const Puck& from);
  
  inline Puck& operator=(const Puck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Puck& default_instance();
  
  void Swap(Puck* other);
  
  // implements Message ----------------------------------------------
  
  Puck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Puck& from);
  void MergeFrom(const Puck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Puck_CompType CompType;
  static const CompType COMP_ID = Puck_CompType_COMP_ID;
  static const CompType MSG_TYPE = Puck_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return Puck_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    Puck_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    Puck_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    Puck_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return Puck_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return Puck_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return Puck_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .llsf_msgs.PuckState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline llsf_msgs::PuckState state() const;
  inline void set_state(llsf_msgs::PuckState value);
  
  // optional .llsf_msgs.Pose2D pose = 3;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 3;
  inline const ::llsf_msgs::Pose2D& pose() const;
  inline ::llsf_msgs::Pose2D* mutable_pose();
  inline ::llsf_msgs::Pose2D* release_pose();
  
  // optional .llsf_msgs.Team team_color = 4;
  inline bool has_team_color() const;
  inline void clear_team_color();
  static const int kTeamColorFieldNumber = 4;
  inline llsf_msgs::Team team_color() const;
  inline void set_team_color(llsf_msgs::Team value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.Puck)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_team_color();
  inline void clear_has_team_color();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  int state_;
  ::llsf_msgs::Pose2D* pose_;
  int team_color_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_PuckInfo_2eproto();
  friend void protobuf_AssignDesc_PuckInfo_2eproto();
  friend void protobuf_ShutdownFile_PuckInfo_2eproto();
  
  void InitAsDefaultInstance();
  static Puck* default_instance_;
};
// -------------------------------------------------------------------

class PuckInfo : public ::google::protobuf::Message {
 public:
  PuckInfo();
  virtual ~PuckInfo();
  
  PuckInfo(const PuckInfo& from);
  
  inline PuckInfo& operator=(const PuckInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PuckInfo& default_instance();
  
  void Swap(PuckInfo* other);
  
  // implements Message ----------------------------------------------
  
  PuckInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PuckInfo& from);
  void MergeFrom(const PuckInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PuckInfo_CompType CompType;
  static const CompType COMP_ID = PuckInfo_CompType_COMP_ID;
  static const CompType MSG_TYPE = PuckInfo_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return PuckInfo_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    PuckInfo_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    PuckInfo_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    PuckInfo_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return PuckInfo_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return PuckInfo_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return PuckInfo_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .llsf_msgs.Puck pucks = 1;
  inline int pucks_size() const;
  inline void clear_pucks();
  static const int kPucksFieldNumber = 1;
  inline const ::llsf_msgs::Puck& pucks(int index) const;
  inline ::llsf_msgs::Puck* mutable_pucks(int index);
  inline ::llsf_msgs::Puck* add_pucks();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Puck >&
      pucks() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Puck >*
      mutable_pucks();
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.PuckInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Puck > pucks_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PuckInfo_2eproto();
  friend void protobuf_AssignDesc_PuckInfo_2eproto();
  friend void protobuf_ShutdownFile_PuckInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PuckInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// Puck

// required uint32 id = 1;
inline bool Puck::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Puck::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Puck::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Puck::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Puck::id() const {
  return id_;
}
inline void Puck::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .llsf_msgs.PuckState state = 2;
inline bool Puck::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Puck::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Puck::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Puck::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline llsf_msgs::PuckState Puck::state() const {
  return static_cast< llsf_msgs::PuckState >(state_);
}
inline void Puck::set_state(llsf_msgs::PuckState value) {
  GOOGLE_DCHECK(llsf_msgs::PuckState_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional .llsf_msgs.Pose2D pose = 3;
inline bool Puck::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Puck::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Puck::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Puck::clear_pose() {
  if (pose_ != NULL) pose_->::llsf_msgs::Pose2D::Clear();
  clear_has_pose();
}
inline const ::llsf_msgs::Pose2D& Puck::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::llsf_msgs::Pose2D* Puck::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::llsf_msgs::Pose2D;
  return pose_;
}
inline ::llsf_msgs::Pose2D* Puck::release_pose() {
  clear_has_pose();
  ::llsf_msgs::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}

// optional .llsf_msgs.Team team_color = 4;
inline bool Puck::has_team_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Puck::set_has_team_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Puck::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Puck::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline llsf_msgs::Team Puck::team_color() const {
  return static_cast< llsf_msgs::Team >(team_color_);
}
inline void Puck::set_team_color(llsf_msgs::Team value) {
  GOOGLE_DCHECK(llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
}

// -------------------------------------------------------------------

// PuckInfo

// repeated .llsf_msgs.Puck pucks = 1;
inline int PuckInfo::pucks_size() const {
  return pucks_.size();
}
inline void PuckInfo::clear_pucks() {
  pucks_.Clear();
}
inline const ::llsf_msgs::Puck& PuckInfo::pucks(int index) const {
  return pucks_.Get(index);
}
inline ::llsf_msgs::Puck* PuckInfo::mutable_pucks(int index) {
  return pucks_.Mutable(index);
}
inline ::llsf_msgs::Puck* PuckInfo::add_pucks() {
  return pucks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Puck >&
PuckInfo::pucks() const {
  return pucks_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Puck >*
PuckInfo::mutable_pucks() {
  return &pucks_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::Puck_CompType>() {
  return ::llsf_msgs::Puck_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::PuckInfo_CompType>() {
  return ::llsf_msgs::PuckInfo_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< llsf_msgs::PuckState>() {
  return llsf_msgs::PuckState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PuckInfo_2eproto__INCLUDED
