// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SimTimeSync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

namespace {

const ::google::protobuf::Descriptor* SimTimeSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimTimeSync_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SimTimeSync_CompType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SimTimeSync_2eproto() {
  protobuf_AddDesc_SimTimeSync_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SimTimeSync.proto");
  GOOGLE_CHECK(file != NULL);
  SimTimeSync_descriptor_ = file->message_type(0);
  static const int SimTimeSync_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTimeSync, sim_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTimeSync, real_time_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTimeSync, paused_),
  };
  SimTimeSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimTimeSync_descriptor_,
      SimTimeSync::default_instance_,
      SimTimeSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTimeSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTimeSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimTimeSync));
  SimTimeSync_CompType_descriptor_ = SimTimeSync_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SimTimeSync_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimTimeSync_descriptor_, &SimTimeSync::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SimTimeSync_2eproto() {
  delete SimTimeSync::default_instance_;
  delete SimTimeSync_reflection_;
}

void protobuf_AddDesc_SimTimeSync_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::llsf_msgs::protobuf_AddDesc_Time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SimTimeSync.proto\022\tllsf_msgs\032\nTime.pro"
    "to\"\203\001\n\013SimTimeSync\022!\n\010sim_time\030\001 \002(\0132\017.l"
    "lsf_msgs.Time\022\030\n\020real_time_factor\030\002 \002(\002\022"
    "\016\n\006paused\030\003 \002(\010\"\'\n\010CompType\022\014\n\007COMP_ID\020\320"
    "\017\022\r\n\010MSG_TYPE\020\307\002", 176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SimTimeSync.proto", &protobuf_RegisterTypes);
  SimTimeSync::default_instance_ = new SimTimeSync();
  SimTimeSync::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SimTimeSync_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SimTimeSync_2eproto {
  StaticDescriptorInitializer_SimTimeSync_2eproto() {
    protobuf_AddDesc_SimTimeSync_2eproto();
  }
} static_descriptor_initializer_SimTimeSync_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* SimTimeSync_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimTimeSync_CompType_descriptor_;
}
bool SimTimeSync_CompType_IsValid(int value) {
  switch(value) {
    case 327:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SimTimeSync_CompType SimTimeSync::COMP_ID;
const SimTimeSync_CompType SimTimeSync::MSG_TYPE;
const SimTimeSync_CompType SimTimeSync::CompType_MIN;
const SimTimeSync_CompType SimTimeSync::CompType_MAX;
const int SimTimeSync::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SimTimeSync::kSimTimeFieldNumber;
const int SimTimeSync::kRealTimeFactorFieldNumber;
const int SimTimeSync::kPausedFieldNumber;
#endif  // !_MSC_VER

SimTimeSync::SimTimeSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimTimeSync::InitAsDefaultInstance() {
  sim_time_ = const_cast< ::llsf_msgs::Time*>(&::llsf_msgs::Time::default_instance());
}

SimTimeSync::SimTimeSync(const SimTimeSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimTimeSync::SharedCtor() {
  _cached_size_ = 0;
  sim_time_ = NULL;
  real_time_factor_ = 0;
  paused_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimTimeSync::~SimTimeSync() {
  SharedDtor();
}

void SimTimeSync::SharedDtor() {
  if (this != default_instance_) {
    delete sim_time_;
  }
}

void SimTimeSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimTimeSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimTimeSync_descriptor_;
}

const SimTimeSync& SimTimeSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimTimeSync_2eproto();  return *default_instance_;
}

SimTimeSync* SimTimeSync::default_instance_ = NULL;

SimTimeSync* SimTimeSync::New() const {
  return new SimTimeSync;
}

void SimTimeSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sim_time()) {
      if (sim_time_ != NULL) sim_time_->::llsf_msgs::Time::Clear();
    }
    real_time_factor_ = 0;
    paused_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimTimeSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llsf_msgs.Time sim_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sim_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_real_time_factor;
        break;
      }
      
      // required float real_time_factor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_real_time_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &real_time_factor_)));
          set_has_real_time_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_paused;
        break;
      }
      
      // required bool paused = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paused_)));
          set_has_paused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimTimeSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .llsf_msgs.Time sim_time = 1;
  if (has_sim_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sim_time(), output);
  }
  
  // required float real_time_factor = 2;
  if (has_real_time_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->real_time_factor(), output);
  }
  
  // required bool paused = 3;
  if (has_paused()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->paused(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimTimeSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .llsf_msgs.Time sim_time = 1;
  if (has_sim_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sim_time(), target);
  }
  
  // required float real_time_factor = 2;
  if (has_real_time_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->real_time_factor(), target);
  }
  
  // required bool paused = 3;
  if (has_paused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->paused(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimTimeSync::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .llsf_msgs.Time sim_time = 1;
    if (has_sim_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sim_time());
    }
    
    // required float real_time_factor = 2;
    if (has_real_time_factor()) {
      total_size += 1 + 4;
    }
    
    // required bool paused = 3;
    if (has_paused()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimTimeSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimTimeSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimTimeSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimTimeSync::MergeFrom(const SimTimeSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sim_time()) {
      mutable_sim_time()->::llsf_msgs::Time::MergeFrom(from.sim_time());
    }
    if (from.has_real_time_factor()) {
      set_real_time_factor(from.real_time_factor());
    }
    if (from.has_paused()) {
      set_paused(from.paused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimTimeSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimTimeSync::CopyFrom(const SimTimeSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimTimeSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_sim_time()) {
    if (!this->sim_time().IsInitialized()) return false;
  }
  return true;
}

void SimTimeSync::Swap(SimTimeSync* other) {
  if (other != this) {
    std::swap(sim_time_, other->sim_time_);
    std::swap(real_time_factor_, other->real_time_factor_);
    std::swap(paused_, other->paused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimTimeSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimTimeSync_descriptor_;
  metadata.reflection = SimTimeSync_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

// @@protoc_insertion_point(global_scope)
