// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pose2D.proto

#ifndef PROTOBUF_Pose2D_2eproto__INCLUDED
#define PROTOBUF_Pose2D_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Time.pb.h"
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Pose2D_2eproto();
void protobuf_AssignDesc_Pose2D_2eproto();
void protobuf_ShutdownFile_Pose2D_2eproto();

class Pose2D;

// ===================================================================

class Pose2D : public ::google::protobuf::Message {
 public:
  Pose2D();
  virtual ~Pose2D();
  
  Pose2D(const Pose2D& from);
  
  inline Pose2D& operator=(const Pose2D& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose2D& default_instance();
  
  void Swap(Pose2D* other);
  
  // implements Message ----------------------------------------------
  
  Pose2D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pose2D& from);
  void MergeFrom(const Pose2D& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .llsf_msgs.Time timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline const ::llsf_msgs::Time& timestamp() const;
  inline ::llsf_msgs::Time* mutable_timestamp();
  inline ::llsf_msgs::Time* release_timestamp();
  
  // required float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);
  
  // required float ori = 4;
  inline bool has_ori() const;
  inline void clear_ori();
  static const int kOriFieldNumber = 4;
  inline float ori() const;
  inline void set_ori(float value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.Pose2D)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_ori();
  inline void clear_has_ori();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::llsf_msgs::Time* timestamp_;
  float x_;
  float y_;
  float ori_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Pose2D_2eproto();
  friend void protobuf_AssignDesc_Pose2D_2eproto();
  friend void protobuf_ShutdownFile_Pose2D_2eproto();
  
  void InitAsDefaultInstance();
  static Pose2D* default_instance_;
};
// ===================================================================


// ===================================================================

// Pose2D

// required .llsf_msgs.Time timestamp = 1;
inline bool Pose2D::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pose2D::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pose2D::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pose2D::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::llsf_msgs::Time::Clear();
  clear_has_timestamp();
}
inline const ::llsf_msgs::Time& Pose2D::timestamp() const {
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::llsf_msgs::Time* Pose2D::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::llsf_msgs::Time;
  return timestamp_;
}
inline ::llsf_msgs::Time* Pose2D::release_timestamp() {
  clear_has_timestamp();
  ::llsf_msgs::Time* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}

// required float x = 2;
inline bool Pose2D::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pose2D::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pose2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pose2D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Pose2D::x() const {
  return x_;
}
inline void Pose2D::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 3;
inline bool Pose2D::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pose2D::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pose2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pose2D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Pose2D::y() const {
  return y_;
}
inline void Pose2D::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float ori = 4;
inline bool Pose2D::has_ori() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pose2D::set_has_ori() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pose2D::clear_has_ori() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pose2D::clear_ori() {
  ori_ = 0;
  clear_has_ori();
}
inline float Pose2D::ori() const {
  return ori_;
}
inline void Pose2D::set_ori(float value) {
  set_has_ori();
  ori_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Pose2D_2eproto__INCLUDED
