"""autogenerated by genpy from robotino_vision/GetPucksPolarCoordinatesRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetPucksPolarCoordinatesRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "robotino_vision/GetPucksPolarCoordinatesRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetPucksPolarCoordinatesRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from robotino_vision/GetPucksPolarCoordinatesResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robotino_vision.msg

class GetPucksPolarCoordinatesResponse(genpy.Message):
  _md5sum = "1edf795eab11f29ba3908ae9d027e4af"
  _type = "robotino_vision/GetPucksPolarCoordinatesResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool succeed
robotino_vision/Puck[] pucks


================================================================================
MSG: robotino_vision/Puck
float32 distance			# puck distance in meters
float32 direction			# puck direction in degrees
string color="orange"			# puck color

"""
  __slots__ = ['succeed','pucks']
  _slot_types = ['bool','robotino_vision/Puck[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       succeed,pucks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetPucksPolarCoordinatesResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.succeed is None:
        self.succeed = False
      if self.pucks is None:
        self.pucks = []
    else:
      self.succeed = False
      self.pucks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.succeed))
      length = len(self.pucks)
      buff.write(_struct_I.pack(length))
      for val1 in self.pucks:
        _x = val1
        buff.write(_struct_2f.pack(_x.distance, _x.direction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pucks is None:
        self.pucks = None
      end = 0
      start = end
      end += 1
      (self.succeed,) = _struct_B.unpack(str[start:end])
      self.succeed = bool(self.succeed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pucks = []
      for i in range(0, length):
        val1 = robotino_vision.msg.Puck()
        _x = val1
        start = end
        end += 8
        (_x.distance, _x.direction,) = _struct_2f.unpack(str[start:end])
        self.pucks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.succeed))
      length = len(self.pucks)
      buff.write(_struct_I.pack(length))
      for val1 in self.pucks:
        _x = val1
        buff.write(_struct_2f.pack(_x.distance, _x.direction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pucks is None:
        self.pucks = None
      end = 0
      start = end
      end += 1
      (self.succeed,) = _struct_B.unpack(str[start:end])
      self.succeed = bool(self.succeed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pucks = []
      for i in range(0, length):
        val1 = robotino_vision.msg.Puck()
        _x = val1
        start = end
        end += 8
        (_x.distance, _x.direction,) = _struct_2f.unpack(str[start:end])
        self.pucks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
_struct_B = struct.Struct("<B")
class GetPucksPolarCoordinates(object):
  _type          = 'robotino_vision/GetPucksPolarCoordinates'
  _md5sum = '1edf795eab11f29ba3908ae9d027e4af'
  _request_class  = GetPucksPolarCoordinatesRequest
  _response_class = GetPucksPolarCoordinatesResponse
