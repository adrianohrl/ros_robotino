/* Auto-generated by genmsg_cpp for file /home/robotino/fuerte_workspace/sandbox/robotino-ros-pkg/robotino/robotino_vision/msg/PuckState.msg */
#ifndef ROBOTINO_VISION_MESSAGE_PUCKSTATE_H
#define ROBOTINO_VISION_MESSAGE_PUCKSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace robotino_vision
{
template <class ContainerAllocator>
struct PuckState_ {
  typedef PuckState_<ContainerAllocator> Type;

  PuckState_()
  : distance(0.0)
  , direction(0.0)
  , at()
  {
  }

  PuckState_(const ContainerAllocator& _alloc)
  : distance(0.0)
  , direction(0.0)
  , at()
  {
  }

  typedef float _distance_type;
  float distance;

  typedef float _direction_type;
  float direction;

  typedef ros::Time _at_type;
  ros::Time at;

  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  color;

  typedef boost::shared_ptr< ::robotino_vision::PuckState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_vision::PuckState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PuckState
typedef  ::robotino_vision::PuckState_<std::allocator<void> > PuckState;

typedef boost::shared_ptr< ::robotino_vision::PuckState> PuckStatePtr;
typedef boost::shared_ptr< ::robotino_vision::PuckState const> PuckStateConstPtr;

template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PuckState_<ContainerAllocator>::color = "\"orange\"			# puck color";

template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robotino_vision::PuckState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robotino_vision::PuckState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robotino_vision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_vision::PuckState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_vision::PuckState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_vision::PuckState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "525ea9860e0dbc5e321b446d46091c12";
  }

  static const char* value(const  ::robotino_vision::PuckState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x525ea9860e0dbc5eULL;
  static const uint64_t static_value2 = 0x321b446d46091c12ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_vision::PuckState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_vision/PuckState";
  }

  static const char* value(const  ::robotino_vision::PuckState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_vision::PuckState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 distance			# puck distance in meters\n\
float32 direction			# puck direction in degrees\n\
string color=\"orange\"			# puck color\n\
time at					# Time at which this had been stimated\n\
\n\
";
  }

  static const char* value(const  ::robotino_vision::PuckState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotino_vision::PuckState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_vision::PuckState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.distance);
    stream.next(m.direction);
    stream.next(m.at);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PuckState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotino_vision::PuckState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robotino_vision::PuckState_<ContainerAllocator> & v) 
  {
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "direction: ";
    Printer<float>::stream(s, indent + "  ", v.direction);
    s << indent << "at: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.at);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBOTINO_VISION_MESSAGE_PUCKSTATE_H

