/* Auto-generated by genmsg_cpp for file /home/robotino/fuerte_workspace/sandbox/robotino/robotino_vision/msg/LampPost.msg */
#ifndef ROBOTINO_VISION_MESSAGE_LAMPPOST_H
#define ROBOTINO_VISION_MESSAGE_LAMPPOST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "robotino_vision/Lamp.h"

namespace robotino_vision
{
template <class ContainerAllocator>
struct LampPost_ {
  typedef LampPost_<ContainerAllocator> Type;

  LampPost_()
  : lamps()
  {
  }

  LampPost_(const ContainerAllocator& _alloc)
  : lamps()
  {
    lamps.assign( ::robotino_vision::Lamp_<ContainerAllocator> (_alloc));
  }

  typedef boost::array< ::robotino_vision::Lamp_<ContainerAllocator> , 3>  _lamps_type;
  boost::array< ::robotino_vision::Lamp_<ContainerAllocator> , 3>  lamps;


  typedef boost::shared_ptr< ::robotino_vision::LampPost_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_vision::LampPost_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LampPost
typedef  ::robotino_vision::LampPost_<std::allocator<void> > LampPost;

typedef boost::shared_ptr< ::robotino_vision::LampPost> LampPostPtr;
typedef boost::shared_ptr< ::robotino_vision::LampPost const> LampPostConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robotino_vision::LampPost_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robotino_vision::LampPost_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robotino_vision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_vision::LampPost_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_vision::LampPost_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_vision::LampPost_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0f1f7a8dfa3cde155d77d2d64cddf185";
  }

  static const char* value(const  ::robotino_vision::LampPost_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0f1f7a8dfa3cde15ULL;
  static const uint64_t static_value2 = 0x5d77d2d64cddf185ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_vision::LampPost_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_vision/LampPost";
  }

  static const char* value(const  ::robotino_vision::LampPost_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_vision::LampPost_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_vision/Lamp[3] lamps		# A fixed-length vector of lamps\n\
\n\
================================================================================\n\
MSG: robotino_vision/Lamp\n\
string color		# lamp color\n\
bool isLighting		# true if this lamp is lighting and false if this lamp is not.\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::robotino_vision::LampPost_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_vision::LampPost_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.lamps);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LampPost_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotino_vision::LampPost_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robotino_vision::LampPost_<ContainerAllocator> & v) 
  {
    s << indent << "lamps[]" << std::endl;
    for (size_t i = 0; i < v.lamps.size(); ++i)
    {
      s << indent << "  lamps[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robotino_vision::Lamp_<ContainerAllocator> >::stream(s, indent + "    ", v.lamps[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBOTINO_VISION_MESSAGE_LAMPPOST_H

