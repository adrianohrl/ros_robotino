/* Auto-generated by genmsg_cpp for file /home/viki/ros_workspace/robotino-ros-pkg/robotino/robotino_vision/msg/CameraMode.msg */
#ifndef ROBOTINO_VISION_MESSAGE_CAMERAMODE_H
#define ROBOTINO_VISION_MESSAGE_CAMERAMODE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace robotino_vision
{
template <class ContainerAllocator>
struct CameraMode_ {
  typedef CameraMode_<ContainerAllocator> Type;

  CameraMode_()
  : mode(0)
  {
  }

  CameraMode_(const ContainerAllocator& _alloc)
  : mode(0)
  {
  }

  typedef uint8_t _mode_type;
  uint8_t mode;


  typedef boost::shared_ptr< ::robotino_vision::CameraMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_vision::CameraMode_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CameraMode
typedef  ::robotino_vision::CameraMode_<std::allocator<void> > CameraMode;

typedef boost::shared_ptr< ::robotino_vision::CameraMode> CameraModePtr;
typedef boost::shared_ptr< ::robotino_vision::CameraMode const> CameraModeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robotino_vision::CameraMode_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robotino_vision::CameraMode_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robotino_vision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_vision::CameraMode_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_vision::CameraMode_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_vision::CameraMode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "89b81386720be1cd0ce7a3953fcd1b19";
  }

  static const char* value(const  ::robotino_vision::CameraMode_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x89b81386720be1cdULL;
  static const uint64_t static_value2 = 0x0ce7a3953fcd1b19ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_vision::CameraMode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_vision/CameraMode";
  }

  static const char* value(const  ::robotino_vision::CameraMode_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_vision::CameraMode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 mode \n\
# 0 -> Off Mode\n\
# 1 -> Get Lamp Post State Mode\n\
# 2 -> Get Puck State Mode\n\
# 3 -> \n\
# 4 -> \n\
\n\
";
  }

  static const char* value(const  ::robotino_vision::CameraMode_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotino_vision::CameraMode_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_vision::CameraMode_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CameraMode_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotino_vision::CameraMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robotino_vision::CameraMode_<ContainerAllocator> & v) 
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBOTINO_VISION_MESSAGE_CAMERAMODE_H

