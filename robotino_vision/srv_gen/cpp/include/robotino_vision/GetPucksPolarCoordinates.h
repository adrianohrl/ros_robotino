/* Auto-generated by genmsg_cpp for file /home/robotino/fuerte_workspace/sandbox/robotino/robotino_vision/srv/GetPucksPolarCoordinates.srv */
#ifndef ROBOTINO_VISION_SERVICE_GETPUCKSPOLARCOORDINATES_H
#define ROBOTINO_VISION_SERVICE_GETPUCKSPOLARCOORDINATES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "robotino_vision/Puck.h"

namespace robotino_vision
{
template <class ContainerAllocator>
struct GetPucksPolarCoordinatesRequest_ {
  typedef GetPucksPolarCoordinatesRequest_<ContainerAllocator> Type;

  GetPucksPolarCoordinatesRequest_()
  {
  }

  GetPucksPolarCoordinatesRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetPucksPolarCoordinatesRequest
typedef  ::robotino_vision::GetPucksPolarCoordinatesRequest_<std::allocator<void> > GetPucksPolarCoordinatesRequest;

typedef boost::shared_ptr< ::robotino_vision::GetPucksPolarCoordinatesRequest> GetPucksPolarCoordinatesRequestPtr;
typedef boost::shared_ptr< ::robotino_vision::GetPucksPolarCoordinatesRequest const> GetPucksPolarCoordinatesRequestConstPtr;


template <class ContainerAllocator>
struct GetPucksPolarCoordinatesResponse_ {
  typedef GetPucksPolarCoordinatesResponse_<ContainerAllocator> Type;

  GetPucksPolarCoordinatesResponse_()
  : succeed(false)
  , pucks()
  {
  }

  GetPucksPolarCoordinatesResponse_(const ContainerAllocator& _alloc)
  : succeed(false)
  , pucks(_alloc)
  {
  }

  typedef uint8_t _succeed_type;
  uint8_t succeed;

  typedef std::vector< ::robotino_vision::Puck_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robotino_vision::Puck_<ContainerAllocator> >::other >  _pucks_type;
  std::vector< ::robotino_vision::Puck_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robotino_vision::Puck_<ContainerAllocator> >::other >  pucks;


  typedef boost::shared_ptr< ::robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetPucksPolarCoordinatesResponse
typedef  ::robotino_vision::GetPucksPolarCoordinatesResponse_<std::allocator<void> > GetPucksPolarCoordinatesResponse;

typedef boost::shared_ptr< ::robotino_vision::GetPucksPolarCoordinatesResponse> GetPucksPolarCoordinatesResponsePtr;
typedef boost::shared_ptr< ::robotino_vision::GetPucksPolarCoordinatesResponse const> GetPucksPolarCoordinatesResponseConstPtr;

struct GetPucksPolarCoordinates
{

typedef GetPucksPolarCoordinatesRequest Request;
typedef GetPucksPolarCoordinatesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetPucksPolarCoordinates
} // namespace robotino_vision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_vision/GetPucksPolarCoordinatesRequest";
  }

  static const char* value(const  ::robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1edf795eab11f29ba3908ae9d027e4af";
  }

  static const char* value(const  ::robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1edf795eab11f29bULL;
  static const uint64_t static_value2 = 0xa3908ae9d027e4afULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_vision/GetPucksPolarCoordinatesResponse";
  }

  static const char* value(const  ::robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool succeed\n\
robotino_vision/Puck[] pucks\n\
\n\
\n\
================================================================================\n\
MSG: robotino_vision/Puck\n\
float32 distance			# puck distance in meters\n\
float32 direction			# puck direction in degrees\n\
string color=\"orange\"			# puck color\n\
\n\
";
  }

  static const char* value(const  ::robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetPucksPolarCoordinatesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.succeed);
    stream.next(m.pucks);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetPucksPolarCoordinatesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robotino_vision::GetPucksPolarCoordinates> {
  static const char* value() 
  {
    return "1edf795eab11f29ba3908ae9d027e4af";
  }

  static const char* value(const robotino_vision::GetPucksPolarCoordinates&) { return value(); } 
};

template<>
struct DataType<robotino_vision::GetPucksPolarCoordinates> {
  static const char* value() 
  {
    return "robotino_vision/GetPucksPolarCoordinates";
  }

  static const char* value(const robotino_vision::GetPucksPolarCoordinates&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1edf795eab11f29ba3908ae9d027e4af";
  }

  static const char* value(const robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_vision/GetPucksPolarCoordinates";
  }

  static const char* value(const robotino_vision::GetPucksPolarCoordinatesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1edf795eab11f29ba3908ae9d027e4af";
  }

  static const char* value(const robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_vision/GetPucksPolarCoordinates";
  }

  static const char* value(const robotino_vision::GetPucksPolarCoordinatesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBOTINO_VISION_SERVICE_GETPUCKSPOLARCOORDINATES_H

