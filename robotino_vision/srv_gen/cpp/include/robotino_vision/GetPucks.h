/* Auto-generated by genmsg_cpp for file /home/viki/ros_workspace/robotino-ros-pkg/robotino/robotino_vision/srv/GetPucks.srv */
#ifndef ROBOTINO_VISION_SERVICE_GETPUCKS_H
#define ROBOTINO_VISION_SERVICE_GETPUCKS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace robotino_vision
{
template <class ContainerAllocator>
struct GetPucksRequest_ {
  typedef GetPucksRequest_<ContainerAllocator> Type;

  GetPucksRequest_()
  {
  }

  GetPucksRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::robotino_vision::GetPucksRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_vision::GetPucksRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetPucksRequest
typedef  ::robotino_vision::GetPucksRequest_<std::allocator<void> > GetPucksRequest;

typedef boost::shared_ptr< ::robotino_vision::GetPucksRequest> GetPucksRequestPtr;
typedef boost::shared_ptr< ::robotino_vision::GetPucksRequest const> GetPucksRequestConstPtr;


template <class ContainerAllocator>
struct GetPucksResponse_ {
  typedef GetPucksResponse_<ContainerAllocator> Type;

  GetPucksResponse_()
  : puck_distance()
  , puck_direction()
  {
  }

  GetPucksResponse_(const ContainerAllocator& _alloc)
  : puck_distance(_alloc)
  , puck_direction(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _puck_distance_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  puck_distance;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _puck_direction_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  puck_direction;


  typedef boost::shared_ptr< ::robotino_vision::GetPucksResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_vision::GetPucksResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetPucksResponse
typedef  ::robotino_vision::GetPucksResponse_<std::allocator<void> > GetPucksResponse;

typedef boost::shared_ptr< ::robotino_vision::GetPucksResponse> GetPucksResponsePtr;
typedef boost::shared_ptr< ::robotino_vision::GetPucksResponse const> GetPucksResponseConstPtr;

struct GetPucks
{

typedef GetPucksRequest Request;
typedef GetPucksResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetPucks
} // namespace robotino_vision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_vision::GetPucksRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_vision::GetPucksRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_vision::GetPucksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::robotino_vision::GetPucksRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_vision::GetPucksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_vision/GetPucksRequest";
  }

  static const char* value(const  ::robotino_vision::GetPucksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_vision::GetPucksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::robotino_vision::GetPucksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotino_vision::GetPucksRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_vision::GetPucksResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_vision::GetPucksResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_vision::GetPucksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e5ad1d3c7fcd754f64a9bd6d027b695f";
  }

  static const char* value(const  ::robotino_vision::GetPucksResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe5ad1d3c7fcd754fULL;
  static const uint64_t static_value2 = 0x64a9bd6d027b695fULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_vision::GetPucksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_vision/GetPucksResponse";
  }

  static const char* value(const  ::robotino_vision::GetPucksResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_vision::GetPucksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float32[] puck_distance\n\
float32[] puck_direction\n\
\n\
\n\
";
  }

  static const char* value(const  ::robotino_vision::GetPucksResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_vision::GetPucksRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetPucksRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_vision::GetPucksResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.puck_distance);
    stream.next(m.puck_direction);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetPucksResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robotino_vision::GetPucks> {
  static const char* value() 
  {
    return "e5ad1d3c7fcd754f64a9bd6d027b695f";
  }

  static const char* value(const robotino_vision::GetPucks&) { return value(); } 
};

template<>
struct DataType<robotino_vision::GetPucks> {
  static const char* value() 
  {
    return "robotino_vision/GetPucks";
  }

  static const char* value(const robotino_vision::GetPucks&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotino_vision::GetPucksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e5ad1d3c7fcd754f64a9bd6d027b695f";
  }

  static const char* value(const robotino_vision::GetPucksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotino_vision::GetPucksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_vision/GetPucks";
  }

  static const char* value(const robotino_vision::GetPucksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotino_vision::GetPucksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e5ad1d3c7fcd754f64a9bd6d027b695f";
  }

  static const char* value(const robotino_vision::GetPucksResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotino_vision::GetPucksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_vision/GetPucks";
  }

  static const char* value(const robotino_vision::GetPucksResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBOTINO_VISION_SERVICE_GETPUCKS_H

