/* Auto-generated by genmsg_cpp for file /home/robotino/fuerte_workspace/sandbox/robotino/robotino_movements/srv/Prova.srv */
#ifndef ROBOTINO_MOVEMENTS_SERVICE_PROVA_H
#define ROBOTINO_MOVEMENTS_SERVICE_PROVA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace robotino_movements
{
template <class ContainerAllocator>
struct ProvaRequest_ {
  typedef ProvaRequest_<ContainerAllocator> Type;

  ProvaRequest_()
  {
  }

  ProvaRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::robotino_movements::ProvaRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_movements::ProvaRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ProvaRequest
typedef  ::robotino_movements::ProvaRequest_<std::allocator<void> > ProvaRequest;

typedef boost::shared_ptr< ::robotino_movements::ProvaRequest> ProvaRequestPtr;
typedef boost::shared_ptr< ::robotino_movements::ProvaRequest const> ProvaRequestConstPtr;


template <class ContainerAllocator>
struct ProvaResponse_ {
  typedef ProvaResponse_<ContainerAllocator> Type;

  ProvaResponse_()
  : isDone(false)
  {
  }

  ProvaResponse_(const ContainerAllocator& _alloc)
  : isDone(false)
  {
  }

  typedef uint8_t _isDone_type;
  uint8_t isDone;


  typedef boost::shared_ptr< ::robotino_movements::ProvaResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_movements::ProvaResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ProvaResponse
typedef  ::robotino_movements::ProvaResponse_<std::allocator<void> > ProvaResponse;

typedef boost::shared_ptr< ::robotino_movements::ProvaResponse> ProvaResponsePtr;
typedef boost::shared_ptr< ::robotino_movements::ProvaResponse const> ProvaResponseConstPtr;

struct Prova
{

typedef ProvaRequest Request;
typedef ProvaResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Prova
} // namespace robotino_movements

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_movements::ProvaRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_movements::ProvaRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_movements::ProvaRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::robotino_movements::ProvaRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_movements::ProvaRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_movements/ProvaRequest";
  }

  static const char* value(const  ::robotino_movements::ProvaRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_movements::ProvaRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::robotino_movements::ProvaRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotino_movements::ProvaRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_movements::ProvaResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_movements::ProvaResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_movements::ProvaResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e3694f9e06d87bcd1eac27665df8fca4";
  }

  static const char* value(const  ::robotino_movements::ProvaResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe3694f9e06d87bcdULL;
  static const uint64_t static_value2 = 0x1eac27665df8fca4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_movements::ProvaResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_movements/ProvaResponse";
  }

  static const char* value(const  ::robotino_movements::ProvaResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_movements::ProvaResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool isDone\n\
\n\
\n\
";
  }

  static const char* value(const  ::robotino_movements::ProvaResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotino_movements::ProvaResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_movements::ProvaRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ProvaRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_movements::ProvaResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.isDone);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ProvaResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robotino_movements::Prova> {
  static const char* value() 
  {
    return "e3694f9e06d87bcd1eac27665df8fca4";
  }

  static const char* value(const robotino_movements::Prova&) { return value(); } 
};

template<>
struct DataType<robotino_movements::Prova> {
  static const char* value() 
  {
    return "robotino_movements/Prova";
  }

  static const char* value(const robotino_movements::Prova&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotino_movements::ProvaRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e3694f9e06d87bcd1eac27665df8fca4";
  }

  static const char* value(const robotino_movements::ProvaRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotino_movements::ProvaRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_movements/Prova";
  }

  static const char* value(const robotino_movements::ProvaRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotino_movements::ProvaResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e3694f9e06d87bcd1eac27665df8fca4";
  }

  static const char* value(const robotino_movements::ProvaResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotino_movements::ProvaResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_movements/Prova";
  }

  static const char* value(const robotino_movements::ProvaResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBOTINO_MOVEMENTS_SERVICE_PROVA_H

