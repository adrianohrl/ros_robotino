/* Auto-generated by genmsg_cpp for file /home/viki/ros_workspace/robotino-ros-pkg/robotino/robotino_msgs/msg/SetGrapplerAxes.msg */
#ifndef ROBOTINO_MSGS_MESSAGE_SETGRAPPLERAXES_H
#define ROBOTINO_MSGS_MESSAGE_SETGRAPPLERAXES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace robotino_msgs
{
template <class ContainerAllocator>
struct SetGrapplerAxes_ {
  typedef SetGrapplerAxes_<ContainerAllocator> Type;

  SetGrapplerAxes_()
  : stamp()
  , angles()
  , velocities()
  {
  }

  SetGrapplerAxes_(const ContainerAllocator& _alloc)
  : stamp()
  , angles(_alloc)
  , velocities(_alloc)
  {
  }

  typedef ros::Time _stamp_type;
  ros::Time stamp;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angles_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  angles;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _velocities_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  velocities;


  typedef boost::shared_ptr< ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetGrapplerAxes
typedef  ::robotino_msgs::SetGrapplerAxes_<std::allocator<void> > SetGrapplerAxes;

typedef boost::shared_ptr< ::robotino_msgs::SetGrapplerAxes> SetGrapplerAxesPtr;
typedef boost::shared_ptr< ::robotino_msgs::SetGrapplerAxes const> SetGrapplerAxesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robotino_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2d3c214086c6fdfe1e85f9e5abf4507a";
  }

  static const char* value(const  ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2d3c214086c6fdfeULL;
  static const uint64_t static_value2 = 0x1e85f9e5abf4507aULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_msgs/SetGrapplerAxes";
  }

  static const char* value(const  ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "time stamp\n\
float32[] angles		# in degrees\n\
float32[] velocities	# in rpm\n\
";
  }

  static const char* value(const  ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.stamp);
    stream.next(m.angles);
    stream.next(m.velocities);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetGrapplerAxes_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robotino_msgs::SetGrapplerAxes_<ContainerAllocator> & v) 
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angles[i]);
    }
    s << indent << "velocities[]" << std::endl;
    for (size_t i = 0; i < v.velocities.size(); ++i)
    {
      s << indent << "  velocities[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocities[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBOTINO_MSGS_MESSAGE_SETGRAPPLERAXES_H

