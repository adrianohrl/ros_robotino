/* Auto-generated by genmsg_cpp for file /home/viki/ros_workspace/robotino-ros-pkg/robotino/robotino_msgs/srv/SetGripperState.srv */
#ifndef ROBOTINO_MSGS_SERVICE_SETGRIPPERSTATE_H
#define ROBOTINO_MSGS_SERVICE_SETGRIPPERSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace robotino_msgs
{
template <class ContainerAllocator>
struct SetGripperStateRequest_ {
  typedef SetGripperStateRequest_<ContainerAllocator> Type;

  SetGripperStateRequest_()
  : state(false)
  {
  }

  SetGripperStateRequest_(const ContainerAllocator& _alloc)
  : state(false)
  {
  }

  typedef uint8_t _state_type;
  uint8_t state;


  typedef boost::shared_ptr< ::robotino_msgs::SetGripperStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_msgs::SetGripperStateRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetGripperStateRequest
typedef  ::robotino_msgs::SetGripperStateRequest_<std::allocator<void> > SetGripperStateRequest;

typedef boost::shared_ptr< ::robotino_msgs::SetGripperStateRequest> SetGripperStateRequestPtr;
typedef boost::shared_ptr< ::robotino_msgs::SetGripperStateRequest const> SetGripperStateRequestConstPtr;


template <class ContainerAllocator>
struct SetGripperStateResponse_ {
  typedef SetGripperStateResponse_<ContainerAllocator> Type;

  SetGripperStateResponse_()
  {
  }

  SetGripperStateResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::robotino_msgs::SetGripperStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_msgs::SetGripperStateResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetGripperStateResponse
typedef  ::robotino_msgs::SetGripperStateResponse_<std::allocator<void> > SetGripperStateResponse;

typedef boost::shared_ptr< ::robotino_msgs::SetGripperStateResponse> SetGripperStateResponsePtr;
typedef boost::shared_ptr< ::robotino_msgs::SetGripperStateResponse const> SetGripperStateResponseConstPtr;

struct SetGripperState
{

typedef SetGripperStateRequest Request;
typedef SetGripperStateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetGripperState
} // namespace robotino_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_msgs::SetGripperStateRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_msgs::SetGripperStateRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_msgs::SetGripperStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "001fde3cab9e313a150416ff09c08ee4";
  }

  static const char* value(const  ::robotino_msgs::SetGripperStateRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x001fde3cab9e313aULL;
  static const uint64_t static_value2 = 0x150416ff09c08ee4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_msgs::SetGripperStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_msgs/SetGripperStateRequest";
  }

  static const char* value(const  ::robotino_msgs::SetGripperStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_msgs::SetGripperStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool state\n\
\n\
";
  }

  static const char* value(const  ::robotino_msgs::SetGripperStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotino_msgs::SetGripperStateRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robotino_msgs::SetGripperStateResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robotino_msgs::SetGripperStateResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robotino_msgs::SetGripperStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::robotino_msgs::SetGripperStateResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_msgs::SetGripperStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_msgs/SetGripperStateResponse";
  }

  static const char* value(const  ::robotino_msgs::SetGripperStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robotino_msgs::SetGripperStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::robotino_msgs::SetGripperStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robotino_msgs::SetGripperStateResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_msgs::SetGripperStateRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetGripperStateRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robotino_msgs::SetGripperStateResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetGripperStateResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robotino_msgs::SetGripperState> {
  static const char* value() 
  {
    return "001fde3cab9e313a150416ff09c08ee4";
  }

  static const char* value(const robotino_msgs::SetGripperState&) { return value(); } 
};

template<>
struct DataType<robotino_msgs::SetGripperState> {
  static const char* value() 
  {
    return "robotino_msgs/SetGripperState";
  }

  static const char* value(const robotino_msgs::SetGripperState&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotino_msgs::SetGripperStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "001fde3cab9e313a150416ff09c08ee4";
  }

  static const char* value(const robotino_msgs::SetGripperStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotino_msgs::SetGripperStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_msgs/SetGripperState";
  }

  static const char* value(const robotino_msgs::SetGripperStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robotino_msgs::SetGripperStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "001fde3cab9e313a150416ff09c08ee4";
  }

  static const char* value(const robotino_msgs::SetGripperStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robotino_msgs::SetGripperStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robotino_msgs/SetGripperState";
  }

  static const char* value(const robotino_msgs::SetGripperStateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBOTINO_MSGS_SERVICE_SETGRIPPERSTATE_H

